
UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cd0  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df94  0800df94  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800df94  0800df94  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df94  0800df94  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df98  0800df98  0001df98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800df9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200000c4  0800e060  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  0800e060  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a069  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040de  00000000  00000000  0003a15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022abf  00000000  00000000  000408e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c88c  00000000  00000000  0006339f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8648  00000000  00000000  0007fc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005928  00000000  00000000  001282c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2ac 	.word	0x0800a2ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	0800a2ac 	.word	0x0800a2ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Io_EllipseGps_Destroy>:

// Probably best to do this via an interrupt or DMA so we don't have to block to read from the sensor
// Reading via blocking is a good start though

SbgErrorCode Io_EllipseGps_Destroy(SbgInterface *interface)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    // TODO: Implement
    return SBG_NO_ERROR;
 8000288:	2300      	movs	r3, #0
}
 800028a:	4618      	mov	r0, r3
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <Io_EllipseGps_Read>:

SbgErrorCode Io_EllipseGps_Read(SbgInterface *interface, void *buffer, size_t *read_bytes, size_t bytes_to_read)
{
 8000296:	b480      	push	{r7}
 8000298:	b085      	sub	sp, #20
 800029a:	af00      	add	r7, sp, #0
 800029c:	60f8      	str	r0, [r7, #12]
 800029e:	60b9      	str	r1, [r7, #8]
 80002a0:	607a      	str	r2, [r7, #4]
 80002a2:	603b      	str	r3, [r7, #0]
	// TODO: Implement
    return SBG_NO_ERROR;
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <Io_EllipseGps_Write>:

SbgErrorCode Io_EllipseGps_Write(SbgInterface *interface, const void *buffer, size_t bytes_to_write)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
    // TODO: Implement
    return SBG_NO_ERROR;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <Io_EllipseGps_Flush>:

SbgErrorCode Io_EllipseGps_Flush(SbgInterface *interface, uint32_t flags)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
    // TODO: Implement
    return SBG_NO_ERROR;
 80002d6:	2300      	movs	r3, #0
}
 80002d8:	4618      	mov	r0, r3
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <Io_EllipseGps_LogReceivedCallback>:
    SbgEComHandle *         handle,
    SbgEComClass            msg_class,
    SbgEComMsgId            msg,
    const SbgBinaryLogData *log_data,
    void *                  user_arg)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	460b      	mov	r3, r1
 80002f0:	72fb      	strb	r3, [r7, #11]
 80002f2:	4613      	mov	r3, r2
 80002f4:	72bb      	strb	r3, [r7, #10]
    // TODO: Implement
    return SBG_NO_ERROR;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <sbgInterfaceSerialCreate>:

SbgErrorCode sbgInterfaceSerialCreate(SbgInterface *interface, const char *deviceName, uint32_t baud_rate)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
    assert(baud_rate == SBG_ELLIPSE_BAUD_RATE);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000316:	d005      	beq.n	8000324 <sbgInterfaceSerialCreate+0x20>
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <sbgInterfaceSerialCreate+0x60>)
 800031a:	4a13      	ldr	r2, [pc, #76]	; (8000368 <sbgInterfaceSerialCreate+0x64>)
 800031c:	2131      	movs	r1, #49	; 0x31
 800031e:	4813      	ldr	r0, [pc, #76]	; (800036c <sbgInterfaceSerialCreate+0x68>)
 8000320:	f008 fd96 	bl	8008e50 <__assert_func>
    sbgInterfaceNameSet(interface, deviceName);
 8000324:	68b9      	ldr	r1, [r7, #8]
 8000326:	68f8      	ldr	r0, [r7, #12]
 8000328:	f002 fc9c 	bl	8002c64 <sbgInterfaceNameSet>

    interface->handle       = NULL;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
    interface->type         = SBG_IF_TYPE_UNKNOW;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
    interface->pDestroyFunc = Io_EllipseGps_Destroy;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <sbgInterfaceSerialCreate+0x6c>)
 800033c:	639a      	str	r2, [r3, #56]	; 0x38
    interface->pReadFunc    = Io_EllipseGps_Read;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <sbgInterfaceSerialCreate+0x70>)
 8000342:	641a      	str	r2, [r3, #64]	; 0x40
    interface->pWriteFunc   = Io_EllipseGps_Write;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <sbgInterfaceSerialCreate+0x74>)
 8000348:	63da      	str	r2, [r3, #60]	; 0x3c
    interface->pFlushFunc   = Io_EllipseGps_Flush;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4a0b      	ldr	r2, [pc, #44]	; (800037c <sbgInterfaceSerialCreate+0x78>)
 800034e:	645a      	str	r2, [r3, #68]	; 0x44

    return Io_EllipseGps_Flush(interface, SBG_IF_FLUSH_ALL);
 8000350:	2103      	movs	r1, #3
 8000352:	68f8      	ldr	r0, [r7, #12]
 8000354:	f7ff ffba 	bl	80002cc <Io_EllipseGps_Flush>
 8000358:	4603      	mov	r3, r0
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	0800a2c4 	.word	0x0800a2c4
 8000368:	0800c74c 	.word	0x0800c74c
 800036c:	0800a2e8 	.word	0x0800a2e8
 8000370:	08000281 	.word	0x08000281
 8000374:	08000297 	.word	0x08000297
 8000378:	080002b3 	.word	0x080002b3
 800037c:	080002cd 	.word	0x080002cd

08000380 <Io_EllipseGps_Init>:

void Io_EllipseGps_Init()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
    SbgErrorCode  err_code = SBG_NO_ERROR;
 800038a:	2300      	movs	r3, #0
 800038c:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8000390:	f102 0207 	add.w	r2, r2, #7
 8000394:	7013      	strb	r3, [r2, #0]
    SbgInterface  sbg_interface;
    SbgEComHandle com_handle;

    // Init SBG interface handle
    err_code = sbgInterfaceSerialCreate(&sbg_interface, "SBG Ellipse N", SBG_ELLIPSE_BAUD_RATE);
 8000396:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800039a:	f103 0310 	add.w	r3, r3, #16
 800039e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003a2:	491a      	ldr	r1, [pc, #104]	; (800040c <Io_EllipseGps_Init+0x8c>)
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ffad 	bl	8000304 <sbgInterfaceSerialCreate>
 80003aa:	4603      	mov	r3, r0
 80003ac:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80003b0:	f102 0207 	add.w	r2, r2, #7
 80003b4:	7013      	strb	r3, [r2, #0]

    // Init SBG communication handle
    err_code = sbgEComInit(&com_handle, &sbg_interface);
 80003b6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80003ba:	f102 0210 	add.w	r2, r2, #16
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	3b08      	subs	r3, #8
 80003c4:	4611      	mov	r1, r2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f008 fbde 	bl	8008b88 <sbgEComInit>
 80003cc:	4603      	mov	r3, r0
 80003ce:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80003d2:	f102 0207 	add.w	r2, r2, #7
 80003d6:	7013      	strb	r3, [r2, #0]

    // Set the callback function (called when log received and parsed)
    sbgEComSetReceiveLogCallback(&com_handle, Io_EllipseGps_LogReceivedCallback, NULL);
 80003d8:	f107 0308 	add.w	r3, r7, #8
 80003dc:	3b08      	subs	r3, #8
 80003de:	2200      	movs	r2, #0
 80003e0:	490b      	ldr	r1, [pc, #44]	; (8000410 <Io_EllipseGps_Init+0x90>)
 80003e2:	4618      	mov	r0, r3
 80003e4:	f008 fd0e 	bl	8008e04 <sbgEComSetReceiveLogCallback>

    // Handle a single log. Calls the pReadFunc set in sbgInterfaceSerialCreate to get the log to parse, then
    // parses the log into an SbgBinaryLogData object, which is passed to the callback function.
    err_code = sbgEComHandleOneLog(&com_handle);
 80003e8:	f107 0308 	add.w	r3, r7, #8
 80003ec:	3b08      	subs	r3, #8
 80003ee:	4618      	mov	r0, r3
 80003f0:	f008 fc10 	bl	8008c14 <sbgEComHandleOneLog>
 80003f4:	4603      	mov	r3, r0
 80003f6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80003fa:	f102 0207 	add.w	r2, r2, #7
 80003fe:	7013      	strb	r3, [r2, #0]

    (void)err_code;
}
 8000400:	bf00      	nop
 8000402:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	0800a304 	.word	0x0800a304
 8000410:	080002e5 	.word	0x080002e5

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000418:	f000 faf8 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f000 f820 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000420:	f000 f8c0 	bl	80005a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000424:	f000 f85e 	bl	80004e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000428:	f000 f88c 	bl	8000544 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  Io_EllipseGps_Init();
 800042c:	f7ff ffa8 	bl	8000380 <Io_EllipseGps_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	4809      	ldr	r0, [pc, #36]	; (800045c <main+0x48>)
 8000438:	f000 fdca 	bl	8000fd0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800043c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000440:	f000 fb4a 	bl	8000ad8 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <main+0x48>)
 800044c:	f000 fdc0 	bl	8000fd0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000450:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000454:	f000 fb40 	bl	8000ad8 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000458:	e7ea      	b.n	8000430 <main+0x1c>
 800045a:	bf00      	nop
 800045c:	48000400 	.word	0x48000400

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b090      	sub	sp, #64	; 0x40
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f008 ffa0 	bl	80093b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000482:	2302      	movs	r3, #2
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000486:	2301      	movs	r3, #1
 8000488:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048a:	2310      	movs	r3, #16
 800048c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	2302      	movs	r3, #2
 8000490:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000492:	2300      	movs	r3, #0
 8000494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000496:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800049a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fdad 	bl	8001000 <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004ac:	f000 f8e2 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	230f      	movs	r3, #15
 80004b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b4:	2302      	movs	r3, #2
 80004b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2102      	movs	r1, #2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fdd6 	bl	800207c <HAL_RCC_ClockConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004d6:	f000 f8cd 	bl	8000674 <Error_Handler>
  }
}
 80004da:	bf00      	nop
 80004dc:	3740      	adds	r7, #64	; 0x40
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004ea:	4a15      	ldr	r2, [pc, #84]	; (8000540 <MX_USART2_UART_Init+0x5c>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_USART2_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x58>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART2_UART_Init+0x58>)
 8000528:	f001 ffde 	bl	80024e8 <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000532:	f000 f89f 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000e0 	.word	0x200000e0
 8000540:	40004400 	.word	0x40004400

08000544 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_USART3_UART_Init+0x58>)
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <MX_USART3_UART_Init+0x5c>)
 800054c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11520;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000550:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8000554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_USART3_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_USART3_UART_Init+0x58>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART3_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_USART3_UART_Init+0x58>)
 8000588:	f001 ffae 	bl	80024e8 <HAL_UART_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000592:	f000 f86f 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000164 	.word	0x20000164
 80005a0:	40004800 	.word	0x40004800

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a24      	ldr	r2, [pc, #144]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_GPIO_Init+0xc4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xc4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_GPIO_Init+0xc4>)
 8000608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_GPIO_Init+0xc4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <MX_GPIO_Init+0xc8>)
 8000622:	f000 fcd5 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_GPIO_Init+0xcc>)
 800063e:	f000 fb55 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0xc8>)
 800065c:	f000 fb46 	bl	8000cec <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	48000400 	.word	0x48000400
 8000670:	48000800 	.word	0x48000800

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x44>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x44>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x44>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_MspInit+0x44>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <HAL_MspInit+0x44>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x44>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006b6:	2007      	movs	r0, #7
 80006b8:	f000 fae4 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <HAL_UART_MspInit+0xdc>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d129      	bne.n	800073e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800071a:	230c      	movs	r3, #12
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800072a:	2307      	movs	r3, #7
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f000 fad8 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800073c:	e02d      	b.n	800079a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <HAL_UART_MspInit+0xe4>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d128      	bne.n	800079a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 800074e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000752:	61d3      	str	r3, [r2, #28]
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 8000766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800076a:	6153      	str	r3, [r2, #20]
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800078a:	2307      	movs	r3, #7
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <HAL_UART_MspInit+0xe8>)
 8000796:	f000 faa9 	bl	8000cec <HAL_GPIO_Init>
}
 800079a:	bf00      	nop
 800079c:	3730      	adds	r7, #48	; 0x30
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40004800 	.word	0x40004800
 80007b0:	48000400 	.word	0x48000400

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f94a 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	return 1;
 800080c:	2301      	movs	r3, #1
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_kill>:

int _kill(int pid, int sig)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000822:	f008 fb33 	bl	8008e8c <__errno>
 8000826:	4603      	mov	r3, r0
 8000828:	2216      	movs	r2, #22
 800082a:	601a      	str	r2, [r3, #0]
	return -1;
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_exit>:

void _exit (int status)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffe7 	bl	8000818 <_kill>
	while (1) {}		/* Make sure we hang here */
 800084a:	e7fe      	b.n	800084a <_exit+0x12>

0800084c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e00a      	b.n	8000874 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800085e:	f3af 8000 	nop.w
 8000862:	4601      	mov	r1, r0
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf0      	blt.n	800085e <_read+0x12>
	}

return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e009      	b.n	80008ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbf1      	blt.n	8000898 <_write+0x12>
	}
	return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <_close>:

int _close(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
	return -1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e6:	605a      	str	r2, [r3, #4]
	return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_isatty>:

int _isatty(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
	return 1;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
	return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f008 fa98 	bl	8008e8c <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20004000 	.word	0x20004000
 8000988:	00000400 	.word	0x00000400
 800098c:	200001e8 	.word	0x200001e8
 8000990:	20000208 	.word	0x20000208

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f008 fc21 	bl	800922c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fd13 	bl	8000414 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80009fc:	0800df9c 	.word	0x0800df9c
  ldr r2, =_sbss
 8000a00:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000a04:	20000204 	.word	0x20000204

08000a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x28>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f931 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fe2a 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f93b 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f911 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200001ec 	.word	0x200001ec

08000ac0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200001ec 	.word	0x200001ec

08000ad8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffde 	bl	8000ac0 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff8e 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff47 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff5c 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff8e 	bl	8000bd8 <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffb0 	bl	8000c40 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e14e      	b.n	8000f9a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8140 	beq.w	8000f94 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d005      	beq.n	8000d2c <HAL_GPIO_Init+0x40>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d130      	bne.n	8000d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d62:	2201      	movs	r2, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	f003 0201 	and.w	r2, r3, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d017      	beq.n	8000dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d123      	bne.n	8000e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	6939      	ldr	r1, [r7, #16]
 8000e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0203 	and.w	r2, r3, #3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 809a 	beq.w	8000f94 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e60:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <HAL_GPIO_Init+0x2cc>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a54      	ldr	r2, [pc, #336]	; (8000fb8 <HAL_GPIO_Init+0x2cc>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <HAL_GPIO_Init+0x2cc>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e78:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ea2:	d013      	beq.n	8000ecc <HAL_GPIO_Init+0x1e0>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <HAL_GPIO_Init+0x2d4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00d      	beq.n	8000ec8 <HAL_GPIO_Init+0x1dc>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a45      	ldr	r2, [pc, #276]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x1d8>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a44      	ldr	r2, [pc, #272]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <HAL_GPIO_Init+0x1d4>
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ede:	4937      	ldr	r1, [pc, #220]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f10:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f3a:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f64:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f aea9 	bne.w	8000cfc <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	40010400 	.word	0x40010400

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001006:	af00      	add	r7, sp, #0
 8001008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	f001 b823 	b.w	800206c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 817d 	beq.w	8001336 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800103c:	4bbc      	ldr	r3, [pc, #752]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b04      	cmp	r3, #4
 8001046:	d00c      	beq.n	8001062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001048:	4bb9      	ldr	r3, [pc, #740]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d15c      	bne.n	800110e <HAL_RCC_OscConfig+0x10e>
 8001054:	4bb6      	ldr	r3, [pc, #728]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d155      	bne.n	800110e <HAL_RCC_OscConfig+0x10e>
 8001062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001066:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x94>
 800108e:	4ba8      	ldr	r3, [pc, #672]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e015      	b.n	80010c0 <HAL_RCC_OscConfig+0xc0>
 8001094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010bc:	4b9c      	ldr	r3, [pc, #624]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010cc:	fa92 f2a2 	rbit	r2, r2
 80010d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010d8:	fab2 f282 	clz	r2, r2
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f002 021f 	and.w	r2, r2, #31
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 811f 	beq.w	8001334 <HAL_RCC_OscConfig+0x334>
 80010f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 8116 	bne.w	8001334 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	f000 bfaf 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x12e>
 8001120:	4b83      	ldr	r3, [pc, #524]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a82      	ldr	r2, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e036      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 800112e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x158>
 800113e:	4b7c      	ldr	r3, [pc, #496]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a7b      	ldr	r2, [pc, #492]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b79      	ldr	r3, [pc, #484]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a78      	ldr	r2, [pc, #480]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e021      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 8001158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x184>
 800116a:	4b71      	ldr	r3, [pc, #452]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a70      	ldr	r2, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6e      	ldr	r3, [pc, #440]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6d      	ldr	r2, [pc, #436]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x19c>
 8001184:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a69      	ldr	r2, [pc, #420]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b67      	ldr	r3, [pc, #412]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a66      	ldr	r2, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	f023 020f 	bic.w	r2, r3, #15
 80011a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	495f      	ldr	r1, [pc, #380]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d059      	beq.n	800127a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fc7b 	bl	8000ac0 <HAL_GetTick>
 80011ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fc76 	bl	8000ac0 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d902      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f000 bf43 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80011e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x218>
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	e015      	b.n	8001244 <HAL_RCC_OscConfig+0x244>
 8001218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800122c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001230:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001234:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001240:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001248:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800124c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001250:	fa92 f2a2 	rbit	r2, r2
 8001254:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001258:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f002 021f 	and.w	r2, r2, #31
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ab      	beq.n	80011d0 <HAL_RCC_OscConfig+0x1d0>
 8001278:	e05d      	b.n	8001336 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fc21 	bl	8000ac0 <HAL_GetTick>
 800127e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	e00a      	b.n	800129a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fc1c 	bl	8000ac0 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d902      	bls.n	800129a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	f000 bee9 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 800129a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80012ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_OscConfig+0x2cc>
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	e015      	b.n	80012f8 <HAL_RCC_OscConfig+0x2f8>
 80012cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_RCC_OscConfig+0x330>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001300:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001304:	fa92 f2a2 	rbit	r2, r2
 8001308:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800130c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001310:	fab2 f282 	clz	r2, r2
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	f042 0220 	orr.w	r2, r2, #32
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	f002 021f 	and.w	r2, r2, #31
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1ab      	bne.n	8001284 <HAL_RCC_OscConfig+0x284>
 800132c:	e003      	b.n	8001336 <HAL_RCC_OscConfig+0x336>
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 817d 	beq.w	8001646 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800134c:	4ba6      	ldr	r3, [pc, #664]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001358:	4ba3      	ldr	r3, [pc, #652]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d172      	bne.n	800144a <HAL_RCC_OscConfig+0x44a>
 8001364:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d16c      	bne.n	800144a <HAL_RCC_OscConfig+0x44a>
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001382:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d102      	bne.n	80013a0 <HAL_RCC_OscConfig+0x3a0>
 800139a:	4b93      	ldr	r3, [pc, #588]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	e013      	b.n	80013c8 <HAL_RCC_OscConfig+0x3c8>
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013c4:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2202      	movs	r2, #2
 80013ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80013ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013d2:	fa92 f2a2 	rbit	r2, r2
 80013d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013de:	fab2 f282 	clz	r2, r2
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	f042 0220 	orr.w	r2, r2, #32
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f002 021f 	and.w	r2, r2, #31
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <HAL_RCC_OscConfig+0x410>
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d002      	beq.n	8001410 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	f000 be2e 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b75      	ldr	r3, [pc, #468]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	21f8      	movs	r1, #248	; 0xf8
 8001426:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800142e:	fa91 f1a1 	rbit	r1, r1
 8001432:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001436:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800143a:	fab1 f181 	clz	r1, r1
 800143e:	b2c9      	uxtb	r1, r1
 8001440:	408b      	lsls	r3, r1
 8001442:	4969      	ldr	r1, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001448:	e0fd      	b.n	8001646 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8088 	beq.w	800156c <HAL_RCC_OscConfig+0x56c>
 800145c:	2301      	movs	r3, #1
 800145e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800146e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800147c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	461a      	mov	r2, r3
 8001484:	2301      	movs	r3, #1
 8001486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fb1a 	bl	8000ac0 <HAL_GetTick>
 800148c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fb15 	bl	8000ac0 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d902      	bls.n	80014a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f000 bde2 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80014ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4d8>
 80014d2:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	e013      	b.n	8001500 <HAL_RCC_OscConfig+0x500>
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014ea:	2302      	movs	r3, #2
 80014ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	2202      	movs	r2, #2
 8001502:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001506:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800150a:	fa92 f2a2 	rbit	r2, r2
 800150e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001512:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f002 021f 	and.w	r2, r2, #31
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0af      	beq.n	8001492 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	21f8      	movs	r1, #248	; 0xf8
 8001548:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001550:	fa91 f1a1 	rbit	r1, r1
 8001554:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001558:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800155c:	fab1 f181 	clz	r1, r1
 8001560:	b2c9      	uxtb	r1, r1
 8001562:	408b      	lsls	r3, r1
 8001564:	4920      	ldr	r1, [pc, #128]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
 800156a:	e06c      	b.n	8001646 <HAL_RCC_OscConfig+0x646>
 800156c:	2301      	movs	r3, #1
 800156e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800157e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800158c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	461a      	mov	r2, r3
 8001594:	2300      	movs	r3, #0
 8001596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fa92 	bl	8000ac0 <HAL_GetTick>
 800159c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa8d 	bl	8000ac0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d902      	bls.n	80015b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	f000 bd5a 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80015ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	095b      	lsrs	r3, r3, #5
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d104      	bne.n	80015ec <HAL_RCC_OscConfig+0x5ec>
 80015e2:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <HAL_RCC_OscConfig+0x5e8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	e015      	b.n	8001614 <HAL_RCC_OscConfig+0x614>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001610:	4bc8      	ldr	r3, [pc, #800]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2202      	movs	r2, #2
 8001616:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800161a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800161e:	fa92 f2a2 	rbit	r2, r2
 8001622:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001626:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800162a:	fab2 f282 	clz	r2, r2
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	f002 021f 	and.w	r2, r2, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ad      	bne.n	80015a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8110 	beq.w	800187c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d079      	beq.n	8001760 <HAL_RCC_OscConfig+0x760>
 800166c:	2301      	movs	r3, #1
 800166e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800167e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	4bab      	ldr	r3, [pc, #684]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	461a      	mov	r2, r3
 8001692:	2301      	movs	r3, #1
 8001694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fa13 	bl	8000ac0 <HAL_GetTick>
 800169a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fa0e 	bl	8000ac0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d902      	bls.n	80016b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f000 bcdb 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016d0:	2202      	movs	r2, #2
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fa93 f2a3 	rbit	r2, r3
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016f4:	2202      	movs	r2, #2
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f2a3 	rbit	r2, r3
 8001706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800170e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001710:	4b88      	ldr	r3, [pc, #544]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800171c:	2102      	movs	r1, #2
 800171e:	6019      	str	r1, [r3, #0]
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f1a3 	rbit	r1, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001736:	6019      	str	r1, [r3, #0]
  return result;
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0a0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x6a0>
 800175e:	e08d      	b.n	800187c <HAL_RCC_OscConfig+0x87c>
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800178c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x938>)
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	461a      	mov	r2, r3
 800179e:	2300      	movs	r3, #0
 80017a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff f98d 	bl	8000ac0 <HAL_GetTick>
 80017a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff f988 	bl	8000ac0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d902      	bls.n	80017c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	f000 bc55 	b.w	800206c <HAL_RCC_OscConfig+0x106c>
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f2a3 	rbit	r2, r3
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800182c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800183a:	2102      	movs	r1, #2
 800183c:	6019      	str	r1, [r3, #0]
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f1a3 	rbit	r1, r3
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001854:	6019      	str	r1, [r3, #0]
  return result;
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d197      	bne.n	80017ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 81a1 	beq.w	8001bd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ae:	61d3      	str	r3, [r2, #28]
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11a      	bne.n	8001914 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7ff f8e9 	bl	8000ac0 <HAL_GetTick>
 80018ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	e009      	b.n	8001908 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff f8e4 	bl	8000ac0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e3b1      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_RCC_OscConfig+0x93c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ef      	beq.n	80018f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x940>
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a02      	ldr	r2, [pc, #8]	; (8001934 <HAL_RCC_OscConfig+0x934>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e03c      	b.n	80019ac <HAL_RCC_OscConfig+0x9ac>
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	10908120 	.word	0x10908120
 800193c:	40007000 	.word	0x40007000
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10c      	bne.n	800196a <HAL_RCC_OscConfig+0x96a>
 8001950:	4bc1      	ldr	r3, [pc, #772]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4ac0      	ldr	r2, [pc, #768]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	4bbe      	ldr	r3, [pc, #760]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4abd      	ldr	r2, [pc, #756]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	e020      	b.n	80019ac <HAL_RCC_OscConfig+0x9ac>
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x994>
 800197a:	4bb7      	ldr	r3, [pc, #732]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4ab6      	ldr	r2, [pc, #728]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	4bb4      	ldr	r3, [pc, #720]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4ab3      	ldr	r2, [pc, #716]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x9ac>
 8001994:	4bb0      	ldr	r3, [pc, #704]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4aaf      	ldr	r2, [pc, #700]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	4bad      	ldr	r3, [pc, #692]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4aac      	ldr	r2, [pc, #688]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8081 	beq.w	8001ac0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff f87f 	bl	8000ac0 <HAL_GetTick>
 80019c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff f87a 	bl	8000ac0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e345      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019e8:	2202      	movs	r2, #2
 80019ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a26:	601a      	str	r2, [r3, #0]
  return result;
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0xa4c>
 8001a46:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0xa74>
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a54:	2202      	movs	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	6011      	str	r1, [r2, #0]
 8001a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	fa92 f1a2 	rbit	r1, r2
 8001a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a96:	6011      	str	r1, [r2, #0]
  return result;
 8001a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	fab2 f282 	clz	r2, r2
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f002 021f 	and.w	r2, r2, #31
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d084      	beq.n	80019c8 <HAL_RCC_OscConfig+0x9c8>
 8001abe:	e07f      	b.n	8001bc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7fe fffe 	bl	8000ac0 <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7fe fff9 	bl	8000ac0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e2c4      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b0e:	2202      	movs	r2, #2
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b28:	601a      	str	r2, [r3, #0]
  return result;
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0xb4e>
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	e013      	b.n	8001b76 <HAL_RCC_OscConfig+0xb76>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b56:	2202      	movs	r2, #2
 8001b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b7e:	2102      	movs	r1, #2
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	fa92 f1a2 	rbit	r1, r2
 8001b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b98:	6011      	str	r1, [r2, #0]
  return result;
 8001b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d184      	bne.n	8001aca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8242 	beq.w	800206a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_RCC_OscConfig+0xc58>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	f000 8213 	beq.w	800201a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f040 8162 	bne.w	8001eca <HAL_RCC_OscConfig+0xeca>
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ff38 	bl	8000ac0 <HAL_GetTick>
 8001c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	e00c      	b.n	8001c70 <HAL_RCC_OscConfig+0xc70>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe ff30 	bl	8000ac0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1fd      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c94:	601a      	str	r2, [r3, #0]
  return result;
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_OscConfig+0xcba>
 8001cb4:	4bb0      	ldr	r3, [pc, #704]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	e027      	b.n	8001d0a <HAL_RCC_OscConfig+0xd0a>
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	4b9c      	ldr	r3, [pc, #624]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d16:	6011      	str	r1, [r2, #0]
 8001d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	fa92 f1a2 	rbit	r1, r2
 8001d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d2e:	6011      	str	r1, [r2, #0]
  return result;
 8001d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	fab2 f282 	clz	r2, r2
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f042 0220 	orr.w	r2, r2, #32
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f002 021f 	and.w	r2, r2, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d182      	bne.n	8001c5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	497f      	ldr	r1, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	fa93 f2a3 	rbit	r2, r3
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001da2:	601a      	str	r2, [r3, #0]
  return result;
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fe7c 	bl	8000ac0 <HAL_GetTick>
 8001dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe fe77 	bl	8000ac0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e144      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e06:	601a      	str	r2, [r3, #0]
  return result;
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_RCC_OscConfig+0xe2c>
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	e027      	b.n	8001e7c <HAL_RCC_OscConfig+0xe7c>
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e88:	6011      	str	r1, [r2, #0]
 8001e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	fa92 f1a2 	rbit	r1, r2
 8001e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ea0:	6011      	str	r1, [r2, #0]
  return result;
 8001ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d082      	beq.n	8001dce <HAL_RCC_OscConfig+0xdce>
 8001ec8:	e0cf      	b.n	800206a <HAL_RCC_OscConfig+0x106a>
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001eee:	601a      	str	r2, [r3, #0]
  return result;
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ef8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fdd6 	bl	8000ac0 <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fdd1 	bl	8000ac0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e09e      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f52:	601a      	str	r2, [r3, #0]
  return result;
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d104      	bne.n	8001f7c <HAL_RCC_OscConfig+0xf7c>
 8001f72:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <HAL_RCC_OscConfig+0xf78>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e029      	b.n	8001fcc <HAL_RCC_OscConfig+0xfcc>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_OscConfig+0x1078>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd8:	6011      	str	r1, [r2, #0]
 8001fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	fa92 f1a2 	rbit	r1, r2
 8001fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ff0:	6011      	str	r1, [r2, #0]
  return result;
 8001ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d180      	bne.n	8001f1a <HAL_RCC_OscConfig+0xf1a>
 8002018:	e027      	b.n	800206a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e01e      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_OscConfig+0x1078>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800203a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	429a      	cmp	r2, r3
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800204e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b09e      	sub	sp, #120	; 0x78
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e162      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	498b      	ldr	r1, [pc, #556]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e14a      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b82      	ldr	r3, [pc, #520]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	497f      	ldr	r1, [pc, #508]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80dc 	beq.w	80022a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d13c      	bne.n	8002172 <HAL_RCC_ClockConfig+0xf6>
 80020f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <HAL_RCC_ClockConfig+0xa6>
 800211c:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e00f      	b.n	8002142 <HAL_RCC_ClockConfig+0xc6>
 8002122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	667b      	str	r3, [r7, #100]	; 0x64
 8002130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002134:	663b      	str	r3, [r7, #96]	; 0x60
 8002136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800213e:	4b67      	ldr	r3, [pc, #412]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002146:	65ba      	str	r2, [r7, #88]	; 0x58
 8002148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800214a:	fa92 f2a2 	rbit	r2, r2
 800214e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f042 0220 	orr.w	r2, r2, #32
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f002 021f 	and.w	r2, r2, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d17b      	bne.n	8002266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0f3      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d13c      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x178>
 800217a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x128>
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	e00f      	b.n	80021c4 <HAL_RCC_ClockConfig+0x148>
 80021a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
 80021b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40
 80021b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80021ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d13a      	bne.n	8002266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b2      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
 80021f4:	2302      	movs	r3, #2
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d102      	bne.n	800221c <HAL_RCC_ClockConfig+0x1a0>
 8002216:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	e00d      	b.n	8002238 <HAL_RCC_ClockConfig+0x1bc>
 800221c:	2302      	movs	r3, #2
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2202      	movs	r2, #2
 800223a:	61ba      	str	r2, [r7, #24]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	fa92 f2a2 	rbit	r2, r2
 8002242:	617a      	str	r2, [r7, #20]
  return result;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	fab2 f282 	clz	r2, r2
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f042 0220 	orr.w	r2, r2, #32
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	f002 021f 	and.w	r2, r2, #31
 8002256:	2101      	movs	r1, #1
 8002258:	fa01 f202 	lsl.w	r2, r1, r2
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e079      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	491a      	ldr	r1, [pc, #104]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7fe fc22 	bl	8000ac0 <HAL_GetTick>
 800227c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7fe fc1e 	bl	8000ac0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e061      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_RCC_ClockConfig+0x260>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d214      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4906      	ldr	r1, [pc, #24]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_RCC_ClockConfig+0x25c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e040      	b.n	800235a <HAL_RCC_ClockConfig+0x2de>
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4912      	ldr	r1, [pc, #72]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800231e:	f000 f829 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002322:	4601      	mov	r1, r0
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_RCC_ClockConfig+0x2e8>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800232c:	22f0      	movs	r2, #240	; 0xf0
 800232e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	fa92 f2a2 	rbit	r2, r2
 8002336:	60fa      	str	r2, [r7, #12]
  return result;
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	40d3      	lsrs	r3, r2
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x2ec>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	fa21 f303 	lsr.w	r3, r1, r3
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_RCC_ClockConfig+0x2f0>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_ClockConfig+0x2f4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fb70 	bl	8000a38 <HAL_InitTick>
  
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3778      	adds	r7, #120	; 0x78
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	0800c768 	.word	0x0800c768
 800236c:	20000000 	.word	0x20000000
 8002370:	20000004 	.word	0x20000004

08002374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b08b      	sub	sp, #44	; 0x2c
 8002378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x30>
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x36>
 80023a2:	e03c      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023a6:	623b      	str	r3, [r7, #32]
      break;
 80023a8:	e03c      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	fa92 f2a2 	rbit	r2, r2
 80023bc:	607a      	str	r2, [r7, #4]
  return result;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	40d3      	lsrs	r3, r2
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	220f      	movs	r2, #15
 80023d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	60fa      	str	r2, [r7, #12]
  return result;
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	40d3      	lsrs	r3, r2
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	fbb2 f2f3 	udiv	r2, r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	e004      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	623b      	str	r3, [r7, #32]
      break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002420:	623b      	str	r3, [r7, #32]
      break;
 8002422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002424:	6a3b      	ldr	r3, [r7, #32]
}
 8002426:	4618      	mov	r0, r3
 8002428:	372c      	adds	r7, #44	; 0x2c
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	007a1200 	.word	0x007a1200
 800243c:	0800c780 	.word	0x0800c780
 8002440:	0800c790 	.word	0x0800c790
 8002444:	003d0900 	.word	0x003d0900

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_GetHCLKFreq+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000000 	.word	0x20000000

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002466:	f7ff ffef 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 800246a:	4601      	mov	r1, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002474:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	fa92 f2a2 	rbit	r2, r2
 8002480:	603a      	str	r2, [r7, #0]
  return result;
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	40d3      	lsrs	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800248e:	5cd3      	ldrb	r3, [r2, r3]
 8002490:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	0800c778 	.word	0x0800c778

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024aa:	f7ff ffcd 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 80024ae:	4601      	mov	r1, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80024b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	fa92 f2a2 	rbit	r2, r2
 80024c4:	603a      	str	r2, [r7, #0]
  return result;
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	40d3      	lsrs	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	0800c778 	.word	0x0800c778

080024e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e040      	b.n	800257c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe f8dc 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	; 0x24
 8002514:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f82c 	bl	8002584 <UART_SetConfig>
 800252c:	4603      	mov	r3, r0
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e022      	b.n	800257c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f956 	bl	80027f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f9dd 	bl	8002934 <UART_CheckIdleState>
 800257a:	4603      	mov	r3, r0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8a      	ldr	r3, [pc, #552]	; (80027d8 <UART_SetConfig+0x254>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	6979      	ldr	r1, [r7, #20]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a78      	ldr	r2, [pc, #480]	; (80027dc <UART_SetConfig+0x258>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d120      	bne.n	8002642 <UART_SetConfig+0xbe>
 8002600:	4b77      	ldr	r3, [pc, #476]	; (80027e0 <UART_SetConfig+0x25c>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b03      	cmp	r3, #3
 800260a:	d817      	bhi.n	800263c <UART_SetConfig+0xb8>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <UART_SetConfig+0x90>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002625 	.word	0x08002625
 8002618:	08002631 	.word	0x08002631
 800261c:	08002637 	.word	0x08002637
 8002620:	0800262b 	.word	0x0800262b
 8002624:	2300      	movs	r3, #0
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e01d      	b.n	8002666 <UART_SetConfig+0xe2>
 800262a:	2302      	movs	r3, #2
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e01a      	b.n	8002666 <UART_SetConfig+0xe2>
 8002630:	2304      	movs	r3, #4
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	e017      	b.n	8002666 <UART_SetConfig+0xe2>
 8002636:	2308      	movs	r3, #8
 8002638:	77fb      	strb	r3, [r7, #31]
 800263a:	e014      	b.n	8002666 <UART_SetConfig+0xe2>
 800263c:	2310      	movs	r3, #16
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	e011      	b.n	8002666 <UART_SetConfig+0xe2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a67      	ldr	r2, [pc, #412]	; (80027e4 <UART_SetConfig+0x260>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d102      	bne.n	8002652 <UART_SetConfig+0xce>
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
 8002650:	e009      	b.n	8002666 <UART_SetConfig+0xe2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a64      	ldr	r2, [pc, #400]	; (80027e8 <UART_SetConfig+0x264>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d102      	bne.n	8002662 <UART_SetConfig+0xde>
 800265c:	2300      	movs	r3, #0
 800265e:	77fb      	strb	r3, [r7, #31]
 8002660:	e001      	b.n	8002666 <UART_SetConfig+0xe2>
 8002662:	2310      	movs	r3, #16
 8002664:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266e:	d15b      	bne.n	8002728 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002670:	7ffb      	ldrb	r3, [r7, #31]
 8002672:	2b08      	cmp	r3, #8
 8002674:	d827      	bhi.n	80026c6 <UART_SetConfig+0x142>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <UART_SetConfig+0xf8>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	080026a1 	.word	0x080026a1
 8002680:	080026a9 	.word	0x080026a9
 8002684:	080026b1 	.word	0x080026b1
 8002688:	080026c7 	.word	0x080026c7
 800268c:	080026b7 	.word	0x080026b7
 8002690:	080026c7 	.word	0x080026c7
 8002694:	080026c7 	.word	0x080026c7
 8002698:	080026c7 	.word	0x080026c7
 800269c:	080026bf 	.word	0x080026bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026a0:	f7ff fede 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 80026a4:	61b8      	str	r0, [r7, #24]
        break;
 80026a6:	e013      	b.n	80026d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026a8:	f7ff fefc 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 80026ac:	61b8      	str	r0, [r7, #24]
        break;
 80026ae:	e00f      	b.n	80026d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026b0:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <UART_SetConfig+0x268>)
 80026b2:	61bb      	str	r3, [r7, #24]
        break;
 80026b4:	e00c      	b.n	80026d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026b6:	f7ff fe5d 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 80026ba:	61b8      	str	r0, [r7, #24]
        break;
 80026bc:	e008      	b.n	80026d0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026c2:	61bb      	str	r3, [r7, #24]
        break;
 80026c4:	e004      	b.n	80026d0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	77bb      	strb	r3, [r7, #30]
        break;
 80026ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d074      	beq.n	80027c0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	005a      	lsls	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	441a      	add	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d916      	bls.n	8002722 <UART_SetConfig+0x19e>
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026fa:	d212      	bcs.n	8002722 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f023 030f 	bic.w	r3, r3, #15
 8002704:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	b29a      	uxth	r2, r3
 8002712:	89fb      	ldrh	r3, [r7, #14]
 8002714:	4313      	orrs	r3, r2
 8002716:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	89fa      	ldrh	r2, [r7, #14]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	e04e      	b.n	80027c0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	77bb      	strb	r3, [r7, #30]
 8002726:	e04b      	b.n	80027c0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002728:	7ffb      	ldrb	r3, [r7, #31]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d827      	bhi.n	800277e <UART_SetConfig+0x1fa>
 800272e:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <UART_SetConfig+0x1b0>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	08002759 	.word	0x08002759
 8002738:	08002761 	.word	0x08002761
 800273c:	08002769 	.word	0x08002769
 8002740:	0800277f 	.word	0x0800277f
 8002744:	0800276f 	.word	0x0800276f
 8002748:	0800277f 	.word	0x0800277f
 800274c:	0800277f 	.word	0x0800277f
 8002750:	0800277f 	.word	0x0800277f
 8002754:	08002777 	.word	0x08002777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002758:	f7ff fe82 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 800275c:	61b8      	str	r0, [r7, #24]
        break;
 800275e:	e013      	b.n	8002788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002760:	f7ff fea0 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8002764:	61b8      	str	r0, [r7, #24]
        break;
 8002766:	e00f      	b.n	8002788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <UART_SetConfig+0x268>)
 800276a:	61bb      	str	r3, [r7, #24]
        break;
 800276c:	e00c      	b.n	8002788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800276e:	f7ff fe01 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002772:	61b8      	str	r0, [r7, #24]
        break;
 8002774:	e008      	b.n	8002788 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277a:	61bb      	str	r3, [r7, #24]
        break;
 800277c:	e004      	b.n	8002788 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	77bb      	strb	r3, [r7, #30]
        break;
 8002786:	bf00      	nop
    }

    if (pclk != 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	085a      	lsrs	r2, r3, #1
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	d908      	bls.n	80027bc <UART_SetConfig+0x238>
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d204      	bcs.n	80027bc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e001      	b.n	80027c0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	efff69f3 	.word	0xefff69f3
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40004400 	.word	0x40004400
 80027e8:	40004800 	.word	0x40004800
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01a      	beq.n	8002906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ee:	d10a      	bne.n	8002906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
  }
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af02      	add	r7, sp, #8
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002944:	f7fe f8bc 	bl	8000ac0 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d10e      	bne.n	8002976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f82d 	bl	80029c6 <UART_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e023      	b.n	80029be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b04      	cmp	r3, #4
 8002982:	d10e      	bne.n	80029a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f817 	bl	80029c6 <UART_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e00d      	b.n	80029be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b09c      	sub	sp, #112	; 0x70
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d6:	e0a5      	b.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029de:	f000 80a1 	beq.w	8002b24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fe f86d 	bl	8000ac0 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80029f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d13e      	bne.n	8002a76 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e6      	bne.n	80029f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3308      	adds	r3, #8
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	663b      	str	r3, [r7, #96]	; 0x60
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3308      	adds	r3, #8
 8002a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e067      	b.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d04f      	beq.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a92:	d147      	bne.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
 8002abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e6      	bne.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3308      	adds	r3, #8
 8002aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002af0:	623a      	str	r2, [r7, #32]
 8002af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	69f9      	ldr	r1, [r7, #28]
 8002af6:	6a3a      	ldr	r2, [r7, #32]
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e5      	bne.n	8002ad0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e010      	b.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	f43f af4a 	beq.w	80029d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3770      	adds	r7, #112	; 0x70
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <sbgCrc16Get>:
 *	Returns the computed 32 bit CRC value.
 *	\param[in]	pInstance				Read only pointer on a valid Crc16 object.
 *	\return								The computed CRC.
 */
SBG_INLINE uint16_t sbgCrc16Get(const SbgCrc16 *pInstance)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	return *pInstance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	881b      	ldrh	r3, [r3, #0]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <sbgCrc16Initialize>:
/*!
 *	Initialize the 16 bit CRC computation system.
 *	\param[in]	pInstance				Pointer on an allocated but non initialized Crc16 object.
 */
SBG_COMMON_LIB_API void sbgCrc16Initialize(SbgCrc16 *pInstance)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	//
	// Test input argument
	//
	assert(pInstance);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <sbgCrc16Initialize+0x1a>
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <sbgCrc16Initialize+0x28>)
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <sbgCrc16Initialize+0x2c>)
 8002b7a:	21d3      	movs	r1, #211	; 0xd3
 8002b7c:	4806      	ldr	r0, [pc, #24]	; (8002b98 <sbgCrc16Initialize+0x30>)
 8002b7e:	f006 f967 	bl	8008e50 <__assert_func>

	*pInstance = 0;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	801a      	strh	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0800a314 	.word	0x0800a314
 8002b94:	0800c9a0 	.word	0x0800c9a0
 8002b98:	0800a320 	.word	0x0800a320

08002b9c <sbgCrc16Update>:
 *	\param[in]	pInstance				Read only pointer on a valid Crc16 object.
 *	\param[in]	pData					Read only pointer on the data buffer to compute CRC on.
 *	\param[in]	dataSize				Data size in bytes of the buffer.
 */
SBG_COMMON_LIB_API void sbgCrc16Update(SbgCrc16 *pInstance, const void *pData, size_t dataSize)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	const uint8_t *pBuffer = (const uint8_t*)pData;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
	size_t i;

	//
	// Test input arguments
	//
	assert(pInstance);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <sbgCrc16Update+0x22>
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <sbgCrc16Update+0x7c>)
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <sbgCrc16Update+0x80>)
 8002bb6:	21e7      	movs	r1, #231	; 0xe7
 8002bb8:	4819      	ldr	r0, [pc, #100]	; (8002c20 <sbgCrc16Update+0x84>)
 8002bba:	f006 f949 	bl	8008e50 <__assert_func>
	assert(pData);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <sbgCrc16Update+0x34>
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <sbgCrc16Update+0x88>)
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <sbgCrc16Update+0x80>)
 8002bc8:	21e8      	movs	r1, #232	; 0xe8
 8002bca:	4815      	ldr	r0, [pc, #84]	; (8002c20 <sbgCrc16Update+0x84>)
 8002bcc:	f006 f940 	bl	8008e50 <__assert_func>

    //
    // For each byte in our buffer
    //
    for (i = 0; i < dataSize; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e017      	b.n	8002c06 <sbgCrc16Update+0x6a>
    {
    	//
    	// Update the current CRC
    	//
        index = (pBuffer[i] ^ *pInstance) & 0xFF;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4053      	eors	r3, r2
 8002be6:	75fb      	strb	r3, [r7, #23]
        *pInstance = crc16LookupTable[index] ^ (*pInstance >> 8);
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <sbgCrc16Update+0x8c>)
 8002bec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < dataSize; i++)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d3e3      	bcc.n	8002bd6 <sbgCrc16Update+0x3a>
    }
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	0800a314 	.word	0x0800a314
 8002c1c:	0800c9b4 	.word	0x0800c9b4
 8002c20:	0800a320 	.word	0x0800a320
 8002c24:	0800a344 	.word	0x0800a344
 8002c28:	0800c7a0 	.word	0x0800c7a0

08002c2c <sbgCrc16Compute>:
 *	\param[in]	pData					Read only pointer on the data buffer to compute CRC on.
 *	\param[in]	dataSize				Data size in bytes of the buffer.
 *	\return								The computed CRC.
 */
SBG_COMMON_LIB_API uint16_t sbgCrc16Compute(const void *pData, size_t dataSize)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
	SbgCrc16 crcInst;

	//
	// Initialize the CRC system
	//
	sbgCrc16Initialize(&crcInst);
 8002c36:	f107 030e 	add.w	r3, r7, #14
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff94 	bl	8002b68 <sbgCrc16Initialize>

	//
	// Compute the CRC
	//
	sbgCrc16Update(&crcInst, pData, dataSize);
 8002c40:	f107 030e 	add.w	r3, r7, #14
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ffa7 	bl	8002b9c <sbgCrc16Update>

	//
	// Return it
	//
	return sbgCrc16Get(&crcInst);
 8002c4e:	f107 030e 	add.w	r3, r7, #14
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff7b 	bl	8002b4e <sbgCrc16Get>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <sbgInterfaceNameSet>:
		return gInterfaceType[SBG_IF_TYPE_UNKNOW];
	}
}

void sbgInterfaceNameSet(SbgInterface *pInterface, const char *pName)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
	size_t	nameLen;

	assert(pInterface);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <sbgInterfaceNameSet+0x1c>
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <sbgInterfaceNameSet+0x68>)
 8002c76:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <sbgInterfaceNameSet+0x6c>)
 8002c78:	2143      	movs	r1, #67	; 0x43
 8002c7a:	4816      	ldr	r0, [pc, #88]	; (8002cd4 <sbgInterfaceNameSet+0x70>)
 8002c7c:	f006 f8e8 	bl	8008e50 <__assert_func>
	assert(pName);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <sbgInterfaceNameSet+0x2e>
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <sbgInterfaceNameSet+0x74>)
 8002c88:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <sbgInterfaceNameSet+0x6c>)
 8002c8a:	2144      	movs	r1, #68	; 0x44
 8002c8c:	4811      	ldr	r0, [pc, #68]	; (8002cd4 <sbgInterfaceNameSet+0x70>)
 8002c8e:	f006 f8df 	bl	8008e50 <__assert_func>

	//
	// Only keep the end of the name that can fit in the interface name buffer
	//
	nameLen = strlen(pName);
 8002c92:	6838      	ldr	r0, [r7, #0]
 8002c94:	f7fd fa9c 	bl	80001d0 <strlen>
 8002c98:	60f8      	str	r0, [r7, #12]

	if (nameLen < SBG_ARRAY_SIZE(pInterface->name))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8002c9e:	d806      	bhi.n	8002cae <sbgInterfaceNameSet+0x4a>
	{
		strcpy(pInterface->name, pName);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f006 ffad 	bl	8009c06 <strcpy>
	}
	else
	{
		strcpy(pInterface->name, pName+(nameLen-(SBG_ARRAY_SIZE(pInterface->name)-1)));
	}
}
 8002cac:	e009      	b.n	8002cc2 <sbgInterfaceNameSet+0x5e>
		strcpy(pInterface->name, pName+(nameLen-(SBG_ARRAY_SIZE(pInterface->name)-1)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f103 0008 	add.w	r0, r3, #8
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3b2f      	subs	r3, #47	; 0x2f
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f006 ffa2 	bl	8009c06 <strcpy>
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	0800a374 	.word	0x0800a374
 8002cd0:	0800c9c4 	.word	0x0800c9c4
 8002cd4:	0800a380 	.word	0x0800a380
 8002cd8:	0800a3d4 	.word	0x0800a3d4

08002cdc <sbgErrorCodeToString>:
 * According to an error code, returns a human readable string.
 * \param[in]	errorCode					The errorCode to convert to a string.
 * \return									Read only corresponding string.
 */
static inline const char *sbgErrorCodeToString(SbgErrorCode errorCode)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
		"SBG_NOT_CONTINUOUS_FRAME",
		"SBG_INCOMPATIBLE_HARDWARE",
		"SBG_INVALID_VERSION"
	};

	assert(errorCode < SBG_ARRAY_SIZE(sbgErrorCodeString));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b14      	cmp	r3, #20
 8002cea:	d905      	bls.n	8002cf8 <sbgErrorCodeToString+0x1c>
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <sbgErrorCodeToString+0x2c>)
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <sbgErrorCodeToString+0x30>)
 8002cf0:	2173      	movs	r1, #115	; 0x73
 8002cf2:	4807      	ldr	r0, [pc, #28]	; (8002d10 <sbgErrorCodeToString+0x34>)
 8002cf4:	f006 f8ac 	bl	8008e50 <__assert_func>
	return sbgErrorCodeString[errorCode];
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <sbgErrorCodeToString+0x38>)
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	0800a3dc 	.word	0x0800a3dc
 8002d0c:	0800c9f0 	.word	0x0800c9f0
 8002d10:	0800a40c 	.word	0x0800a40c
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <sbgPlatformDebugLogMsg>:
	//
	gLogCallback = logCallback;
}

SBG_COMMON_LIB_API void sbgPlatformDebugLogMsg(const char *pFileName, const char *pFunctionName, uint32_t line, const char *pCategory, SbgDebugLogType logType, SbgErrorCode errorCode, const char *pFormat, ...)
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8002d1e:	af04      	add	r7, sp, #16
 8002d20:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8002d24:	f2a4 440c 	subw	r4, r4, #1036	; 0x40c
 8002d28:	6020      	str	r0, [r4, #0]
 8002d2a:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 8002d2e:	f5a0 6082 	sub.w	r0, r0, #1040	; 0x410
 8002d32:	6001      	str	r1, [r0, #0]
 8002d34:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8002d38:	f2a1 4114 	subw	r1, r1, #1044	; 0x414
 8002d3c:	600a      	str	r2, [r1, #0]
 8002d3e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002d42:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8002d46:	6013      	str	r3, [r2, #0]
	char		errorMsg[SBG_CONFIG_LOG_MAX_SIZE];
	va_list		args;

	assert(pFileName);
 8002d48:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002d4c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <sbgPlatformDebugLogMsg+0x4a>
 8002d56:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <sbgPlatformDebugLogMsg+0x214>)
 8002d58:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <sbgPlatformDebugLogMsg+0x218>)
 8002d5a:	215f      	movs	r1, #95	; 0x5f
 8002d5c:	4875      	ldr	r0, [pc, #468]	; (8002f34 <sbgPlatformDebugLogMsg+0x21c>)
 8002d5e:	f006 f877 	bl	8008e50 <__assert_func>
	assert(pFunctionName);
 8002d62:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002d66:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <sbgPlatformDebugLogMsg+0x64>
 8002d70:	4b71      	ldr	r3, [pc, #452]	; (8002f38 <sbgPlatformDebugLogMsg+0x220>)
 8002d72:	4a6f      	ldr	r2, [pc, #444]	; (8002f30 <sbgPlatformDebugLogMsg+0x218>)
 8002d74:	2160      	movs	r1, #96	; 0x60
 8002d76:	486f      	ldr	r0, [pc, #444]	; (8002f34 <sbgPlatformDebugLogMsg+0x21c>)
 8002d78:	f006 f86a 	bl	8008e50 <__assert_func>
	assert(pCategory);
 8002d7c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002d80:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <sbgPlatformDebugLogMsg+0x7e>
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <sbgPlatformDebugLogMsg+0x224>)
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <sbgPlatformDebugLogMsg+0x218>)
 8002d8e:	2161      	movs	r1, #97	; 0x61
 8002d90:	4868      	ldr	r0, [pc, #416]	; (8002f34 <sbgPlatformDebugLogMsg+0x21c>)
 8002d92:	f006 f85d 	bl	8008e50 <__assert_func>
	assert(pFormat);
 8002d96:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <sbgPlatformDebugLogMsg+0x92>
 8002d9e:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <sbgPlatformDebugLogMsg+0x228>)
 8002da0:	4a63      	ldr	r2, [pc, #396]	; (8002f30 <sbgPlatformDebugLogMsg+0x218>)
 8002da2:	2162      	movs	r1, #98	; 0x62
 8002da4:	4863      	ldr	r0, [pc, #396]	; (8002f34 <sbgPlatformDebugLogMsg+0x21c>)
 8002da6:	f006 f853 	bl	8008e50 <__assert_func>

	//
	// Initialize the list of variable arguments on the latest function argument
	//
	va_start(args, pFormat);
 8002daa:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8002dae:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002db2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002db6:	601a      	str	r2, [r3, #0]

	//
	// Generate the error message string
	//
	vsnprintf(errorMsg, sizeof(errorMsg), pFormat, args);
 8002db8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002dbc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002dc0:	f107 0018 	add.w	r0, r7, #24
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dce:	f006 ff4d 	bl	8009c6c <vsniprintf>
	va_end(args);

	//
	// Check if there is a valid logger callback if not use a default output
	//
	if (gLogCallback)
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <sbgPlatformDebugLogMsg+0x22c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d020      	beq.n	8002e1c <sbgPlatformDebugLogMsg+0x104>
	{
		gLogCallback(pFileName, pFunctionName, line, pCategory, logType, errorCode, errorMsg);
 8002dda:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <sbgPlatformDebugLogMsg+0x22c>)
 8002ddc:	681c      	ldr	r4, [r3, #0]
 8002dde:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002de2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002de6:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002dea:	f2a2 4214 	subw	r2, r2, #1044	; 0x414
 8002dee:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8002df2:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8002df6:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 8002dfa:	f2a0 400c 	subw	r0, r0, #1036	; 0x40c
 8002dfe:	f107 0518 	add.w	r5, r7, #24
 8002e02:	9502      	str	r5, [sp, #8]
 8002e04:	f897 542c 	ldrb.w	r5, [r7, #1068]	; 0x42c
 8002e08:	9501      	str	r5, [sp, #4]
 8002e0a:	f897 5428 	ldrb.w	r5, [r7, #1064]	; 0x428
 8002e0e:	9500      	str	r5, [sp, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	6809      	ldr	r1, [r1, #0]
 8002e16:	6800      	ldr	r0, [r0, #0]
 8002e18:	47a0      	blx	r4
		default:
			fprintf(stderr, "*UKNW* %s(%"PRIu32"): %s\n\r", pFunctionName, line, errorMsg);
			break;
		}
	}
}
 8002e1a:	e081      	b.n	8002f20 <sbgPlatformDebugLogMsg+0x208>
		switch (logType)
 8002e1c:	f897 3428 	ldrb.w	r3, [r7, #1064]	; 0x428
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d869      	bhi.n	8002ef8 <sbgPlatformDebugLogMsg+0x1e0>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <sbgPlatformDebugLogMsg+0x114>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e73 	.word	0x08002e73
 8002e34:	08002ea9 	.word	0x08002ea9
 8002e38:	08002ed1 	.word	0x08002ed1
			fprintf(stderr, "*ERR * %s(%"PRIu32"): %s - %s\n\r", pFunctionName, line, sbgErrorCodeToString(errorCode), errorMsg);
 8002e3c:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <sbgPlatformDebugLogMsg+0x230>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68dc      	ldr	r4, [r3, #12]
 8002e42:	f897 342c 	ldrb.w	r3, [r7, #1068]	; 0x42c
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff48 	bl	8002cdc <sbgErrorCodeToString>
 8002e4c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002e50:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002e54:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002e58:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002e5c:	f107 0118 	add.w	r1, r7, #24
 8002e60:	9101      	str	r1, [sp, #4]
 8002e62:	9000      	str	r0, [sp, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	4938      	ldr	r1, [pc, #224]	; (8002f4c <sbgPlatformDebugLogMsg+0x234>)
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f006 f9ac 	bl	80091c8 <fiprintf>
			break;
 8002e70:	e056      	b.n	8002f20 <sbgPlatformDebugLogMsg+0x208>
			fprintf(stderr, "*WARN* %s(%"PRIu32"): %s - %s\n\r", pFunctionName, line, sbgErrorCodeToString(errorCode), errorMsg);
 8002e72:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <sbgPlatformDebugLogMsg+0x230>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68dc      	ldr	r4, [r3, #12]
 8002e78:	f897 342c 	ldrb.w	r3, [r7, #1068]	; 0x42c
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff2d 	bl	8002cdc <sbgErrorCodeToString>
 8002e82:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002e86:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002e8a:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002e8e:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002e92:	f107 0118 	add.w	r1, r7, #24
 8002e96:	9101      	str	r1, [sp, #4]
 8002e98:	9000      	str	r0, [sp, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	492c      	ldr	r1, [pc, #176]	; (8002f50 <sbgPlatformDebugLogMsg+0x238>)
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f006 f991 	bl	80091c8 <fiprintf>
			break;
 8002ea6:	e03b      	b.n	8002f20 <sbgPlatformDebugLogMsg+0x208>
			fprintf(stderr, "*INFO* %s(%"PRIu32"): %s\n\r", pFunctionName, line, errorMsg);
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <sbgPlatformDebugLogMsg+0x230>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68d8      	ldr	r0, [r3, #12]
 8002eae:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002eb2:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002eb6:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002eba:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002ebe:	f107 0118 	add.w	r1, r7, #24
 8002ec2:	9100      	str	r1, [sp, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4922      	ldr	r1, [pc, #136]	; (8002f54 <sbgPlatformDebugLogMsg+0x23c>)
 8002eca:	f006 f97d 	bl	80091c8 <fiprintf>
			break;
 8002ece:	e027      	b.n	8002f20 <sbgPlatformDebugLogMsg+0x208>
			fprintf(stderr, "*DBG * %s(%"PRIu32"): %s\n\r", pFunctionName, line, errorMsg);
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <sbgPlatformDebugLogMsg+0x230>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68d8      	ldr	r0, [r3, #12]
 8002ed6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002eda:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002ede:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002ee2:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002ee6:	f107 0118 	add.w	r1, r7, #24
 8002eea:	9100      	str	r1, [sp, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4919      	ldr	r1, [pc, #100]	; (8002f58 <sbgPlatformDebugLogMsg+0x240>)
 8002ef2:	f006 f969 	bl	80091c8 <fiprintf>
			break;
 8002ef6:	e013      	b.n	8002f20 <sbgPlatformDebugLogMsg+0x208>
			fprintf(stderr, "*UKNW* %s(%"PRIu32"): %s\n\r", pFunctionName, line, errorMsg);
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <sbgPlatformDebugLogMsg+0x230>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68d8      	ldr	r0, [r3, #12]
 8002efe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002f02:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002f06:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002f0a:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002f0e:	f107 0118 	add.w	r1, r7, #24
 8002f12:	9100      	str	r1, [sp, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	4910      	ldr	r1, [pc, #64]	; (8002f5c <sbgPlatformDebugLogMsg+0x244>)
 8002f1a:	f006 f955 	bl	80091c8 <fiprintf>
			break;
 8002f1e:	bf00      	nop
}
 8002f20:	bf00      	nop
 8002f22:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bdb0      	pop	{r4, r5, r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	0800a434 	.word	0x0800a434
 8002f30:	0800c9d8 	.word	0x0800c9d8
 8002f34:	0800a440 	.word	0x0800a440
 8002f38:	0800a470 	.word	0x0800a470
 8002f3c:	0800a480 	.word	0x0800a480
 8002f40:	0800a48c 	.word	0x0800a48c
 8002f44:	200001f0 	.word	0x200001f0
 8002f48:	20000060 	.word	0x20000060
 8002f4c:	0800a494 	.word	0x0800a494
 8002f50:	0800a4b0 	.word	0x0800a4b0
 8002f54:	0800a4cc 	.word	0x0800a4cc
 8002f58:	0800a4e4 	.word	0x0800a4e4
 8002f5c:	0800a4fc 	.word	0x0800a4fc

08002f60 <sbgStreamBufferGetLastError>:
 *
 * \param[in]	pHandle					Pointer to a valid Stream Buffer handle
 * \return								Last stream buffer error code
 */
SBG_INLINE SbgErrorCode sbgStreamBufferGetLastError(const SbgStreamBuffer *pHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <sbgStreamBufferGetLastError+0x1c>
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <sbgStreamBufferGetLastError+0x28>)
 8002f70:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <sbgStreamBufferGetLastError+0x2c>)
 8002f72:	f240 111d 	movw	r1, #285	; 0x11d
 8002f76:	4806      	ldr	r0, [pc, #24]	; (8002f90 <sbgStreamBufferGetLastError+0x30>)
 8002f78:	f005 ff6a 	bl	8008e50 <__assert_func>

	//
	// Return error code
	//
	return pHandle->errorCode;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7c1b      	ldrb	r3, [r3, #16]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	0800a6e0 	.word	0x0800a6e0
 8002f8c:	0800cac8 	.word	0x0800cac8
 8002f90:	0800a6e8 	.word	0x0800a6e8

08002f94 <sbgStreamBufferGetSize>:
 *
 * \param[in]	pHandle					Valid handle on a stream buffer.
 * \return								The allocated size of the linked buffer in bytes.
 */
SBG_INLINE size_t sbgStreamBufferGetSize(const SbgStreamBuffer *pHandle)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <sbgStreamBufferGetSize+0x1c>
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <sbgStreamBufferGetSize+0x28>)
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <sbgStreamBufferGetSize+0x2c>)
 8002fa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002faa:	4806      	ldr	r0, [pc, #24]	; (8002fc4 <sbgStreamBufferGetSize+0x30>)
 8002fac:	f005 ff50 	bl	8008e50 <__assert_func>

	//
	// Return the linked buffer size
	//
	return pHandle->bufferSize;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	0800a6e0 	.word	0x0800a6e0
 8002fc0:	0800ca78 	.word	0x0800ca78
 8002fc4:	0800a6e8 	.word	0x0800a6e8

08002fc8 <sbgStreamBufferGetLength>:
 *
 * \param[in]	pHandle					Valid handle on a stream buffer.
 * \return								The current cursor position in bytes.
 */
SBG_INLINE size_t sbgStreamBufferGetLength(const SbgStreamBuffer *pHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <sbgStreamBufferGetLength+0x1c>
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <sbgStreamBufferGetLength+0x30>)
 8002fd8:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <sbgStreamBufferGetLength+0x34>)
 8002fda:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002fde:	4808      	ldr	r0, [pc, #32]	; (8003000 <sbgStreamBufferGetLength+0x38>)
 8002fe0:	f005 ff36 	bl	8008e50 <__assert_func>

	//
	// Return the number of bytes between the begin of the stream and the current pointer
	//
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	1ad3      	subs	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0800a6e0 	.word	0x0800a6e0
 8002ffc:	0800ca90 	.word	0x0800ca90
 8003000:	0800a6e8 	.word	0x0800a6e8

08003004 <sbgStreamBufferGetSpace>:
 *
 * \param[in]	pHandle					Valid handle on a stream buffer.
 * \return								The space available in this stream buffer in bytes.
 */
SBG_INLINE size_t sbgStreamBufferGetSpace(const SbgStreamBuffer *pHandle)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <sbgStreamBufferGetSpace+0x1c>
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <sbgStreamBufferGetSpace+0x38>)
 8003014:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <sbgStreamBufferGetSpace+0x3c>)
 8003016:	f240 1167 	movw	r1, #359	; 0x167
 800301a:	480a      	ldr	r0, [pc, #40]	; (8003044 <sbgStreamBufferGetSpace+0x40>)
 800301c:	f005 ff18 	bl	8008e50 <__assert_func>

	//
	// Return the space left in bytes
	//
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffb7 	bl	8002f94 <sbgStreamBufferGetSize>
 8003026:	4604      	mov	r4, r0
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ffcd 	bl	8002fc8 <sbgStreamBufferGetLength>
 800302e:	4603      	mov	r3, r0
 8003030:	1ae3      	subs	r3, r4, r3
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bd90      	pop	{r4, r7, pc}
 800303a:	bf00      	nop
 800303c:	0800a6e0 	.word	0x0800a6e0
 8003040:	0800ca60 	.word	0x0800ca60
 8003044:	0800a6e8 	.word	0x0800a6e8

08003048 <sbgStreamBufferReadUint16LE>:
 *
 * \param[in]	pHandle				Valid stream buffer handle that supports read operations.
 * \return							The read value or 0 if we have an error.
 */
SBG_INLINE uint16_t sbgStreamBufferReadUint16LE(SbgStreamBuffer *pHandle)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	uint16_t bytesValues[2];

	assert(pHandle);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <sbgStreamBufferReadUint16LE+0x1a>
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <sbgStreamBufferReadUint16LE+0x70>)
 8003058:	4a18      	ldr	r2, [pc, #96]	; (80030bc <sbgStreamBufferReadUint16LE+0x74>)
 800305a:	2179      	movs	r1, #121	; 0x79
 800305c:	4818      	ldr	r0, [pc, #96]	; (80030c0 <sbgStreamBufferReadUint16LE+0x78>)
 800305e:	f005 fef7 	bl	8008e50 <__assert_func>

	//
	// Test if we haven't already an error
	//
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7c1b      	ldrb	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d121      	bne.n	80030ae <sbgStreamBufferReadUint16LE+0x66>
	{
		//
		// Test if we can access this item
		//
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ffca 	bl	8003004 <sbgStreamBufferGetSpace>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d918      	bls.n	80030a8 <sbgStreamBufferReadUint16LE+0x60>
				return bytesValues[0];
			#else
				//
				// Read the each bytes
				//
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	60d1      	str	r1, [r2, #12]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	1c59      	adds	r1, r3, #1
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	60d1      	str	r1, [r2, #12]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	81fb      	strh	r3, [r7, #14]
				// Store data according to platform endianness
				//
				#if (SBG_CONFIG_BIG_ENDIAN == 1)
					return bytesValues[1] | (bytesValues[0] << 8);
				#else
					return bytesValues[0] | (bytesValues[1] << 8);
 8003096:	89bb      	ldrh	r3, [r7, #12]
 8003098:	b21a      	sxth	r2, r3
 800309a:	89fb      	ldrh	r3, [r7, #14]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	b21b      	sxth	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	e003      	b.n	80030b0 <sbgStreamBufferReadUint16LE+0x68>
		else
		{
			//
			// We have a buffer overflow so return 0
			//
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2208      	movs	r2, #8
 80030ac:	741a      	strb	r2, [r3, #16]
	}

	//
	// If we are here, it means we have an error so return 0
	//
	return 0;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	0800a6e0 	.word	0x0800a6e0
 80030bc:	0800ca44 	.word	0x0800ca44
 80030c0:	0800a724 	.word	0x0800a724

080030c4 <sbgStreamBufferReadUint32LE>:
 *
 * \param[in]	pHandle				Valid stream buffer handle that supports read operations.
 * \return							The read value or 0 if we have an error.
 */
SBG_INLINE uint32_t sbgStreamBufferReadUint32LE(SbgStreamBuffer *pHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	uint32_t bytesValues[4];

	assert(pHandle);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <sbgStreamBufferReadUint32LE+0x1c>
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <sbgStreamBufferReadUint32LE+0x90>)
 80030d4:	4a20      	ldr	r2, [pc, #128]	; (8003158 <sbgStreamBufferReadUint32LE+0x94>)
 80030d6:	f240 1189 	movw	r1, #393	; 0x189
 80030da:	4820      	ldr	r0, [pc, #128]	; (800315c <sbgStreamBufferReadUint32LE+0x98>)
 80030dc:	f005 feb8 	bl	8008e50 <__assert_func>

	//
	// Test if we haven't already an error
	//
	if (pHandle->errorCode == SBG_NO_ERROR)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7c1b      	ldrb	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d12f      	bne.n	8003148 <sbgStreamBufferReadUint32LE+0x84>
	{
		//
		// Test if we can access this item
		//
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff8b 	bl	8003004 <sbgStreamBufferGetSpace>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d926      	bls.n	8003142 <sbgStreamBufferReadUint32LE+0x7e>
				return bytesValues[0];
			#else
				//
				// Read the each bytes
				//
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	60d1      	str	r1, [r2, #12]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	60d1      	str	r1, [r2, #12]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	1c59      	adds	r1, r3, #1
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	60d1      	str	r1, [r2, #12]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	60d1      	str	r1, [r2, #12]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	617b      	str	r3, [r7, #20]
				// Store data according to platform endianness
				//
				#if (SBG_CONFIG_BIG_ENDIAN == 1)
					return bytesValues[3] | (bytesValues[2] << 8) | (bytesValues[1] << 16) | (bytesValues[0] << 24);
				#else
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	431a      	orrs	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	4313      	orrs	r3, r2
 8003140:	e003      	b.n	800314a <sbgStreamBufferReadUint32LE+0x86>
		else
		{
			//
			// We have a buffer overflow so return 0
			//
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2208      	movs	r2, #8
 8003146:	741a      	strb	r2, [r3, #16]
	}

	//
	// If we are here, it means we have an error so return 0
	//
	return 0;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	0800a6e0 	.word	0x0800a6e0
 8003158:	0800ca28 	.word	0x0800ca28
 800315c:	0800a724 	.word	0x0800a724

08003160 <sbgStreamBufferReadFloatLE>:
 *
 * \param[in]	pHandle				Valid stream buffer handle that supports read operations.
 * \return							The read value or 0 if we have an error.
 */
SBG_INLINE float sbgStreamBufferReadFloatLE(SbgStreamBuffer *pHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	FloatNint floatInt;

	assert(pHandle);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <sbgStreamBufferReadFloatLE+0x1c>
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <sbgStreamBufferReadFloatLE+0x58>)
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <sbgStreamBufferReadFloatLE+0x5c>)
 8003172:	f240 4139 	movw	r1, #1081	; 0x439
 8003176:	4812      	ldr	r0, [pc, #72]	; (80031c0 <sbgStreamBufferReadFloatLE+0x60>)
 8003178:	f005 fe6a 	bl	8008e50 <__assert_func>

	//
	// Test if we haven't already an error
	//
	if (pHandle->errorCode == SBG_NO_ERROR)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7c1b      	ldrb	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <sbgStreamBufferReadFloatLE+0x44>
	{
		//
		// Test if we can access this item
		//
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff3d 	bl	8003004 <sbgStreamBufferGetSpace>
 800318a:	4603      	mov	r3, r0
 800318c:	2b03      	cmp	r3, #3
 800318e:	d906      	bls.n	800319e <sbgStreamBufferReadFloatLE+0x3e>
		{
			//
			// Read the float as an uint32_t
			//
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff97 	bl	80030c4 <sbgStreamBufferReadUint32LE>
 8003196:	4603      	mov	r3, r0
 8003198:	60fb      	str	r3, [r7, #12]

			//
			// Return the float using an union to avoid compiler cast
			//
			return floatInt.valF;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	e004      	b.n	80031a8 <sbgStreamBufferReadFloatLE+0x48>
		else
		{
			//
			// We have a buffer overflow so return 0
			//
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2208      	movs	r2, #8
 80031a2:	741a      	strb	r2, [r3, #16]
	}

	//
	// If we are here, it means we have an error so return 0
	//
	return 0.0f;
 80031a4:	f04f 0300 	mov.w	r3, #0
}
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eeb0 0a67 	vmov.f32	s0, s15
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	0800a6e0 	.word	0x0800a6e0
 80031bc:	0800caac 	.word	0x0800caac
 80031c0:	0800a724 	.word	0x0800a724

080031c4 <sbgEComBinaryLogParseAirData>:
//----------------------------------------------------------------------//
//- Operations                                                         -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseAirData(SbgStreamBuffer *pInputStream, SbgLogAirData *pOutputData)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <sbgEComBinaryLogParseAirData+0x1c>
 80031d4:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <sbgEComBinaryLogParseAirData+0xd0>)
 80031d6:	4a30      	ldr	r2, [pc, #192]	; (8003298 <sbgEComBinaryLogParseAirData+0xd4>)
 80031d8:	2109      	movs	r1, #9
 80031da:	4830      	ldr	r0, [pc, #192]	; (800329c <sbgEComBinaryLogParseAirData+0xd8>)
 80031dc:	f005 fe38 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <sbgEComBinaryLogParseAirData+0x2e>
 80031e6:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <sbgEComBinaryLogParseAirData+0xdc>)
 80031e8:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <sbgEComBinaryLogParseAirData+0xd4>)
 80031ea:	210a      	movs	r1, #10
 80031ec:	482b      	ldr	r0, [pc, #172]	; (800329c <sbgEComBinaryLogParseAirData+0xd8>)
 80031ee:	f005 fe2f 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ff66 	bl	80030c4 <sbgStreamBufferReadUint32LE>
 80031f8:	4602      	mov	r2, r0
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	601a      	str	r2, [r3, #0]
	pOutputData->status			= sbgStreamBufferReadUint16LE(pInputStream);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ff22 	bl	8003048 <sbgStreamBufferReadUint16LE>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	809a      	strh	r2, [r3, #4]

	pOutputData->pressureAbs	= sbgStreamBufferReadFloatLE(pInputStream);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ffa7 	bl	8003160 <sbgStreamBufferReadFloatLE>
 8003212:	eef0 7a40 	vmov.f32	s15, s0
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->altitude		= sbgStreamBufferReadFloatLE(pInputStream);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff9f 	bl	8003160 <sbgStreamBufferReadFloatLE>
 8003222:	eef0 7a40 	vmov.f32	s15, s0
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	edc3 7a03 	vstr	s15, [r3, #12]

	//
	// The true airspeed fields have been added in version 2.0
	//
	if (sbgStreamBufferGetSpace(pInputStream) > 0)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fee9 	bl	8003004 <sbgStreamBufferGetSpace>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d018      	beq.n	800326a <sbgEComBinaryLogParseAirData+0xa6>
	{
		pOutputData->pressureDiff	= sbgStreamBufferReadFloatLE(pInputStream);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff91 	bl	8003160 <sbgStreamBufferReadFloatLE>
 800323e:	eef0 7a40 	vmov.f32	s15, s0
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	edc3 7a04 	vstr	s15, [r3, #16]
		pOutputData->trueAirspeed	= sbgStreamBufferReadFloatLE(pInputStream);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff89 	bl	8003160 <sbgStreamBufferReadFloatLE>
 800324e:	eef0 7a40 	vmov.f32	s15, s0
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	edc3 7a05 	vstr	s15, [r3, #20]
		pOutputData->airTemperature	= sbgStreamBufferReadFloatLE(pInputStream);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ff81 	bl	8003160 <sbgStreamBufferReadFloatLE>
 800325e:	eef0 7a40 	vmov.f32	s15, s0
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	edc3 7a06 	vstr	s15, [r3, #24]
 8003268:	e00b      	b.n	8003282 <sbgEComBinaryLogParseAirData+0xbe>
	}
	else
	{
		pOutputData->pressureDiff	= 0.0f;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
		pOutputData->trueAirspeed	= 0.0f;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	615a      	str	r2, [r3, #20]
		pOutputData->airTemperature = 0.0f;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
	}

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fe6c 	bl	8002f60 <sbgStreamBufferGetLastError>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	0800a75c 	.word	0x0800a75c
 8003298:	0800ca08 	.word	0x0800ca08
 800329c:	0800a76c 	.word	0x0800a76c
 80032a0:	0800a7a4 	.word	0x0800a7a4

080032a4 <sbgStreamBufferGetLastError>:
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <sbgStreamBufferGetLastError+0x1c>
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <sbgStreamBufferGetLastError+0x28>)
 80032b4:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <sbgStreamBufferGetLastError+0x2c>)
 80032b6:	f240 111d 	movw	r1, #285	; 0x11d
 80032ba:	4806      	ldr	r0, [pc, #24]	; (80032d4 <sbgStreamBufferGetLastError+0x30>)
 80032bc:	f005 fdc8 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7c1b      	ldrb	r3, [r3, #16]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	0800a7cc 	.word	0x0800a7cc
 80032d0:	0800cba0 	.word	0x0800cba0
 80032d4:	0800a7d4 	.word	0x0800a7d4

080032d8 <sbgStreamBufferGetSize>:
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <sbgStreamBufferGetSize+0x1c>
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <sbgStreamBufferGetSize+0x28>)
 80032e8:	4a06      	ldr	r2, [pc, #24]	; (8003304 <sbgStreamBufferGetSize+0x2c>)
 80032ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80032ee:	4806      	ldr	r0, [pc, #24]	; (8003308 <sbgStreamBufferGetSize+0x30>)
 80032f0:	f005 fdae 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	0800a7cc 	.word	0x0800a7cc
 8003304:	0800cb34 	.word	0x0800cb34
 8003308:	0800a7d4 	.word	0x0800a7d4

0800330c <sbgStreamBufferGetLength>:
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <sbgStreamBufferGetLength+0x1c>
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <sbgStreamBufferGetLength+0x30>)
 800331c:	4a08      	ldr	r2, [pc, #32]	; (8003340 <sbgStreamBufferGetLength+0x34>)
 800331e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003322:	4808      	ldr	r0, [pc, #32]	; (8003344 <sbgStreamBufferGetLength+0x38>)
 8003324:	f005 fd94 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	1ad3      	subs	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	0800a7cc 	.word	0x0800a7cc
 8003340:	0800cb4c 	.word	0x0800cb4c
 8003344:	0800a7d4 	.word	0x0800a7d4

08003348 <sbgStreamBufferGetSpace>:
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <sbgStreamBufferGetSpace+0x1c>
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <sbgStreamBufferGetSpace+0x38>)
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <sbgStreamBufferGetSpace+0x3c>)
 800335a:	f240 1167 	movw	r1, #359	; 0x167
 800335e:	480a      	ldr	r0, [pc, #40]	; (8003388 <sbgStreamBufferGetSpace+0x40>)
 8003360:	f005 fd76 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ffb7 	bl	80032d8 <sbgStreamBufferGetSize>
 800336a:	4604      	mov	r4, r0
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ffcd 	bl	800330c <sbgStreamBufferGetLength>
 8003372:	4603      	mov	r3, r0
 8003374:	1ae3      	subs	r3, r4, r3
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	bf00      	nop
 8003380:	0800a7cc 	.word	0x0800a7cc
 8003384:	0800cb1c 	.word	0x0800cb1c
 8003388:	0800a7d4 	.word	0x0800a7d4

0800338c <sbgStreamBufferReadUint16LE>:
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <sbgStreamBufferReadUint16LE+0x1a>
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <sbgStreamBufferReadUint16LE+0x70>)
 800339c:	4a18      	ldr	r2, [pc, #96]	; (8003400 <sbgStreamBufferReadUint16LE+0x74>)
 800339e:	2179      	movs	r1, #121	; 0x79
 80033a0:	4818      	ldr	r0, [pc, #96]	; (8003404 <sbgStreamBufferReadUint16LE+0x78>)
 80033a2:	f005 fd55 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7c1b      	ldrb	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d121      	bne.n	80033f2 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffca 	bl	8003348 <sbgStreamBufferGetSpace>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d918      	bls.n	80033ec <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60d1      	str	r1, [r2, #12]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	1c59      	adds	r1, r3, #1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	60d1      	str	r1, [r2, #12]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 80033da:	89bb      	ldrh	r3, [r7, #12]
 80033dc:	b21a      	sxth	r2, r3
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	4313      	orrs	r3, r2
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	e003      	b.n	80033f4 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2208      	movs	r2, #8
 80033f0:	741a      	strb	r2, [r3, #16]
	return 0;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	0800a7cc 	.word	0x0800a7cc
 8003400:	0800cb68 	.word	0x0800cb68
 8003404:	0800a810 	.word	0x0800a810

08003408 <sbgStreamBufferReadUint32LE>:
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <sbgStreamBufferReadUint32LE+0x1c>
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <sbgStreamBufferReadUint32LE+0x90>)
 8003418:	4a20      	ldr	r2, [pc, #128]	; (800349c <sbgStreamBufferReadUint32LE+0x94>)
 800341a:	f240 1189 	movw	r1, #393	; 0x189
 800341e:	4820      	ldr	r0, [pc, #128]	; (80034a0 <sbgStreamBufferReadUint32LE+0x98>)
 8003420:	f005 fd16 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7c1b      	ldrb	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d12f      	bne.n	800348c <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff8b 	bl	8003348 <sbgStreamBufferGetSpace>
 8003432:	4603      	mov	r3, r0
 8003434:	2b03      	cmp	r3, #3
 8003436:	d926      	bls.n	8003486 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	1c59      	adds	r1, r3, #1
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	60d1      	str	r1, [r2, #12]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	1c59      	adds	r1, r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	60d1      	str	r1, [r2, #12]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	1c59      	adds	r1, r3, #1
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	60d1      	str	r1, [r2, #12]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	60d1      	str	r1, [r2, #12]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	431a      	orrs	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	431a      	orrs	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	4313      	orrs	r3, r2
 8003484:	e003      	b.n	800348e <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	741a      	strb	r2, [r3, #16]
	return 0;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	0800a7cc 	.word	0x0800a7cc
 800349c:	0800cb00 	.word	0x0800cb00
 80034a0:	0800a810 	.word	0x0800a810

080034a4 <sbgStreamBufferReadFloatLE>:
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <sbgStreamBufferReadFloatLE+0x1c>
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <sbgStreamBufferReadFloatLE+0x58>)
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <sbgStreamBufferReadFloatLE+0x5c>)
 80034b6:	f240 4139 	movw	r1, #1081	; 0x439
 80034ba:	4812      	ldr	r0, [pc, #72]	; (8003504 <sbgStreamBufferReadFloatLE+0x60>)
 80034bc:	f005 fcc8 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7c1b      	ldrb	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff3d 	bl	8003348 <sbgStreamBufferGetSpace>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d906      	bls.n	80034e2 <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff97 	bl	8003408 <sbgStreamBufferReadUint32LE>
 80034da:	4603      	mov	r3, r0
 80034dc:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	e004      	b.n	80034ec <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2208      	movs	r2, #8
 80034e6:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 80034e8:	f04f 0300 	mov.w	r3, #0
}
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eeb0 0a67 	vmov.f32	s0, s15
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	0800a7cc 	.word	0x0800a7cc
 8003500:	0800cb84 	.word	0x0800cb84
 8003504:	0800a810 	.word	0x0800a810

08003508 <sbgEComBinaryLogParseDepth>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseDepth(SbgStreamBuffer *pInputStream, SbgLogDepth *pOutputData)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <sbgEComBinaryLogParseDepth+0x1c>
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <sbgEComBinaryLogParseDepth+0x78>)
 800351a:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <sbgEComBinaryLogParseDepth+0x7c>)
 800351c:	2109      	movs	r1, #9
 800351e:	481a      	ldr	r0, [pc, #104]	; (8003588 <sbgEComBinaryLogParseDepth+0x80>)
 8003520:	f005 fc96 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <sbgEComBinaryLogParseDepth+0x2e>
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <sbgEComBinaryLogParseDepth+0x84>)
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <sbgEComBinaryLogParseDepth+0x7c>)
 800352e:	210a      	movs	r1, #10
 8003530:	4815      	ldr	r0, [pc, #84]	; (8003588 <sbgEComBinaryLogParseDepth+0x80>)
 8003532:	f005 fc8d 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff66 	bl	8003408 <sbgStreamBufferReadUint32LE>
 800353c:	4602      	mov	r2, r0
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	601a      	str	r2, [r3, #0]
	pOutputData->status			= sbgStreamBufferReadUint16LE(pInputStream);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ff22 	bl	800338c <sbgStreamBufferReadUint16LE>
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	809a      	strh	r2, [r3, #4]

	pOutputData->pressureAbs	= sbgStreamBufferReadFloatLE(pInputStream);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ffa7 	bl	80034a4 <sbgStreamBufferReadFloatLE>
 8003556:	eef0 7a40 	vmov.f32	s15, s0
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->altitude		= sbgStreamBufferReadFloatLE(pInputStream);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff9f 	bl	80034a4 <sbgStreamBufferReadFloatLE>
 8003566:	eef0 7a40 	vmov.f32	s15, s0
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	edc3 7a03 	vstr	s15, [r3, #12]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fe97 	bl	80032a4 <sbgStreamBufferGetLastError>
 8003576:	4603      	mov	r3, r0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800a848 	.word	0x0800a848
 8003584:	0800cae4 	.word	0x0800cae4
 8003588:	0800a858 	.word	0x0800a858
 800358c:	0800a890 	.word	0x0800a890

08003590 <sbgStreamBufferGetLastError>:
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <sbgStreamBufferGetLastError+0x1c>
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <sbgStreamBufferGetLastError+0x28>)
 80035a0:	4a06      	ldr	r2, [pc, #24]	; (80035bc <sbgStreamBufferGetLastError+0x2c>)
 80035a2:	f240 111d 	movw	r1, #285	; 0x11d
 80035a6:	4806      	ldr	r0, [pc, #24]	; (80035c0 <sbgStreamBufferGetLastError+0x30>)
 80035a8:	f005 fc52 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7c1b      	ldrb	r3, [r3, #16]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	0800a8b8 	.word	0x0800a8b8
 80035bc:	0800cc7c 	.word	0x0800cc7c
 80035c0:	0800a8c0 	.word	0x0800a8c0

080035c4 <sbgStreamBufferGetSize>:
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <sbgStreamBufferGetSize+0x1c>
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <sbgStreamBufferGetSize+0x28>)
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <sbgStreamBufferGetSize+0x2c>)
 80035d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80035da:	4806      	ldr	r0, [pc, #24]	; (80035f4 <sbgStreamBufferGetSize+0x30>)
 80035dc:	f005 fc38 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0800a8b8 	.word	0x0800a8b8
 80035f0:	0800cc2c 	.word	0x0800cc2c
 80035f4:	0800a8c0 	.word	0x0800a8c0

080035f8 <sbgStreamBufferGetLength>:
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <sbgStreamBufferGetLength+0x1c>
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <sbgStreamBufferGetLength+0x30>)
 8003608:	4a08      	ldr	r2, [pc, #32]	; (800362c <sbgStreamBufferGetLength+0x34>)
 800360a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800360e:	4808      	ldr	r0, [pc, #32]	; (8003630 <sbgStreamBufferGetLength+0x38>)
 8003610:	f005 fc1e 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	1ad3      	subs	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	0800a8b8 	.word	0x0800a8b8
 800362c:	0800cc44 	.word	0x0800cc44
 8003630:	0800a8c0 	.word	0x0800a8c0

08003634 <sbgStreamBufferGetSpace>:
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <sbgStreamBufferGetSpace+0x1c>
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <sbgStreamBufferGetSpace+0x38>)
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <sbgStreamBufferGetSpace+0x3c>)
 8003646:	f240 1167 	movw	r1, #359	; 0x167
 800364a:	480a      	ldr	r0, [pc, #40]	; (8003674 <sbgStreamBufferGetSpace+0x40>)
 800364c:	f005 fc00 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffb7 	bl	80035c4 <sbgStreamBufferGetSize>
 8003656:	4604      	mov	r4, r0
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ffcd 	bl	80035f8 <sbgStreamBufferGetLength>
 800365e:	4603      	mov	r3, r0
 8003660:	1ae3      	subs	r3, r4, r3
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bd90      	pop	{r4, r7, pc}
 800366a:	bf00      	nop
 800366c:	0800a8b8 	.word	0x0800a8b8
 8003670:	0800cc14 	.word	0x0800cc14
 8003674:	0800a8c0 	.word	0x0800a8c0

08003678 <sbgStreamBufferReadUint8>:
 *
 * \param[in]	pHandle				Valid stream buffer handle that supports read operations.
 * \return							The read value or 0 if we have an error.
 */
SBG_INLINE uint8_t sbgStreamBufferReadUint8(SbgStreamBuffer *pHandle)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <sbgStreamBufferReadUint8+0x1c>
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <sbgStreamBufferReadUint8+0x50>)
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <sbgStreamBufferReadUint8+0x54>)
 800368a:	f240 2119 	movw	r1, #537	; 0x219
 800368e:	4810      	ldr	r0, [pc, #64]	; (80036d0 <sbgStreamBufferReadUint8+0x58>)
 8003690:	f005 fbde 	bl	8008e50 <__assert_func>

	//
	// Test if we haven't already an error
	//
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7c1b      	ldrb	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <sbgStreamBufferReadUint8+0x44>
	{
		//
		// Test if we can access this item
		//
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint8_t))
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ffc9 	bl	8003634 <sbgStreamBufferGetSpace>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <sbgStreamBufferReadUint8+0x3e>
		{
			//
			// Read the byte
			//
			return *((uint8_t*)(pHandle->pCurrentPtr++));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	1c59      	adds	r1, r3, #1
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	60d1      	str	r1, [r2, #12]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	e003      	b.n	80036be <sbgStreamBufferReadUint8+0x46>
		else
		{
			//
			// We have a buffer overflow
			//
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2208      	movs	r2, #8
 80036ba:	741a      	strb	r2, [r3, #16]
	}

	//
	// If we are here, it means we have an error so return 0
	//
	return 0;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	0800a8b8 	.word	0x0800a8b8
 80036cc:	0800cbf8 	.word	0x0800cbf8
 80036d0:	0800a8c0 	.word	0x0800a8c0

080036d4 <sbgStreamBufferReadBuffer>:
 * \param[out]	pBuffer				Allocated buffer used to hold read data.
 * \param[in]	numBytesToRead		Number of bytes to read from the stream buffer and to store in pBuffer.
 * \return							SBG_NO_ERROR if the data has been read.
 */
SBG_INLINE SbgErrorCode sbgStreamBufferReadBuffer(SbgStreamBuffer *pHandle, void *pBuffer, size_t numBytesToRead)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
	assert(pHandle);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <sbgStreamBufferReadBuffer+0x20>
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <sbgStreamBufferReadBuffer+0x80>)
 80036e8:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <sbgStreamBufferReadBuffer+0x84>)
 80036ea:	f240 2172 	movw	r1, #626	; 0x272
 80036ee:	481b      	ldr	r0, [pc, #108]	; (800375c <sbgStreamBufferReadBuffer+0x88>)
 80036f0:	f005 fbae 	bl	8008e50 <__assert_func>
	assert((pBuffer) || (numBytesToRead == 0));
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <sbgStreamBufferReadBuffer+0x3a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <sbgStreamBufferReadBuffer+0x3a>
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <sbgStreamBufferReadBuffer+0x8c>)
 8003702:	4a15      	ldr	r2, [pc, #84]	; (8003758 <sbgStreamBufferReadBuffer+0x84>)
 8003704:	f240 2173 	movw	r1, #627	; 0x273
 8003708:	4814      	ldr	r0, [pc, #80]	; (800375c <sbgStreamBufferReadBuffer+0x88>)
 800370a:	f005 fba1 	bl	8008e50 <__assert_func>

	//
	// Test if we haven't already an error
	//
	if (pHandle->errorCode == SBG_NO_ERROR)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	7c1b      	ldrb	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d117      	bne.n	8003746 <sbgStreamBufferReadBuffer+0x72>
	{
		//
		// Test if enough bytes in stream
		//
		if (sbgStreamBufferGetSpace(pHandle) >= numBytesToRead)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff8c 	bl	8003634 <sbgStreamBufferGetSpace>
 800371c:	4602      	mov	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4293      	cmp	r3, r2
 8003722:	d80d      	bhi.n	8003740 <sbgStreamBufferReadBuffer+0x6c>
		{
			//
			// Copy from the stream buffer to the output buffer
			//
			memcpy(pBuffer, pHandle->pCurrentPtr, numBytesToRead);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4619      	mov	r1, r3
 800372c:	68b8      	ldr	r0, [r7, #8]
 800372e:	f005 fe19 	bl	8009364 <memcpy>

			//
			// Update the current pointer
			//
			pHandle->pCurrentPtr += numBytesToRead;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	441a      	add	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e002      	b.n	8003746 <sbgStreamBufferReadBuffer+0x72>
		else
		{
			//
			// Not enough data in stream
			//
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2208      	movs	r2, #8
 8003744:	741a      	strb	r2, [r3, #16]
		}
	}

	return pHandle->errorCode;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	7c1b      	ldrb	r3, [r3, #16]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	0800a8b8 	.word	0x0800a8b8
 8003758:	0800cc60 	.word	0x0800cc60
 800375c:	0800a8c0 	.word	0x0800a8c0
 8003760:	0800a8fc 	.word	0x0800a8fc

08003764 <sbgStreamBufferReadUint32LE>:
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <sbgStreamBufferReadUint32LE+0x1c>
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <sbgStreamBufferReadUint32LE+0x90>)
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <sbgStreamBufferReadUint32LE+0x94>)
 8003776:	f240 1189 	movw	r1, #393	; 0x189
 800377a:	4820      	ldr	r0, [pc, #128]	; (80037fc <sbgStreamBufferReadUint32LE+0x98>)
 800377c:	f005 fb68 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7c1b      	ldrb	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d12f      	bne.n	80037e8 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff53 	bl	8003634 <sbgStreamBufferGetSpace>
 800378e:	4603      	mov	r3, r0
 8003790:	2b03      	cmp	r3, #3
 8003792:	d926      	bls.n	80037e2 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	1c59      	adds	r1, r3, #1
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	60d1      	str	r1, [r2, #12]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	60d1      	str	r1, [r2, #12]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	1c59      	adds	r1, r3, #1
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	60d1      	str	r1, [r2, #12]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	1c59      	adds	r1, r3, #1
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	60d1      	str	r1, [r2, #12]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	431a      	orrs	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	4313      	orrs	r3, r2
 80037e0:	e003      	b.n	80037ea <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2208      	movs	r2, #8
 80037e6:	741a      	strb	r2, [r3, #16]
	return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	0800a8b8 	.word	0x0800a8b8
 80037f8:	0800cbdc 	.word	0x0800cbdc
 80037fc:	0800a944 	.word	0x0800a944

08003800 <sbgEComBinaryLogParseDiagData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseDiagData(SbgStreamBuffer *pInputStream, SbgLogDiagData *pOutputData)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <sbgEComBinaryLogParseDiagData+0x1c>
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <sbgEComBinaryLogParseDiagData+0x84>)
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <sbgEComBinaryLogParseDiagData+0x88>)
 8003814:	210e      	movs	r1, #14
 8003816:	481d      	ldr	r0, [pc, #116]	; (800388c <sbgEComBinaryLogParseDiagData+0x8c>)
 8003818:	f005 fb1a 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <sbgEComBinaryLogParseDiagData+0x2e>
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <sbgEComBinaryLogParseDiagData+0x90>)
 8003824:	4a18      	ldr	r2, [pc, #96]	; (8003888 <sbgEComBinaryLogParseDiagData+0x88>)
 8003826:	210f      	movs	r1, #15
 8003828:	4818      	ldr	r0, [pc, #96]	; (800388c <sbgEComBinaryLogParseDiagData+0x8c>)
 800382a:	f005 fb11 	bl	8008e50 <__assert_func>

	pOutputData->timestamp		= sbgStreamBufferReadUint32LE(pInputStream);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ff98 	bl	8003764 <sbgStreamBufferReadUint32LE>
 8003834:	4602      	mov	r2, r0
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	601a      	str	r2, [r3, #0]
	pOutputData->type			= (SbgDebugLogType)sbgStreamBufferReadUint8(pInputStream);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ff1c 	bl	8003678 <sbgStreamBufferReadUint8>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	711a      	strb	r2, [r3, #4]
	pOutputData->errorCode		= (SbgErrorCode)sbgStreamBufferReadUint8(pInputStream);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff15 	bl	8003678 <sbgStreamBufferReadUint8>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	715a      	strb	r2, [r3, #5]

	sbgStreamBufferReadBuffer(pInputStream, pOutputData->string, sbgStreamBufferGetSpace(pInputStream));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	1d9c      	adds	r4, r3, #6
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff feea 	bl	8003634 <sbgStreamBufferGetSpace>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	4621      	mov	r1, r4
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff34 	bl	80036d4 <sbgStreamBufferReadBuffer>
	pOutputData->string[sizeof(pOutputData->string) - 1] = '\0';
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2ff5 	strb.w	r2, [r3, #4085]	; 0xff5

	return sbgStreamBufferGetLastError(pInputStream);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff fe8b 	bl	8003590 <sbgStreamBufferGetLastError>
 800387a:	4603      	mov	r3, r0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	0800a97c 	.word	0x0800a97c
 8003888:	0800cbbc 	.word	0x0800cbbc
 800388c:	0800a98c 	.word	0x0800a98c
 8003890:	0800a9c4 	.word	0x0800a9c4

08003894 <sbgStreamBufferGetLastError>:
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <sbgStreamBufferGetLastError+0x1c>
 80038a2:	4b06      	ldr	r3, [pc, #24]	; (80038bc <sbgStreamBufferGetLastError+0x28>)
 80038a4:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <sbgStreamBufferGetLastError+0x2c>)
 80038a6:	f240 111d 	movw	r1, #285	; 0x11d
 80038aa:	4806      	ldr	r0, [pc, #24]	; (80038c4 <sbgStreamBufferGetLastError+0x30>)
 80038ac:	f005 fad0 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7c1b      	ldrb	r3, [r3, #16]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	0800a9ec 	.word	0x0800a9ec
 80038c0:	0800cd58 	.word	0x0800cd58
 80038c4:	0800a9f4 	.word	0x0800a9f4

080038c8 <sbgStreamBufferGetSize>:
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <sbgStreamBufferGetSize+0x1c>
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <sbgStreamBufferGetSize+0x28>)
 80038d8:	4a06      	ldr	r2, [pc, #24]	; (80038f4 <sbgStreamBufferGetSize+0x2c>)
 80038da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80038de:	4806      	ldr	r0, [pc, #24]	; (80038f8 <sbgStreamBufferGetSize+0x30>)
 80038e0:	f005 fab6 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	0800a9ec 	.word	0x0800a9ec
 80038f4:	0800ccec 	.word	0x0800ccec
 80038f8:	0800a9f4 	.word	0x0800a9f4

080038fc <sbgStreamBufferGetLength>:
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <sbgStreamBufferGetLength+0x1c>
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <sbgStreamBufferGetLength+0x30>)
 800390c:	4a08      	ldr	r2, [pc, #32]	; (8003930 <sbgStreamBufferGetLength+0x34>)
 800390e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003912:	4808      	ldr	r0, [pc, #32]	; (8003934 <sbgStreamBufferGetLength+0x38>)
 8003914:	f005 fa9c 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	461a      	mov	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	1ad3      	subs	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	0800a9ec 	.word	0x0800a9ec
 8003930:	0800cd04 	.word	0x0800cd04
 8003934:	0800a9f4 	.word	0x0800a9f4

08003938 <sbgStreamBufferGetSpace>:
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <sbgStreamBufferGetSpace+0x1c>
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <sbgStreamBufferGetSpace+0x38>)
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <sbgStreamBufferGetSpace+0x3c>)
 800394a:	f240 1167 	movw	r1, #359	; 0x167
 800394e:	480a      	ldr	r0, [pc, #40]	; (8003978 <sbgStreamBufferGetSpace+0x40>)
 8003950:	f005 fa7e 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ffb7 	bl	80038c8 <sbgStreamBufferGetSize>
 800395a:	4604      	mov	r4, r0
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ffcd 	bl	80038fc <sbgStreamBufferGetLength>
 8003962:	4603      	mov	r3, r0
 8003964:	1ae3      	subs	r3, r4, r3
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bd90      	pop	{r4, r7, pc}
 800396e:	bf00      	nop
 8003970:	0800a9ec 	.word	0x0800a9ec
 8003974:	0800ccd4 	.word	0x0800ccd4
 8003978:	0800a9f4 	.word	0x0800a9f4

0800397c <sbgStreamBufferReadUint16LE>:
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <sbgStreamBufferReadUint16LE+0x1a>
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <sbgStreamBufferReadUint16LE+0x70>)
 800398c:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <sbgStreamBufferReadUint16LE+0x74>)
 800398e:	2179      	movs	r1, #121	; 0x79
 8003990:	4818      	ldr	r0, [pc, #96]	; (80039f4 <sbgStreamBufferReadUint16LE+0x78>)
 8003992:	f005 fa5d 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7c1b      	ldrb	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d121      	bne.n	80039e2 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ffca 	bl	8003938 <sbgStreamBufferGetSpace>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d918      	bls.n	80039dc <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	60d1      	str	r1, [r2, #12]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	60d1      	str	r1, [r2, #12]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 80039ca:	89bb      	ldrh	r3, [r7, #12]
 80039cc:	b21a      	sxth	r2, r3
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b21b      	sxth	r3, r3
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	b29b      	uxth	r3, r3
 80039da:	e003      	b.n	80039e4 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2208      	movs	r2, #8
 80039e0:	741a      	strb	r2, [r3, #16]
	return 0;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	0800a9ec 	.word	0x0800a9ec
 80039f0:	0800cd20 	.word	0x0800cd20
 80039f4:	0800aa30 	.word	0x0800aa30

080039f8 <sbgStreamBufferReadUint32LE>:
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <sbgStreamBufferReadUint32LE+0x1c>
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <sbgStreamBufferReadUint32LE+0x90>)
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <sbgStreamBufferReadUint32LE+0x94>)
 8003a0a:	f240 1189 	movw	r1, #393	; 0x189
 8003a0e:	4820      	ldr	r0, [pc, #128]	; (8003a90 <sbgStreamBufferReadUint32LE+0x98>)
 8003a10:	f005 fa1e 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7c1b      	ldrb	r3, [r3, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d12f      	bne.n	8003a7c <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ff8b 	bl	8003938 <sbgStreamBufferGetSpace>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d926      	bls.n	8003a76 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	1c59      	adds	r1, r3, #1
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	60d1      	str	r1, [r2, #12]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	60d1      	str	r1, [r2, #12]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	60d1      	str	r1, [r2, #12]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	60d1      	str	r1, [r2, #12]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	431a      	orrs	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	4313      	orrs	r3, r2
 8003a74:	e003      	b.n	8003a7e <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	741a      	strb	r2, [r3, #16]
	return 0;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	0800a9ec 	.word	0x0800a9ec
 8003a8c:	0800ccb8 	.word	0x0800ccb8
 8003a90:	0800aa30 	.word	0x0800aa30

08003a94 <sbgStreamBufferReadFloatLE>:
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <sbgStreamBufferReadFloatLE+0x1c>
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <sbgStreamBufferReadFloatLE+0x58>)
 8003aa4:	4a12      	ldr	r2, [pc, #72]	; (8003af0 <sbgStreamBufferReadFloatLE+0x5c>)
 8003aa6:	f240 4139 	movw	r1, #1081	; 0x439
 8003aaa:	4812      	ldr	r0, [pc, #72]	; (8003af4 <sbgStreamBufferReadFloatLE+0x60>)
 8003aac:	f005 f9d0 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7c1b      	ldrb	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10f      	bne.n	8003ad8 <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff3d 	bl	8003938 <sbgStreamBufferGetSpace>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d906      	bls.n	8003ad2 <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff97 	bl	80039f8 <sbgStreamBufferReadUint32LE>
 8003aca:	4603      	mov	r3, r0
 8003acc:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	e004      	b.n	8003adc <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 8003ad8:	f04f 0300 	mov.w	r3, #0
}
 8003adc:	ee07 3a90 	vmov	s15, r3
 8003ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	0800a9ec 	.word	0x0800a9ec
 8003af0:	0800cd3c 	.word	0x0800cd3c
 8003af4:	0800aa30 	.word	0x0800aa30

08003af8 <sbgEComBinaryLogParseDvlData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseDvlData(SbgStreamBuffer *pInputStream, SbgLogDvlData *pOutputData)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <sbgEComBinaryLogParseDvlData+0x1c>
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <sbgEComBinaryLogParseDvlData+0xb8>)
 8003b0a:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <sbgEComBinaryLogParseDvlData+0xbc>)
 8003b0c:	2109      	movs	r1, #9
 8003b0e:	482a      	ldr	r0, [pc, #168]	; (8003bb8 <sbgEComBinaryLogParseDvlData+0xc0>)
 8003b10:	f005 f99e 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <sbgEComBinaryLogParseDvlData+0x2e>
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <sbgEComBinaryLogParseDvlData+0xc4>)
 8003b1c:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <sbgEComBinaryLogParseDvlData+0xbc>)
 8003b1e:	210a      	movs	r1, #10
 8003b20:	4825      	ldr	r0, [pc, #148]	; (8003bb8 <sbgEComBinaryLogParseDvlData+0xc0>)
 8003b22:	f005 f995 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff ff66 	bl	80039f8 <sbgStreamBufferReadUint32LE>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint16LE(pInputStream);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ff22 	bl	800397c <sbgStreamBufferReadUint16LE>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	809a      	strh	r2, [r3, #4]

	pOutputData->velocity[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ffa7 	bl	8003a94 <sbgStreamBufferReadFloatLE>
 8003b46:	eef0 7a40 	vmov.f32	s15, s0
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->velocity[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff9f 	bl	8003a94 <sbgStreamBufferReadFloatLE>
 8003b56:	eef0 7a40 	vmov.f32	s15, s0
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->velocity[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ff97 	bl	8003a94 <sbgStreamBufferReadFloatLE>
 8003b66:	eef0 7a40 	vmov.f32	s15, s0
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	edc3 7a04 	vstr	s15, [r3, #16]

	pOutputData->velocityQuality[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff8f 	bl	8003a94 <sbgStreamBufferReadFloatLE>
 8003b76:	eef0 7a40 	vmov.f32	s15, s0
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->velocityQuality[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff87 	bl	8003a94 <sbgStreamBufferReadFloatLE>
 8003b86:	eef0 7a40 	vmov.f32	s15, s0
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	edc3 7a06 	vstr	s15, [r3, #24]
	pOutputData->velocityQuality[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff7f 	bl	8003a94 <sbgStreamBufferReadFloatLE>
 8003b96:	eef0 7a40 	vmov.f32	s15, s0
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	edc3 7a07 	vstr	s15, [r3, #28]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fe77 	bl	8003894 <sbgStreamBufferGetLastError>
 8003ba6:	4603      	mov	r3, r0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	0800aa68 	.word	0x0800aa68
 8003bb4:	0800cc98 	.word	0x0800cc98
 8003bb8:	0800aa78 	.word	0x0800aa78
 8003bbc:	0800aaac 	.word	0x0800aaac

08003bc0 <sbgStreamBufferGetLastError>:
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <sbgStreamBufferGetLastError+0x1c>
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <sbgStreamBufferGetLastError+0x28>)
 8003bd0:	4a06      	ldr	r2, [pc, #24]	; (8003bec <sbgStreamBufferGetLastError+0x2c>)
 8003bd2:	f240 111d 	movw	r1, #285	; 0x11d
 8003bd6:	4806      	ldr	r0, [pc, #24]	; (8003bf0 <sbgStreamBufferGetLastError+0x30>)
 8003bd8:	f005 f93a 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7c1b      	ldrb	r3, [r3, #16]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	0800aad4 	.word	0x0800aad4
 8003bec:	0800ce1c 	.word	0x0800ce1c
 8003bf0:	0800aadc 	.word	0x0800aadc

08003bf4 <sbgStreamBufferGetSize>:
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <sbgStreamBufferGetSize+0x1c>
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <sbgStreamBufferGetSize+0x28>)
 8003c04:	4a06      	ldr	r2, [pc, #24]	; (8003c20 <sbgStreamBufferGetSize+0x2c>)
 8003c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c0a:	4806      	ldr	r0, [pc, #24]	; (8003c24 <sbgStreamBufferGetSize+0x30>)
 8003c0c:	f005 f920 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	0800aad4 	.word	0x0800aad4
 8003c20:	0800cdcc 	.word	0x0800cdcc
 8003c24:	0800aadc 	.word	0x0800aadc

08003c28 <sbgStreamBufferGetLength>:
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <sbgStreamBufferGetLength+0x1c>
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <sbgStreamBufferGetLength+0x30>)
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <sbgStreamBufferGetLength+0x34>)
 8003c3a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003c3e:	4808      	ldr	r0, [pc, #32]	; (8003c60 <sbgStreamBufferGetLength+0x38>)
 8003c40:	f005 f906 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	1ad3      	subs	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	0800aad4 	.word	0x0800aad4
 8003c5c:	0800cde4 	.word	0x0800cde4
 8003c60:	0800aadc 	.word	0x0800aadc

08003c64 <sbgStreamBufferGetSpace>:
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <sbgStreamBufferGetSpace+0x1c>
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <sbgStreamBufferGetSpace+0x38>)
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <sbgStreamBufferGetSpace+0x3c>)
 8003c76:	f240 1167 	movw	r1, #359	; 0x167
 8003c7a:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <sbgStreamBufferGetSpace+0x40>)
 8003c7c:	f005 f8e8 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ffb7 	bl	8003bf4 <sbgStreamBufferGetSize>
 8003c86:	4604      	mov	r4, r0
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ffcd 	bl	8003c28 <sbgStreamBufferGetLength>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	1ae3      	subs	r3, r4, r3
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd90      	pop	{r4, r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	0800aad4 	.word	0x0800aad4
 8003ca0:	0800cdb4 	.word	0x0800cdb4
 8003ca4:	0800aadc 	.word	0x0800aadc

08003ca8 <sbgStreamBufferReadUint32LE>:
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <sbgStreamBufferReadUint32LE+0x1c>
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <sbgStreamBufferReadUint32LE+0x90>)
 8003cb8:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <sbgStreamBufferReadUint32LE+0x94>)
 8003cba:	f240 1189 	movw	r1, #393	; 0x189
 8003cbe:	4820      	ldr	r0, [pc, #128]	; (8003d40 <sbgStreamBufferReadUint32LE+0x98>)
 8003cc0:	f005 f8c6 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7c1b      	ldrb	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d12f      	bne.n	8003d2c <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ffc9 	bl	8003c64 <sbgStreamBufferGetSpace>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d926      	bls.n	8003d26 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	1c59      	adds	r1, r3, #1
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	60d1      	str	r1, [r2, #12]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	1c59      	adds	r1, r3, #1
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	60d1      	str	r1, [r2, #12]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	1c59      	adds	r1, r3, #1
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	60d1      	str	r1, [r2, #12]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	60d1      	str	r1, [r2, #12]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	431a      	orrs	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	4313      	orrs	r3, r2
 8003d24:	e003      	b.n	8003d2e <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	741a      	strb	r2, [r3, #16]
	return 0;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	0800aad4 	.word	0x0800aad4
 8003d3c:	0800ce00 	.word	0x0800ce00
 8003d40:	0800ab18 	.word	0x0800ab18

08003d44 <sbgStreamBufferReadUint64LE>:
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <sbgStreamBufferReadUint64LE+0x1e>
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <sbgStreamBufferReadUint64LE+0x94>)
 8003d56:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <sbgStreamBufferReadUint64LE+0x98>)
 8003d58:	f240 31c7 	movw	r1, #967	; 0x3c7
 8003d5c:	4820      	ldr	r0, [pc, #128]	; (8003de0 <sbgStreamBufferReadUint64LE+0x9c>)
 8003d5e:	f005 f877 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7c1b      	ldrb	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d129      	bne.n	8003dbe <sbgStreamBufferReadUint64LE+0x7a>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint64_t))
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff7a 	bl	8003c64 <sbgStreamBufferGetSpace>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b07      	cmp	r3, #7
 8003d74:	d920      	bls.n	8003db8 <sbgStreamBufferReadUint64LE+0x74>
				lowPart = sbgStreamBufferReadUint32LE(pHandle);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff ff96 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2200      	movs	r2, #0
 8003d80:	469a      	mov	sl, r3
 8003d82:	4693      	mov	fp, r2
 8003d84:	e9c7 ab04 	strd	sl, fp, [r7, #16]
				highPart = sbgStreamBufferReadUint32LE(pHandle);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff8d 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2200      	movs	r2, #0
 8003d92:	4698      	mov	r8, r3
 8003d94:	4691      	mov	r9, r2
 8003d96:	e9c7 8902 	strd	r8, r9, [r7, #8]
					return lowPart | (highPart << 32);
 8003d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	0003      	movs	r3, r0
 8003da8:	2200      	movs	r2, #0
 8003daa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dae:	ea42 0400 	orr.w	r4, r2, r0
 8003db2:	ea43 0501 	orr.w	r5, r3, r1
 8003db6:	e006      	b.n	8003dc6 <sbgStreamBufferReadUint64LE+0x82>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2208      	movs	r2, #8
 8003dbc:	741a      	strb	r2, [r3, #16]
	return 0ull;
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	f04f 0500 	mov.w	r5, #0
}
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd6:	bf00      	nop
 8003dd8:	0800aad4 	.word	0x0800aad4
 8003ddc:	0800ce98 	.word	0x0800ce98
 8003de0:	0800ab18 	.word	0x0800ab18

08003de4 <sbgStreamBufferReadFloatLE>:
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <sbgStreamBufferReadFloatLE+0x1c>
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <sbgStreamBufferReadFloatLE+0x58>)
 8003df4:	4a12      	ldr	r2, [pc, #72]	; (8003e40 <sbgStreamBufferReadFloatLE+0x5c>)
 8003df6:	f240 4139 	movw	r1, #1081	; 0x439
 8003dfa:	4812      	ldr	r0, [pc, #72]	; (8003e44 <sbgStreamBufferReadFloatLE+0x60>)
 8003dfc:	f005 f828 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7c1b      	ldrb	r3, [r3, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10f      	bne.n	8003e28 <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff2b 	bl	8003c64 <sbgStreamBufferGetSpace>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d906      	bls.n	8003e22 <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff ff47 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	e004      	b.n	8003e2c <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2208      	movs	r2, #8
 8003e26:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 8003e28:	f04f 0300 	mov.w	r3, #0
}
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eeb0 0a67 	vmov.f32	s0, s15
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	0800aad4 	.word	0x0800aad4
 8003e40:	0800cd98 	.word	0x0800cd98
 8003e44:	0800ab18 	.word	0x0800ab18

08003e48 <sbgStreamBufferReadDoubleLE>:
 *
 * \param[in]	pHandle				Valid stream buffer handle that supports read operations.
 * \return							The read value or 0 if we have an error.
 */
SBG_INLINE double sbgStreamBufferReadDoubleLE(SbgStreamBuffer *pHandle)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	DoubleNint doubleInt;

	assert(pHandle);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <sbgStreamBufferReadDoubleLE+0x1c>
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <sbgStreamBufferReadDoubleLE+0x5c>)
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <sbgStreamBufferReadDoubleLE+0x60>)
 8003e5a:	f44f 618d 	mov.w	r1, #1128	; 0x468
 8003e5e:	4813      	ldr	r0, [pc, #76]	; (8003eac <sbgStreamBufferReadDoubleLE+0x64>)
 8003e60:	f004 fff6 	bl	8008e50 <__assert_func>

	//
	// Test if we haven't already an error
	//
	if (pHandle->errorCode == SBG_NO_ERROR)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7c1b      	ldrb	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d112      	bne.n	8003e92 <sbgStreamBufferReadDoubleLE+0x4a>
	{
		//
		// Test if we can access this item
		//
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(double))
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fef9 	bl	8003c64 <sbgStreamBufferGetSpace>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	d909      	bls.n	8003e8c <sbgStreamBufferReadDoubleLE+0x44>
		{
			//
			// Read the float as an uint64_t
			//
			doubleInt.valU = sbgStreamBufferReadUint64LE(pHandle);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff63 	bl	8003d44 <sbgStreamBufferReadUint64LE>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	e9c7 2302 	strd	r2, r3, [r7, #8]

			//
			// Return the double using an union to avoid compiler cast
			//
			return doubleInt.valF;
 8003e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e8a:	e006      	b.n	8003e9a <sbgStreamBufferReadDoubleLE+0x52>
		else
		{
			//
			// We have a buffer overflow so return 0
			//
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2208      	movs	r2, #8
 8003e90:	741a      	strb	r2, [r3, #16]
	}

	//
	// If we are here, it means we have an error so return 0
	//
	return 0.0;
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
}
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	0800aad4 	.word	0x0800aad4
 8003ea8:	0800ce7c 	.word	0x0800ce7c
 8003eac:	0800ab18 	.word	0x0800ab18

08003eb0 <sbgEComBinaryLogParseEkfEulerData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseEkfEulerData(SbgStreamBuffer *pInputStream, SbgLogEkfEulerData *pOutputData)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <sbgEComBinaryLogParseEkfEulerData+0x1c>
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <sbgEComBinaryLogParseEkfEulerData+0xb8>)
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <sbgEComBinaryLogParseEkfEulerData+0xbc>)
 8003ec4:	2109      	movs	r1, #9
 8003ec6:	482a      	ldr	r0, [pc, #168]	; (8003f70 <sbgEComBinaryLogParseEkfEulerData+0xc0>)
 8003ec8:	f004 ffc2 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <sbgEComBinaryLogParseEkfEulerData+0x2e>
 8003ed2:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <sbgEComBinaryLogParseEkfEulerData+0xc4>)
 8003ed4:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <sbgEComBinaryLogParseEkfEulerData+0xbc>)
 8003ed6:	210a      	movs	r1, #10
 8003ed8:	4825      	ldr	r0, [pc, #148]	; (8003f70 <sbgEComBinaryLogParseEkfEulerData+0xc0>)
 8003eda:	f004 ffb9 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fee2 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	601a      	str	r2, [r3, #0]

	pOutputData->euler[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ff7a 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003ef0:	eef0 7a40 	vmov.f32	s15, s0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	edc3 7a01 	vstr	s15, [r3, #4]
	pOutputData->euler[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ff72 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003f00:	eef0 7a40 	vmov.f32	s15, s0
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->euler[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff6a 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003f10:	eef0 7a40 	vmov.f32	s15, s0
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	edc3 7a03 	vstr	s15, [r3, #12]

	pOutputData->eulerStdDev[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ff62 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003f20:	eef0 7a40 	vmov.f32	s15, s0
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	edc3 7a04 	vstr	s15, [r3, #16]
	pOutputData->eulerStdDev[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ff5a 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003f30:	eef0 7a40 	vmov.f32	s15, s0
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->eulerStdDev[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff52 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003f40:	eef0 7a40 	vmov.f32	s15, s0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	edc3 7a06 	vstr	s15, [r3, #24]

	pOutputData->status			= sbgStreamBufferReadUint32LE(pInputStream);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff feac 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8003f50:	4602      	mov	r2, r0
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	61da      	str	r2, [r3, #28]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fe32 	bl	8003bc0 <sbgStreamBufferGetLastError>
 8003f5c:	4603      	mov	r3, r0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	0800ab50 	.word	0x0800ab50
 8003f6c:	0800cd74 	.word	0x0800cd74
 8003f70:	0800ab60 	.word	0x0800ab60
 8003f74:	0800ab94 	.word	0x0800ab94

08003f78 <sbgEComBinaryLogParseEkfQuatData>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseEkfQuatData(SbgStreamBuffer *pInputStream, SbgLogEkfQuatData *pOutputData)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <sbgEComBinaryLogParseEkfQuatData+0x1c>
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <sbgEComBinaryLogParseEkfQuatData+0xc8>)
 8003f8a:	4a2e      	ldr	r2, [pc, #184]	; (8004044 <sbgEComBinaryLogParseEkfQuatData+0xcc>)
 8003f8c:	213d      	movs	r1, #61	; 0x3d
 8003f8e:	482e      	ldr	r0, [pc, #184]	; (8004048 <sbgEComBinaryLogParseEkfQuatData+0xd0>)
 8003f90:	f004 ff5e 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <sbgEComBinaryLogParseEkfQuatData+0x2e>
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <sbgEComBinaryLogParseEkfQuatData+0xd4>)
 8003f9c:	4a29      	ldr	r2, [pc, #164]	; (8004044 <sbgEComBinaryLogParseEkfQuatData+0xcc>)
 8003f9e:	213e      	movs	r1, #62	; 0x3e
 8003fa0:	4829      	ldr	r0, [pc, #164]	; (8004048 <sbgEComBinaryLogParseEkfQuatData+0xd0>)
 8003fa2:	f004 ff55 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fe7e 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8003fac:	4602      	mov	r2, r0
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	601a      	str	r2, [r3, #0]

	pOutputData->quaternion[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ff16 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003fb8:	eef0 7a40 	vmov.f32	s15, s0
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	edc3 7a01 	vstr	s15, [r3, #4]
	pOutputData->quaternion[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff0e 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003fc8:	eef0 7a40 	vmov.f32	s15, s0
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->quaternion[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff06 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003fd8:	eef0 7a40 	vmov.f32	s15, s0
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->quaternion[3]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fefe 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003fe8:	eef0 7a40 	vmov.f32	s15, s0
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	edc3 7a04 	vstr	s15, [r3, #16]

	pOutputData->eulerStdDev[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fef6 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8003ff8:	eef0 7a40 	vmov.f32	s15, s0
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->eulerStdDev[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff feee 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8004008:	eef0 7a40 	vmov.f32	s15, s0
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	edc3 7a06 	vstr	s15, [r3, #24]
	pOutputData->eulerStdDev[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fee6 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8004018:	eef0 7a40 	vmov.f32	s15, s0
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	edc3 7a07 	vstr	s15, [r3, #28]

	pOutputData->status			= sbgStreamBufferReadUint32LE(pInputStream);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe40 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8004028:	4602      	mov	r2, r0
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	621a      	str	r2, [r3, #32]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fdc6 	bl	8003bc0 <sbgStreamBufferGetLastError>
 8004034:	4603      	mov	r3, r0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	0800ab50 	.word	0x0800ab50
 8004044:	0800ce38 	.word	0x0800ce38
 8004048:	0800ab60 	.word	0x0800ab60
 800404c:	0800ab94 	.word	0x0800ab94

08004050 <sbgEComBinaryLogParseEkfNavData>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseEkfNavData(SbgStreamBuffer *pInputStream, SbgLogEkfNavData *pOutputData)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <sbgEComBinaryLogParseEkfNavData+0x1c>
 8004060:	4b45      	ldr	r3, [pc, #276]	; (8004178 <sbgEComBinaryLogParseEkfNavData+0x128>)
 8004062:	4a46      	ldr	r2, [pc, #280]	; (800417c <sbgEComBinaryLogParseEkfNavData+0x12c>)
 8004064:	2173      	movs	r1, #115	; 0x73
 8004066:	4846      	ldr	r0, [pc, #280]	; (8004180 <sbgEComBinaryLogParseEkfNavData+0x130>)
 8004068:	f004 fef2 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <sbgEComBinaryLogParseEkfNavData+0x2e>
 8004072:	4b44      	ldr	r3, [pc, #272]	; (8004184 <sbgEComBinaryLogParseEkfNavData+0x134>)
 8004074:	4a41      	ldr	r2, [pc, #260]	; (800417c <sbgEComBinaryLogParseEkfNavData+0x12c>)
 8004076:	2174      	movs	r1, #116	; 0x74
 8004078:	4841      	ldr	r0, [pc, #260]	; (8004180 <sbgEComBinaryLogParseEkfNavData+0x130>)
 800407a:	f004 fee9 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fe12 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8004084:	4602      	mov	r2, r0
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	601a      	str	r2, [r3, #0]

	pOutputData->velocity[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff feaa 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8004090:	eef0 7a40 	vmov.f32	s15, s0
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	edc3 7a01 	vstr	s15, [r3, #4]
	pOutputData->velocity[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fea2 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 80040a0:	eef0 7a40 	vmov.f32	s15, s0
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->velocity[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fe9a 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 80040b0:	eef0 7a40 	vmov.f32	s15, s0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	edc3 7a03 	vstr	s15, [r3, #12]

	pOutputData->velocityStdDev[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe92 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 80040c0:	eef0 7a40 	vmov.f32	s15, s0
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	edc3 7a04 	vstr	s15, [r3, #16]
	pOutputData->velocityStdDev[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fe8a 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 80040d0:	eef0 7a40 	vmov.f32	s15, s0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->velocityStdDev[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fe82 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 80040e0:	eef0 7a40 	vmov.f32	s15, s0
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	edc3 7a06 	vstr	s15, [r3, #24]

	pOutputData->position[0]		= sbgStreamBufferReadDoubleLE(pInputStream);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff feac 	bl	8003e48 <sbgStreamBufferReadDoubleLE>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pOutputData->position[1]		= sbgStreamBufferReadDoubleLE(pInputStream);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fea4 	bl	8003e48 <sbgStreamBufferReadDoubleLE>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pOutputData->position[2]		= sbgStreamBufferReadDoubleLE(pInputStream);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fe9c 	bl	8003e48 <sbgStreamBufferReadDoubleLE>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	pOutputData->undulation			= sbgStreamBufferReadFloatLE(pInputStream);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff fe62 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8004120:	eef0 7a40 	vmov.f32	s15, s0
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	pOutputData->positionStdDev[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fe5a 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8004130:	eef0 7a40 	vmov.f32	s15, s0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	pOutputData->positionStdDev[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fe52 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8004140:	eef0 7a40 	vmov.f32	s15, s0
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	pOutputData->positionStdDev[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fe4a 	bl	8003de4 <sbgStreamBufferReadFloatLE>
 8004150:	eef0 7a40 	vmov.f32	s15, s0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	pOutputData->status				= sbgStreamBufferReadUint32LE(pInputStream);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fda4 	bl	8003ca8 <sbgStreamBufferReadUint32LE>
 8004160:	4602      	mov	r2, r0
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	649a      	str	r2, [r3, #72]	; 0x48

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fd2a 	bl	8003bc0 <sbgStreamBufferGetLastError>
 800416c:	4603      	mov	r3, r0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	0800ab50 	.word	0x0800ab50
 800417c:	0800ce5c 	.word	0x0800ce5c
 8004180:	0800ab60 	.word	0x0800ab60
 8004184:	0800ab94 	.word	0x0800ab94

08004188 <sbgStreamBufferGetLastError>:
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <sbgStreamBufferGetLastError+0x1c>
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <sbgStreamBufferGetLastError+0x28>)
 8004198:	4a06      	ldr	r2, [pc, #24]	; (80041b4 <sbgStreamBufferGetLastError+0x2c>)
 800419a:	f240 111d 	movw	r1, #285	; 0x11d
 800419e:	4806      	ldr	r0, [pc, #24]	; (80041b8 <sbgStreamBufferGetLastError+0x30>)
 80041a0:	f004 fe56 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	7c1b      	ldrb	r3, [r3, #16]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	0800abbc 	.word	0x0800abbc
 80041b4:	0800cf54 	.word	0x0800cf54
 80041b8:	0800abc4 	.word	0x0800abc4

080041bc <sbgStreamBufferGetSize>:
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <sbgStreamBufferGetSize+0x1c>
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <sbgStreamBufferGetSize+0x28>)
 80041cc:	4a06      	ldr	r2, [pc, #24]	; (80041e8 <sbgStreamBufferGetSize+0x2c>)
 80041ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80041d2:	4806      	ldr	r0, [pc, #24]	; (80041ec <sbgStreamBufferGetSize+0x30>)
 80041d4:	f004 fe3c 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	0800abbc 	.word	0x0800abbc
 80041e8:	0800cf04 	.word	0x0800cf04
 80041ec:	0800abc4 	.word	0x0800abc4

080041f0 <sbgStreamBufferGetLength>:
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <sbgStreamBufferGetLength+0x1c>
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <sbgStreamBufferGetLength+0x30>)
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <sbgStreamBufferGetLength+0x34>)
 8004202:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004206:	4808      	ldr	r0, [pc, #32]	; (8004228 <sbgStreamBufferGetLength+0x38>)
 8004208:	f004 fe22 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	1ad3      	subs	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	0800abbc 	.word	0x0800abbc
 8004224:	0800cf1c 	.word	0x0800cf1c
 8004228:	0800abc4 	.word	0x0800abc4

0800422c <sbgStreamBufferGetSpace>:
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <sbgStreamBufferGetSpace+0x1c>
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <sbgStreamBufferGetSpace+0x38>)
 800423c:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <sbgStreamBufferGetSpace+0x3c>)
 800423e:	f240 1167 	movw	r1, #359	; 0x167
 8004242:	480a      	ldr	r0, [pc, #40]	; (800426c <sbgStreamBufferGetSpace+0x40>)
 8004244:	f004 fe04 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ffb7 	bl	80041bc <sbgStreamBufferGetSize>
 800424e:	4604      	mov	r4, r0
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ffcd 	bl	80041f0 <sbgStreamBufferGetLength>
 8004256:	4603      	mov	r3, r0
 8004258:	1ae3      	subs	r3, r4, r3
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bd90      	pop	{r4, r7, pc}
 8004262:	bf00      	nop
 8004264:	0800abbc 	.word	0x0800abbc
 8004268:	0800ceec 	.word	0x0800ceec
 800426c:	0800abc4 	.word	0x0800abc4

08004270 <sbgStreamBufferReadUint16LE>:
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <sbgStreamBufferReadUint16LE+0x1a>
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <sbgStreamBufferReadUint16LE+0x70>)
 8004280:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <sbgStreamBufferReadUint16LE+0x74>)
 8004282:	2179      	movs	r1, #121	; 0x79
 8004284:	4818      	ldr	r0, [pc, #96]	; (80042e8 <sbgStreamBufferReadUint16LE+0x78>)
 8004286:	f004 fde3 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7c1b      	ldrb	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d121      	bne.n	80042d6 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ffca 	bl	800422c <sbgStreamBufferGetSpace>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d918      	bls.n	80042d0 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	60d1      	str	r1, [r2, #12]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	60d1      	str	r1, [r2, #12]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 80042be:	89bb      	ldrh	r3, [r7, #12]
 80042c0:	b21a      	sxth	r2, r3
 80042c2:	89fb      	ldrh	r3, [r7, #14]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	b21b      	sxth	r3, r3
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b21b      	sxth	r3, r3
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	e003      	b.n	80042d8 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2208      	movs	r2, #8
 80042d4:	741a      	strb	r2, [r3, #16]
	return 0;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	0800abbc 	.word	0x0800abbc
 80042e4:	0800cf38 	.word	0x0800cf38
 80042e8:	0800ac00 	.word	0x0800ac00

080042ec <sbgStreamBufferReadUint32LE>:
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <sbgStreamBufferReadUint32LE+0x1c>
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <sbgStreamBufferReadUint32LE+0x90>)
 80042fc:	4a20      	ldr	r2, [pc, #128]	; (8004380 <sbgStreamBufferReadUint32LE+0x94>)
 80042fe:	f240 1189 	movw	r1, #393	; 0x189
 8004302:	4820      	ldr	r0, [pc, #128]	; (8004384 <sbgStreamBufferReadUint32LE+0x98>)
 8004304:	f004 fda4 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7c1b      	ldrb	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d12f      	bne.n	8004370 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff8b 	bl	800422c <sbgStreamBufferGetSpace>
 8004316:	4603      	mov	r3, r0
 8004318:	2b03      	cmp	r3, #3
 800431a:	d926      	bls.n	800436a <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	60d1      	str	r1, [r2, #12]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	60d1      	str	r1, [r2, #12]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	60d1      	str	r1, [r2, #12]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	60d1      	str	r1, [r2, #12]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	431a      	orrs	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	431a      	orrs	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	4313      	orrs	r3, r2
 8004368:	e003      	b.n	8004372 <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2208      	movs	r2, #8
 800436e:	741a      	strb	r2, [r3, #16]
	return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	0800abbc 	.word	0x0800abbc
 8004380:	0800ced0 	.word	0x0800ced0
 8004384:	0800ac00 	.word	0x0800ac00

08004388 <sbgEComBinaryLogParseEvent>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseEvent(SbgStreamBuffer *pInputStream, SbgLogEvent *pOutputData)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <sbgEComBinaryLogParseEvent+0x1c>
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <sbgEComBinaryLogParseEvent+0x90>)
 800439a:	4a20      	ldr	r2, [pc, #128]	; (800441c <sbgEComBinaryLogParseEvent+0x94>)
 800439c:	2109      	movs	r1, #9
 800439e:	4820      	ldr	r0, [pc, #128]	; (8004420 <sbgEComBinaryLogParseEvent+0x98>)
 80043a0:	f004 fd56 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <sbgEComBinaryLogParseEvent+0x2e>
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <sbgEComBinaryLogParseEvent+0x9c>)
 80043ac:	4a1b      	ldr	r2, [pc, #108]	; (800441c <sbgEComBinaryLogParseEvent+0x94>)
 80043ae:	210a      	movs	r1, #10
 80043b0:	481b      	ldr	r0, [pc, #108]	; (8004420 <sbgEComBinaryLogParseEvent+0x98>)
 80043b2:	f004 fd4d 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ff98 	bl	80042ec <sbgStreamBufferReadUint32LE>
 80043bc:	4602      	mov	r2, r0
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	601a      	str	r2, [r3, #0]
	pOutputData->status			= sbgStreamBufferReadUint16LE(pInputStream);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ff54 	bl	8004270 <sbgStreamBufferReadUint16LE>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	809a      	strh	r2, [r3, #4]
	pOutputData->timeOffset0	= sbgStreamBufferReadUint16LE(pInputStream);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff4d 	bl	8004270 <sbgStreamBufferReadUint16LE>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	80da      	strh	r2, [r3, #6]
	pOutputData->timeOffset1	= sbgStreamBufferReadUint16LE(pInputStream);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff ff46 	bl	8004270 <sbgStreamBufferReadUint16LE>
 80043e4:	4603      	mov	r3, r0
 80043e6:	461a      	mov	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	811a      	strh	r2, [r3, #8]
	pOutputData->timeOffset2	= sbgStreamBufferReadUint16LE(pInputStream);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff3f 	bl	8004270 <sbgStreamBufferReadUint16LE>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	815a      	strh	r2, [r3, #10]
	pOutputData->timeOffset3	= sbgStreamBufferReadUint16LE(pInputStream);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ff38 	bl	8004270 <sbgStreamBufferReadUint16LE>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	819a      	strh	r2, [r3, #12]
	
	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff febd 	bl	8004188 <sbgStreamBufferGetLastError>
 800440e:	4603      	mov	r3, r0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	0800ac38 	.word	0x0800ac38
 800441c:	0800ceb4 	.word	0x0800ceb4
 8004420:	0800ac48 	.word	0x0800ac48
 8004424:	0800ac80 	.word	0x0800ac80

08004428 <sbgStreamBufferGetLastError>:
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <sbgStreamBufferGetLastError+0x1c>
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <sbgStreamBufferGetLastError+0x28>)
 8004438:	4a06      	ldr	r2, [pc, #24]	; (8004454 <sbgStreamBufferGetLastError+0x2c>)
 800443a:	f240 111d 	movw	r1, #285	; 0x11d
 800443e:	4806      	ldr	r0, [pc, #24]	; (8004458 <sbgStreamBufferGetLastError+0x30>)
 8004440:	f004 fd06 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7c1b      	ldrb	r3, [r3, #16]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	0800aca8 	.word	0x0800aca8
 8004454:	0800d014 	.word	0x0800d014
 8004458:	0800acb0 	.word	0x0800acb0

0800445c <sbgStreamBufferGetSize>:
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <sbgStreamBufferGetSize+0x1c>
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <sbgStreamBufferGetSize+0x28>)
 800446c:	4a06      	ldr	r2, [pc, #24]	; (8004488 <sbgStreamBufferGetSize+0x2c>)
 800446e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004472:	4806      	ldr	r0, [pc, #24]	; (800448c <sbgStreamBufferGetSize+0x30>)
 8004474:	f004 fcec 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0800aca8 	.word	0x0800aca8
 8004488:	0800cfc4 	.word	0x0800cfc4
 800448c:	0800acb0 	.word	0x0800acb0

08004490 <sbgStreamBufferGetLength>:
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <sbgStreamBufferGetLength+0x1c>
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <sbgStreamBufferGetLength+0x30>)
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <sbgStreamBufferGetLength+0x34>)
 80044a2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80044a6:	4808      	ldr	r0, [pc, #32]	; (80044c8 <sbgStreamBufferGetLength+0x38>)
 80044a8:	f004 fcd2 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	1ad3      	subs	r3, r2, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	0800aca8 	.word	0x0800aca8
 80044c4:	0800cfdc 	.word	0x0800cfdc
 80044c8:	0800acb0 	.word	0x0800acb0

080044cc <sbgStreamBufferGetSpace>:
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <sbgStreamBufferGetSpace+0x1c>
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <sbgStreamBufferGetSpace+0x38>)
 80044dc:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <sbgStreamBufferGetSpace+0x3c>)
 80044de:	f240 1167 	movw	r1, #359	; 0x167
 80044e2:	480a      	ldr	r0, [pc, #40]	; (800450c <sbgStreamBufferGetSpace+0x40>)
 80044e4:	f004 fcb4 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ffb7 	bl	800445c <sbgStreamBufferGetSize>
 80044ee:	4604      	mov	r4, r0
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ffcd 	bl	8004490 <sbgStreamBufferGetLength>
 80044f6:	4603      	mov	r3, r0
 80044f8:	1ae3      	subs	r3, r4, r3
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}
 8004502:	bf00      	nop
 8004504:	0800aca8 	.word	0x0800aca8
 8004508:	0800cfac 	.word	0x0800cfac
 800450c:	0800acb0 	.word	0x0800acb0

08004510 <sbgStreamBufferReadUint8>:
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <sbgStreamBufferReadUint8+0x1c>
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <sbgStreamBufferReadUint8+0x50>)
 8004520:	4a10      	ldr	r2, [pc, #64]	; (8004564 <sbgStreamBufferReadUint8+0x54>)
 8004522:	f240 2119 	movw	r1, #537	; 0x219
 8004526:	4810      	ldr	r0, [pc, #64]	; (8004568 <sbgStreamBufferReadUint8+0x58>)
 8004528:	f004 fc92 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7c1b      	ldrb	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <sbgStreamBufferReadUint8+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint8_t))
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ffc9 	bl	80044cc <sbgStreamBufferGetSpace>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <sbgStreamBufferReadUint8+0x3e>
			return *((uint8_t*)(pHandle->pCurrentPtr++));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	1c59      	adds	r1, r3, #1
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	60d1      	str	r1, [r2, #12]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	e003      	b.n	8004556 <sbgStreamBufferReadUint8+0x46>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2208      	movs	r2, #8
 8004552:	741a      	strb	r2, [r3, #16]
	return 0;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	0800aca8 	.word	0x0800aca8
 8004564:	0800d088 	.word	0x0800d088
 8004568:	0800acb0 	.word	0x0800acb0

0800456c <sbgStreamBufferReadUint16LE>:
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <sbgStreamBufferReadUint16LE+0x1a>
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <sbgStreamBufferReadUint16LE+0x70>)
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <sbgStreamBufferReadUint16LE+0x74>)
 800457e:	2179      	movs	r1, #121	; 0x79
 8004580:	4818      	ldr	r0, [pc, #96]	; (80045e4 <sbgStreamBufferReadUint16LE+0x78>)
 8004582:	f004 fc65 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7c1b      	ldrb	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d121      	bne.n	80045d2 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff9c 	bl	80044cc <sbgStreamBufferGetSpace>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d918      	bls.n	80045cc <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	60d1      	str	r1, [r2, #12]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	60d1      	str	r1, [r2, #12]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 80045ba:	89bb      	ldrh	r3, [r7, #12]
 80045bc:	b21a      	sxth	r2, r3
 80045be:	89fb      	ldrh	r3, [r7, #14]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	b21b      	sxth	r3, r3
 80045c4:	4313      	orrs	r3, r2
 80045c6:	b21b      	sxth	r3, r3
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	e003      	b.n	80045d4 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2208      	movs	r2, #8
 80045d0:	741a      	strb	r2, [r3, #16]
	return 0;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	0800aca8 	.word	0x0800aca8
 80045e0:	0800d0a4 	.word	0x0800d0a4
 80045e4:	0800acec 	.word	0x0800acec

080045e8 <sbgStreamBufferReadUint32LE>:
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <sbgStreamBufferReadUint32LE+0x1c>
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <sbgStreamBufferReadUint32LE+0x90>)
 80045f8:	4a20      	ldr	r2, [pc, #128]	; (800467c <sbgStreamBufferReadUint32LE+0x94>)
 80045fa:	f240 1189 	movw	r1, #393	; 0x189
 80045fe:	4820      	ldr	r0, [pc, #128]	; (8004680 <sbgStreamBufferReadUint32LE+0x98>)
 8004600:	f004 fc26 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7c1b      	ldrb	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d12f      	bne.n	800466c <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff5d 	bl	80044cc <sbgStreamBufferGetSpace>
 8004612:	4603      	mov	r3, r0
 8004614:	2b03      	cmp	r3, #3
 8004616:	d926      	bls.n	8004666 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	1c59      	adds	r1, r3, #1
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	60d1      	str	r1, [r2, #12]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	60d1      	str	r1, [r2, #12]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	1c59      	adds	r1, r3, #1
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	60d1      	str	r1, [r2, #12]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	60d1      	str	r1, [r2, #12]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	431a      	orrs	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	431a      	orrs	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	4313      	orrs	r3, r2
 8004664:	e003      	b.n	800466e <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2208      	movs	r2, #8
 800466a:	741a      	strb	r2, [r3, #16]
	return 0;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	0800aca8 	.word	0x0800aca8
 800467c:	0800cf90 	.word	0x0800cf90
 8004680:	0800acec 	.word	0x0800acec

08004684 <sbgStreamBufferReadUint64LE>:
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <sbgStreamBufferReadUint64LE+0x1e>
 8004694:	4b20      	ldr	r3, [pc, #128]	; (8004718 <sbgStreamBufferReadUint64LE+0x94>)
 8004696:	4a21      	ldr	r2, [pc, #132]	; (800471c <sbgStreamBufferReadUint64LE+0x98>)
 8004698:	f240 31c7 	movw	r1, #967	; 0x3c7
 800469c:	4820      	ldr	r0, [pc, #128]	; (8004720 <sbgStreamBufferReadUint64LE+0x9c>)
 800469e:	f004 fbd7 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7c1b      	ldrb	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d129      	bne.n	80046fe <sbgStreamBufferReadUint64LE+0x7a>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint64_t))
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ff0e 	bl	80044cc <sbgStreamBufferGetSpace>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b07      	cmp	r3, #7
 80046b4:	d920      	bls.n	80046f8 <sbgStreamBufferReadUint64LE+0x74>
				lowPart = sbgStreamBufferReadUint32LE(pHandle);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ff96 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 80046bc:	4603      	mov	r3, r0
 80046be:	2200      	movs	r2, #0
 80046c0:	469a      	mov	sl, r3
 80046c2:	4693      	mov	fp, r2
 80046c4:	e9c7 ab04 	strd	sl, fp, [r7, #16]
				highPart = sbgStreamBufferReadUint32LE(pHandle);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff8d 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2200      	movs	r2, #0
 80046d2:	4698      	mov	r8, r3
 80046d4:	4691      	mov	r9, r2
 80046d6:	e9c7 8902 	strd	r8, r9, [r7, #8]
					return lowPart | (highPart << 32);
 80046da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	0003      	movs	r3, r0
 80046e8:	2200      	movs	r2, #0
 80046ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046ee:	ea42 0400 	orr.w	r4, r2, r0
 80046f2:	ea43 0501 	orr.w	r5, r3, r1
 80046f6:	e006      	b.n	8004706 <sbgStreamBufferReadUint64LE+0x82>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2208      	movs	r2, #8
 80046fc:	741a      	strb	r2, [r3, #16]
	return 0ull;
 80046fe:	f04f 0400 	mov.w	r4, #0
 8004702:	f04f 0500 	mov.w	r5, #0
}
 8004706:	4622      	mov	r2, r4
 8004708:	462b      	mov	r3, r5
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004716:	bf00      	nop
 8004718:	0800aca8 	.word	0x0800aca8
 800471c:	0800d06c 	.word	0x0800d06c
 8004720:	0800acec 	.word	0x0800acec

08004724 <sbgStreamBufferReadFloatLE>:
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <sbgStreamBufferReadFloatLE+0x1c>
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <sbgStreamBufferReadFloatLE+0x58>)
 8004734:	4a12      	ldr	r2, [pc, #72]	; (8004780 <sbgStreamBufferReadFloatLE+0x5c>)
 8004736:	f240 4139 	movw	r1, #1081	; 0x439
 800473a:	4812      	ldr	r0, [pc, #72]	; (8004784 <sbgStreamBufferReadFloatLE+0x60>)
 800473c:	f004 fb88 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	7c1b      	ldrb	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff febf 	bl	80044cc <sbgStreamBufferGetSpace>
 800474e:	4603      	mov	r3, r0
 8004750:	2b03      	cmp	r3, #3
 8004752:	d906      	bls.n	8004762 <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ff47 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 800475a:	4603      	mov	r3, r0
 800475c:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	e004      	b.n	800476c <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2208      	movs	r2, #8
 8004766:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 8004768:	f04f 0300 	mov.w	r3, #0
}
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eeb0 0a67 	vmov.f32	s0, s15
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	0800aca8 	.word	0x0800aca8
 8004780:	0800cff8 	.word	0x0800cff8
 8004784:	0800acec 	.word	0x0800acec

08004788 <sbgStreamBufferReadDoubleLE>:
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <sbgStreamBufferReadDoubleLE+0x1c>
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <sbgStreamBufferReadDoubleLE+0x5c>)
 8004798:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <sbgStreamBufferReadDoubleLE+0x60>)
 800479a:	f44f 618d 	mov.w	r1, #1128	; 0x468
 800479e:	4813      	ldr	r0, [pc, #76]	; (80047ec <sbgStreamBufferReadDoubleLE+0x64>)
 80047a0:	f004 fb56 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	7c1b      	ldrb	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d112      	bne.n	80047d2 <sbgStreamBufferReadDoubleLE+0x4a>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(double))
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff fe8d 	bl	80044cc <sbgStreamBufferGetSpace>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b07      	cmp	r3, #7
 80047b6:	d909      	bls.n	80047cc <sbgStreamBufferReadDoubleLE+0x44>
			doubleInt.valU = sbgStreamBufferReadUint64LE(pHandle);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff63 	bl	8004684 <sbgStreamBufferReadUint64LE>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
			return doubleInt.valF;
 80047c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ca:	e006      	b.n	80047da <sbgStreamBufferReadDoubleLE+0x52>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2208      	movs	r2, #8
 80047d0:	741a      	strb	r2, [r3, #16]
	return 0.0;
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
}
 80047da:	4610      	mov	r0, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	0800aca8 	.word	0x0800aca8
 80047e8:	0800d050 	.word	0x0800d050
 80047ec:	0800acec 	.word	0x0800acec

080047f0 <sbgEComBinaryLogParseGpsVelData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseGpsVelData(SbgStreamBuffer *pInputStream, SbgLogGpsVel *pOutputData)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <sbgEComBinaryLogParseGpsVelData+0x1c>
 8004800:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <sbgEComBinaryLogParseGpsVelData+0xe4>)
 8004802:	4a35      	ldr	r2, [pc, #212]	; (80048d8 <sbgEComBinaryLogParseGpsVelData+0xe8>)
 8004804:	2109      	movs	r1, #9
 8004806:	4835      	ldr	r0, [pc, #212]	; (80048dc <sbgEComBinaryLogParseGpsVelData+0xec>)
 8004808:	f004 fb22 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <sbgEComBinaryLogParseGpsVelData+0x2e>
 8004812:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <sbgEComBinaryLogParseGpsVelData+0xf0>)
 8004814:	4a30      	ldr	r2, [pc, #192]	; (80048d8 <sbgEComBinaryLogParseGpsVelData+0xe8>)
 8004816:	210a      	movs	r1, #10
 8004818:	4830      	ldr	r0, [pc, #192]	; (80048dc <sbgEComBinaryLogParseGpsVelData+0xec>)
 800481a:	f004 fb19 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fee2 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 8004824:	4602      	mov	r2, r0
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	601a      	str	r2, [r3, #0]
	pOutputData->status			= sbgStreamBufferReadUint32LE(pInputStream);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fedc 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 8004830:	4602      	mov	r2, r0
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	605a      	str	r2, [r3, #4]
	pOutputData->timeOfWeek		= sbgStreamBufferReadUint32LE(pInputStream);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fed6 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 800483c:	4602      	mov	r2, r0
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	609a      	str	r2, [r3, #8]
	pOutputData->velocity[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ff6e 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004848:	eef0 7a40 	vmov.f32	s15, s0
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->velocity[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ff66 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004858:	eef0 7a40 	vmov.f32	s15, s0
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	edc3 7a04 	vstr	s15, [r3, #16]
	pOutputData->velocity[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ff5e 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004868:	eef0 7a40 	vmov.f32	s15, s0
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->velocityAcc[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff56 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004878:	eef0 7a40 	vmov.f32	s15, s0
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	edc3 7a06 	vstr	s15, [r3, #24]
	pOutputData->velocityAcc[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ff4e 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004888:	eef0 7a40 	vmov.f32	s15, s0
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	edc3 7a07 	vstr	s15, [r3, #28]
	pOutputData->velocityAcc[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ff46 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004898:	eef0 7a40 	vmov.f32	s15, s0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	edc3 7a08 	vstr	s15, [r3, #32]
	pOutputData->course			= sbgStreamBufferReadFloatLE(pInputStream);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ff3e 	bl	8004724 <sbgStreamBufferReadFloatLE>
 80048a8:	eef0 7a40 	vmov.f32	s15, s0
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pOutputData->courseAcc		= sbgStreamBufferReadFloatLE(pInputStream);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ff36 	bl	8004724 <sbgStreamBufferReadFloatLE>
 80048b8:	eef0 7a40 	vmov.f32	s15, s0
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fdb0 	bl	8004428 <sbgStreamBufferGetLastError>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	0800ad24 	.word	0x0800ad24
 80048d8:	0800cf70 	.word	0x0800cf70
 80048dc:	0800ad34 	.word	0x0800ad34
 80048e0:	0800ad68 	.word	0x0800ad68

080048e4 <sbgEComBinaryLogParseGpsPosData>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseGpsPosData(SbgStreamBuffer *pInputStream, SbgLogGpsPos *pOutputData)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <sbgEComBinaryLogParseGpsPosData+0x1c>
 80048f4:	4b44      	ldr	r3, [pc, #272]	; (8004a08 <sbgEComBinaryLogParseGpsPosData+0x124>)
 80048f6:	4a45      	ldr	r2, [pc, #276]	; (8004a0c <sbgEComBinaryLogParseGpsPosData+0x128>)
 80048f8:	213d      	movs	r1, #61	; 0x3d
 80048fa:	4845      	ldr	r0, [pc, #276]	; (8004a10 <sbgEComBinaryLogParseGpsPosData+0x12c>)
 80048fc:	f004 faa8 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <sbgEComBinaryLogParseGpsPosData+0x2e>
 8004906:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <sbgEComBinaryLogParseGpsPosData+0x130>)
 8004908:	4a40      	ldr	r2, [pc, #256]	; (8004a0c <sbgEComBinaryLogParseGpsPosData+0x128>)
 800490a:	213e      	movs	r1, #62	; 0x3e
 800490c:	4840      	ldr	r0, [pc, #256]	; (8004a10 <sbgEComBinaryLogParseGpsPosData+0x12c>)
 800490e:	f004 fa9f 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fe68 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 8004918:	4602      	mov	r2, r0
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint32LE(pInputStream);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fe62 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 8004924:	4602      	mov	r2, r0
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	605a      	str	r2, [r3, #4]
	pOutputData->timeOfWeek			= sbgStreamBufferReadUint32LE(pInputStream);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff fe5c 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 8004930:	4602      	mov	r2, r0
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	609a      	str	r2, [r3, #8]
	pOutputData->latitude			= sbgStreamBufferReadDoubleLE(pInputStream);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff ff26 	bl	8004788 <sbgStreamBufferReadDoubleLE>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	6839      	ldr	r1, [r7, #0]
 8004942:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pOutputData->longitude			= sbgStreamBufferReadDoubleLE(pInputStream);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ff1e 	bl	8004788 <sbgStreamBufferReadDoubleLE>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pOutputData->altitude			= sbgStreamBufferReadDoubleLE(pInputStream);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ff16 	bl	8004788 <sbgStreamBufferReadDoubleLE>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pOutputData->undulation			= sbgStreamBufferReadFloatLE(pInputStream);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fedc 	bl	8004724 <sbgStreamBufferReadFloatLE>
 800496c:	eef0 7a40 	vmov.f32	s15, s0
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pOutputData->latitudeAccuracy	= sbgStreamBufferReadFloatLE(pInputStream);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff fed4 	bl	8004724 <sbgStreamBufferReadFloatLE>
 800497c:	eef0 7a40 	vmov.f32	s15, s0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pOutputData->longitudeAccuracy	= sbgStreamBufferReadFloatLE(pInputStream);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fecc 	bl	8004724 <sbgStreamBufferReadFloatLE>
 800498c:	eef0 7a40 	vmov.f32	s15, s0
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pOutputData->altitudeAccuracy	= sbgStreamBufferReadFloatLE(pInputStream);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fec4 	bl	8004724 <sbgStreamBufferReadFloatLE>
 800499c:	eef0 7a40 	vmov.f32	s15, s0
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	//
	// Test if we have a additional information such as base station id (since version 1.4)
	//
	if (sbgStreamBufferGetSpace(pInputStream) >= 5)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fd90 	bl	80044cc <sbgStreamBufferGetSpace>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d916      	bls.n	80049e0 <sbgEComBinaryLogParseGpsPosData+0xfc>
	{
		//
		// Read the additional information
		//
		pOutputData->numSvUsed			= sbgStreamBufferReadUint8LE(pInputStream);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fdac 	bl	8004510 <sbgStreamBufferReadUint8>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461a      	mov	r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		pOutputData->baseStationId		= sbgStreamBufferReadUint16LE(pInputStream);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fdd2 	bl	800456c <sbgStreamBufferReadUint16LE>
 80049c8:	4603      	mov	r3, r0
 80049ca:	461a      	mov	r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	875a      	strh	r2, [r3, #58]	; 0x3a
		pOutputData->differentialAge	= sbgStreamBufferReadUint16LE(pInputStream);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff fdcb 	bl	800456c <sbgStreamBufferReadUint16LE>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	879a      	strh	r2, [r3, #60]	; 0x3c
 80049de:	e00b      	b.n	80049f8 <sbgEComBinaryLogParseGpsPosData+0x114>
	else
	{
		//
		// Default the additional information
		//
		pOutputData->numSvUsed = 0;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		pOutputData->baseStationId = 0xFFFF;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049ee:	875a      	strh	r2, [r3, #58]	; 0x3a
		pOutputData->differentialAge = 0xFFFF;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f6:	879a      	strh	r2, [r3, #60]	; 0x3c
	}

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fd15 	bl	8004428 <sbgStreamBufferGetLastError>
 80049fe:	4603      	mov	r3, r0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	0800ad24 	.word	0x0800ad24
 8004a0c:	0800d030 	.word	0x0800d030
 8004a10:	0800ad34 	.word	0x0800ad34
 8004a14:	0800ad68 	.word	0x0800ad68

08004a18 <sbgEComBinaryLogParseGpsHdtData>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseGpsHdtData(SbgStreamBuffer *pInputStream, SbgLogGpsHdt *pOutputData)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <sbgEComBinaryLogParseGpsHdtData+0x1c>
 8004a28:	4b2e      	ldr	r3, [pc, #184]	; (8004ae4 <sbgEComBinaryLogParseGpsHdtData+0xcc>)
 8004a2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ae8 <sbgEComBinaryLogParseGpsHdtData+0xd0>)
 8004a2c:	218f      	movs	r1, #143	; 0x8f
 8004a2e:	482f      	ldr	r0, [pc, #188]	; (8004aec <sbgEComBinaryLogParseGpsHdtData+0xd4>)
 8004a30:	f004 fa0e 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <sbgEComBinaryLogParseGpsHdtData+0x2e>
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <sbgEComBinaryLogParseGpsHdtData+0xd8>)
 8004a3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <sbgEComBinaryLogParseGpsHdtData+0xd0>)
 8004a3e:	2190      	movs	r1, #144	; 0x90
 8004a40:	482a      	ldr	r0, [pc, #168]	; (8004aec <sbgEComBinaryLogParseGpsHdtData+0xd4>)
 8004a42:	f004 fa05 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fdce 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint16LE(pInputStream);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fd8a 	bl	800456c <sbgStreamBufferReadUint16LE>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	809a      	strh	r2, [r3, #4]
	pOutputData->timeOfWeek			= sbgStreamBufferReadUint32LE(pInputStream);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff fdc1 	bl	80045e8 <sbgStreamBufferReadUint32LE>
 8004a66:	4602      	mov	r2, r0
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	609a      	str	r2, [r3, #8]
	pOutputData->heading			= sbgStreamBufferReadFloatLE(pInputStream);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fe59 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004a72:	eef0 7a40 	vmov.f32	s15, s0
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->headingAccuracy	= sbgStreamBufferReadFloatLE(pInputStream);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fe51 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004a82:	eef0 7a40 	vmov.f32	s15, s0
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	edc3 7a04 	vstr	s15, [r3, #16]
	pOutputData->pitch				= sbgStreamBufferReadFloatLE(pInputStream);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff fe49 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004a92:	eef0 7a40 	vmov.f32	s15, s0
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->pitchAccuracy		= sbgStreamBufferReadFloatLE(pInputStream);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fe41 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004aa2:	eef0 7a40 	vmov.f32	s15, s0
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	edc3 7a06 	vstr	s15, [r3, #24]

	//
	// The baseline field have been added in version 2.0
	//
	if (sbgStreamBufferGetSpace(pInputStream) > 0)
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fd0d 	bl	80044cc <sbgStreamBufferGetSpace>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <sbgEComBinaryLogParseGpsHdtData+0xb2>
	{
		pOutputData->baseline		= sbgStreamBufferReadFloatLE(pInputStream);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fe33 	bl	8004724 <sbgStreamBufferReadFloatLE>
 8004abe:	eef0 7a40 	vmov.f32	s15, s0
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	edc3 7a07 	vstr	s15, [r3, #28]
 8004ac8:	e003      	b.n	8004ad2 <sbgEComBinaryLogParseGpsHdtData+0xba>
	}
	else
	{
		pOutputData->baseline		= 0.0f;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
	}

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fca8 	bl	8004428 <sbgStreamBufferGetLastError>
 8004ad8:	4603      	mov	r3, r0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	0800ad24 	.word	0x0800ad24
 8004ae8:	0800d0c0 	.word	0x0800d0c0
 8004aec:	0800ad34 	.word	0x0800ad34
 8004af0:	0800ad68 	.word	0x0800ad68

08004af4 <sbgEComBinaryLogParseGpsRawData>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseGpsRawData(SbgStreamBuffer *pInputStream, SbgLogRawData *pOutputData)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
	return sbgEComBinaryLogParseRawData(pInputStream, pOutputData);
 8004afe:	6839      	ldr	r1, [r7, #0]
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 ff77 	bl	80059f4 <sbgEComBinaryLogParseRawData>
 8004b06:	4603      	mov	r3, r0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <sbgStreamBufferGetLastError>:
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <sbgStreamBufferGetLastError+0x1c>
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <sbgStreamBufferGetLastError+0x28>)
 8004b20:	4a06      	ldr	r2, [pc, #24]	; (8004b3c <sbgStreamBufferGetLastError+0x2c>)
 8004b22:	f240 111d 	movw	r1, #285	; 0x11d
 8004b26:	4806      	ldr	r0, [pc, #24]	; (8004b40 <sbgStreamBufferGetLastError+0x30>)
 8004b28:	f004 f992 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7c1b      	ldrb	r3, [r3, #16]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	0800ad90 	.word	0x0800ad90
 8004b3c:	0800d1a0 	.word	0x0800d1a0
 8004b40:	0800ad98 	.word	0x0800ad98

08004b44 <sbgStreamBufferGetSize>:
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <sbgStreamBufferGetSize+0x1c>
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <sbgStreamBufferGetSize+0x28>)
 8004b54:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <sbgStreamBufferGetSize+0x2c>)
 8004b56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b5a:	4806      	ldr	r0, [pc, #24]	; (8004b74 <sbgStreamBufferGetSize+0x30>)
 8004b5c:	f004 f978 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	0800ad90 	.word	0x0800ad90
 8004b70:	0800d134 	.word	0x0800d134
 8004b74:	0800ad98 	.word	0x0800ad98

08004b78 <sbgStreamBufferGetLength>:
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <sbgStreamBufferGetLength+0x1c>
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <sbgStreamBufferGetLength+0x30>)
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <sbgStreamBufferGetLength+0x34>)
 8004b8a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8004b8e:	4808      	ldr	r0, [pc, #32]	; (8004bb0 <sbgStreamBufferGetLength+0x38>)
 8004b90:	f004 f95e 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	0800ad90 	.word	0x0800ad90
 8004bac:	0800d14c 	.word	0x0800d14c
 8004bb0:	0800ad98 	.word	0x0800ad98

08004bb4 <sbgStreamBufferGetSpace>:
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <sbgStreamBufferGetSpace+0x1c>
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <sbgStreamBufferGetSpace+0x38>)
 8004bc4:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <sbgStreamBufferGetSpace+0x3c>)
 8004bc6:	f240 1167 	movw	r1, #359	; 0x167
 8004bca:	480a      	ldr	r0, [pc, #40]	; (8004bf4 <sbgStreamBufferGetSpace+0x40>)
 8004bcc:	f004 f940 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ffb7 	bl	8004b44 <sbgStreamBufferGetSize>
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffcd 	bl	8004b78 <sbgStreamBufferGetLength>
 8004bde:	4603      	mov	r3, r0
 8004be0:	1ae3      	subs	r3, r4, r3
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd90      	pop	{r4, r7, pc}
 8004bea:	bf00      	nop
 8004bec:	0800ad90 	.word	0x0800ad90
 8004bf0:	0800d11c 	.word	0x0800d11c
 8004bf4:	0800ad98 	.word	0x0800ad98

08004bf8 <sbgStreamBufferReadInt16LE>:
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d105      	bne.n	8004c12 <sbgStreamBufferReadInt16LE+0x1a>
 8004c06:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <sbgStreamBufferReadInt16LE+0x70>)
 8004c08:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <sbgStreamBufferReadInt16LE+0x74>)
 8004c0a:	2134      	movs	r1, #52	; 0x34
 8004c0c:	4818      	ldr	r0, [pc, #96]	; (8004c70 <sbgStreamBufferReadInt16LE+0x78>)
 8004c0e:	f004 f91f 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7c1b      	ldrb	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d121      	bne.n	8004c5e <sbgStreamBufferReadInt16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(int16_t))
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff ffca 	bl	8004bb4 <sbgStreamBufferGetSpace>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d918      	bls.n	8004c58 <sbgStreamBufferReadInt16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	60d1      	str	r1, [r2, #12]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	60d1      	str	r1, [r2, #12]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 8004c46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004c4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	b21b      	sxth	r3, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b21b      	sxth	r3, r3
 8004c56:	e003      	b.n	8004c60 <sbgStreamBufferReadInt16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	741a      	strb	r2, [r3, #16]
	return 0;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	0800ad90 	.word	0x0800ad90
 8004c6c:	0800d1f8 	.word	0x0800d1f8
 8004c70:	0800add4 	.word	0x0800add4

08004c74 <sbgStreamBufferReadUint16LE>:
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <sbgStreamBufferReadUint16LE+0x1a>
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <sbgStreamBufferReadUint16LE+0x70>)
 8004c84:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <sbgStreamBufferReadUint16LE+0x74>)
 8004c86:	2179      	movs	r1, #121	; 0x79
 8004c88:	4818      	ldr	r0, [pc, #96]	; (8004cec <sbgStreamBufferReadUint16LE+0x78>)
 8004c8a:	f004 f8e1 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	7c1b      	ldrb	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d121      	bne.n	8004cda <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff ff8c 	bl	8004bb4 <sbgStreamBufferGetSpace>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d918      	bls.n	8004cd4 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	60d1      	str	r1, [r2, #12]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	60d1      	str	r1, [r2, #12]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 8004cc2:	89bb      	ldrh	r3, [r7, #12]
 8004cc4:	b21a      	sxth	r2, r3
 8004cc6:	89fb      	ldrh	r3, [r7, #14]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	b21b      	sxth	r3, r3
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b21b      	sxth	r3, r3
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	e003      	b.n	8004cdc <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	741a      	strb	r2, [r3, #16]
	return 0;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	0800ad90 	.word	0x0800ad90
 8004ce8:	0800d168 	.word	0x0800d168
 8004cec:	0800add4 	.word	0x0800add4

08004cf0 <sbgStreamBufferReadInt32LE>:
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <sbgStreamBufferReadInt32LE+0x1c>
 8004cfe:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <sbgStreamBufferReadInt32LE+0x90>)
 8004d00:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <sbgStreamBufferReadInt32LE+0x94>)
 8004d02:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004d06:	4820      	ldr	r0, [pc, #128]	; (8004d88 <sbgStreamBufferReadInt32LE+0x98>)
 8004d08:	f004 f8a2 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c1b      	ldrb	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d12f      	bne.n	8004d74 <sbgStreamBufferReadInt32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(int32_t))
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff4d 	bl	8004bb4 <sbgStreamBufferGetSpace>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d926      	bls.n	8004d6e <sbgStreamBufferReadInt32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	1c59      	adds	r1, r3, #1
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	60d1      	str	r1, [r2, #12]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	1c59      	adds	r1, r3, #1
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	60d1      	str	r1, [r2, #12]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	1c59      	adds	r1, r3, #1
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	60d1      	str	r1, [r2, #12]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	1c59      	adds	r1, r3, #1
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	60d1      	str	r1, [r2, #12]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	431a      	orrs	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	e003      	b.n	8004d76 <sbgStreamBufferReadInt32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2208      	movs	r2, #8
 8004d72:	741a      	strb	r2, [r3, #16]
	return 0;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	0800ad90 	.word	0x0800ad90
 8004d84:	0800d1dc 	.word	0x0800d1dc
 8004d88:	0800add4 	.word	0x0800add4

08004d8c <sbgStreamBufferReadUint32LE>:
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <sbgStreamBufferReadUint32LE+0x1c>
 8004d9a:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <sbgStreamBufferReadUint32LE+0x90>)
 8004d9c:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <sbgStreamBufferReadUint32LE+0x94>)
 8004d9e:	f240 1189 	movw	r1, #393	; 0x189
 8004da2:	4820      	ldr	r0, [pc, #128]	; (8004e24 <sbgStreamBufferReadUint32LE+0x98>)
 8004da4:	f004 f854 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7c1b      	ldrb	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d12f      	bne.n	8004e10 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff feff 	bl	8004bb4 <sbgStreamBufferGetSpace>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d926      	bls.n	8004e0a <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	60d1      	str	r1, [r2, #12]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	60d1      	str	r1, [r2, #12]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	60d1      	str	r1, [r2, #12]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	1c59      	adds	r1, r3, #1
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	60d1      	str	r1, [r2, #12]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	4313      	orrs	r3, r2
 8004e08:	e003      	b.n	8004e12 <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	741a      	strb	r2, [r3, #16]
	return 0;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	0800ad90 	.word	0x0800ad90
 8004e20:	0800d100 	.word	0x0800d100
 8004e24:	0800add4 	.word	0x0800add4

08004e28 <sbgStreamBufferReadFloatLE>:
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <sbgStreamBufferReadFloatLE+0x1c>
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <sbgStreamBufferReadFloatLE+0x58>)
 8004e38:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <sbgStreamBufferReadFloatLE+0x5c>)
 8004e3a:	f240 4139 	movw	r1, #1081	; 0x439
 8004e3e:	4812      	ldr	r0, [pc, #72]	; (8004e88 <sbgStreamBufferReadFloatLE+0x60>)
 8004e40:	f004 f806 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7c1b      	ldrb	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10f      	bne.n	8004e6c <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff feb1 	bl	8004bb4 <sbgStreamBufferGetSpace>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d906      	bls.n	8004e66 <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff ff97 	bl	8004d8c <sbgStreamBufferReadUint32LE>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	e004      	b.n	8004e70 <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2208      	movs	r2, #8
 8004e6a:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 8004e6c:	f04f 0300 	mov.w	r3, #0
}
 8004e70:	ee07 3a90 	vmov	s15, r3
 8004e74:	eeb0 0a67 	vmov.f32	s0, s15
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	0800ad90 	.word	0x0800ad90
 8004e84:	0800d184 	.word	0x0800d184
 8004e88:	0800add4 	.word	0x0800add4

08004e8c <sbgEComBinaryLogParseImuData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseImuData(SbgStreamBuffer *pInputStream, SbgLogImuData *pOutputData)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <sbgEComBinaryLogParseImuData+0x1c>
 8004e9c:	4b45      	ldr	r3, [pc, #276]	; (8004fb4 <sbgEComBinaryLogParseImuData+0x128>)
 8004e9e:	4a46      	ldr	r2, [pc, #280]	; (8004fb8 <sbgEComBinaryLogParseImuData+0x12c>)
 8004ea0:	2124      	movs	r1, #36	; 0x24
 8004ea2:	4846      	ldr	r0, [pc, #280]	; (8004fbc <sbgEComBinaryLogParseImuData+0x130>)
 8004ea4:	f003 ffd4 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <sbgEComBinaryLogParseImuData+0x2e>
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <sbgEComBinaryLogParseImuData+0x134>)
 8004eb0:	4a41      	ldr	r2, [pc, #260]	; (8004fb8 <sbgEComBinaryLogParseImuData+0x12c>)
 8004eb2:	2125      	movs	r1, #37	; 0x25
 8004eb4:	4841      	ldr	r0, [pc, #260]	; (8004fbc <sbgEComBinaryLogParseImuData+0x130>)
 8004eb6:	f003 ffcb 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff66 	bl	8004d8c <sbgStreamBufferReadUint32LE>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint16LE(pInputStream);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fed4 	bl	8004c74 <sbgStreamBufferReadUint16LE>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	809a      	strh	r2, [r3, #4]
				
	pOutputData->accelerometers[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ffa7 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004eda:	eef0 7a40 	vmov.f32	s15, s0
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->accelerometers[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff ff9f 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004eea:	eef0 7a40 	vmov.f32	s15, s0
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->accelerometers[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff97 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004efa:	eef0 7a40 	vmov.f32	s15, s0
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	edc3 7a04 	vstr	s15, [r3, #16]

	pOutputData->gyroscopes[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff ff8f 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f0a:	eef0 7a40 	vmov.f32	s15, s0
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->gyroscopes[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff87 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f1a:	eef0 7a40 	vmov.f32	s15, s0
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	edc3 7a06 	vstr	s15, [r3, #24]
	pOutputData->gyroscopes[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ff7f 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f2a:	eef0 7a40 	vmov.f32	s15, s0
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	edc3 7a07 	vstr	s15, [r3, #28]

	pOutputData->temperature		= sbgStreamBufferReadFloatLE(pInputStream);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff77 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f3a:	eef0 7a40 	vmov.f32	s15, s0
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	edc3 7a08 	vstr	s15, [r3, #32]

	pOutputData->deltaVelocity[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff6f 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f4a:	eef0 7a40 	vmov.f32	s15, s0
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pOutputData->deltaVelocity[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ff67 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f5a:	eef0 7a40 	vmov.f32	s15, s0
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pOutputData->deltaVelocity[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff5f 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f6a:	eef0 7a40 	vmov.f32	s15, s0
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
				
	pOutputData->deltaAngle[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ff57 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f7a:	eef0 7a40 	vmov.f32	s15, s0
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pOutputData->deltaAngle[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff4f 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f8a:	eef0 7a40 	vmov.f32	s15, s0
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pOutputData->deltaAngle[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ff47 	bl	8004e28 <sbgStreamBufferReadFloatLE>
 8004f9a:	eef0 7a40 	vmov.f32	s15, s0
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fdb3 	bl	8004b10 <sbgStreamBufferGetLastError>
 8004faa:	4603      	mov	r3, r0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	0800ae54 	.word	0x0800ae54
 8004fb8:	0800d0e0 	.word	0x0800d0e0
 8004fbc:	0800ae18 	.word	0x0800ae18
 8004fc0:	0800ae64 	.word	0x0800ae64

08004fc4 <sbgEComBinaryLogParseImuShort>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseImuShort(SbgStreamBuffer *pInputStream, SbgLogImuShort *pOutputData)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <sbgEComBinaryLogParseImuShort+0x1c>
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <sbgEComBinaryLogParseImuShort+0xb0>)
 8004fd6:	4a28      	ldr	r2, [pc, #160]	; (8005078 <sbgEComBinaryLogParseImuShort+0xb4>)
 8004fd8:	216a      	movs	r1, #106	; 0x6a
 8004fda:	4828      	ldr	r0, [pc, #160]	; (800507c <sbgEComBinaryLogParseImuShort+0xb8>)
 8004fdc:	f003 ff38 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <sbgEComBinaryLogParseImuShort+0x2e>
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <sbgEComBinaryLogParseImuShort+0xbc>)
 8004fe8:	4a23      	ldr	r2, [pc, #140]	; (8005078 <sbgEComBinaryLogParseImuShort+0xb4>)
 8004fea:	216b      	movs	r1, #107	; 0x6b
 8004fec:	4823      	ldr	r0, [pc, #140]	; (800507c <sbgEComBinaryLogParseImuShort+0xb8>)
 8004fee:	f003 ff2f 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff feca 	bl	8004d8c <sbgStreamBufferReadUint32LE>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint16LE(pInputStream);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fe38 	bl	8004c74 <sbgStreamBufferReadUint16LE>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	809a      	strh	r2, [r3, #4]

	pOutputData->deltaVelocity[0]	= sbgStreamBufferReadInt32LE(pInputStream);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fe6f 	bl	8004cf0 <sbgStreamBufferReadInt32LE>
 8005012:	4602      	mov	r2, r0
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	609a      	str	r2, [r3, #8]
	pOutputData->deltaVelocity[1]	= sbgStreamBufferReadInt32LE(pInputStream);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fe69 	bl	8004cf0 <sbgStreamBufferReadInt32LE>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	60da      	str	r2, [r3, #12]
	pOutputData->deltaVelocity[2]	= sbgStreamBufferReadInt32LE(pInputStream);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fe63 	bl	8004cf0 <sbgStreamBufferReadInt32LE>
 800502a:	4602      	mov	r2, r0
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	611a      	str	r2, [r3, #16]

	pOutputData->deltaAngle[0]		= sbgStreamBufferReadInt32LE(pInputStream);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fe5d 	bl	8004cf0 <sbgStreamBufferReadInt32LE>
 8005036:	4602      	mov	r2, r0
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	615a      	str	r2, [r3, #20]
	pOutputData->deltaAngle[1]		= sbgStreamBufferReadInt32LE(pInputStream);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff fe57 	bl	8004cf0 <sbgStreamBufferReadInt32LE>
 8005042:	4602      	mov	r2, r0
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	619a      	str	r2, [r3, #24]
	pOutputData->deltaAngle[2]		= sbgStreamBufferReadInt32LE(pInputStream);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fe51 	bl	8004cf0 <sbgStreamBufferReadInt32LE>
 800504e:	4602      	mov	r2, r0
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	61da      	str	r2, [r3, #28]

	pOutputData->temperature		= sbgStreamBufferReadInt16LE(pInputStream);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff fdcf 	bl	8004bf8 <sbgStreamBufferReadInt16LE>
 800505a:	4603      	mov	r3, r0
 800505c:	461a      	mov	r2, r3
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	841a      	strh	r2, [r3, #32]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fd54 	bl	8004b10 <sbgStreamBufferGetLastError>
 8005068:	4603      	mov	r3, r0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	0800ae54 	.word	0x0800ae54
 8005078:	0800d1bc 	.word	0x0800d1bc
 800507c:	0800ae18 	.word	0x0800ae18
 8005080:	0800ae64 	.word	0x0800ae64

08005084 <sbgEComBinaryLogParseFastImuData>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseFastImuData(SbgStreamBuffer *pInputStream, SbgLogFastImuData *pOutputData)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <sbgEComBinaryLogParseFastImuData+0x1c>
 8005094:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <sbgEComBinaryLogParseFastImuData+0x10c>)
 8005096:	4a3f      	ldr	r2, [pc, #252]	; (8005194 <sbgEComBinaryLogParseFastImuData+0x110>)
 8005098:	21a0      	movs	r1, #160	; 0xa0
 800509a:	483f      	ldr	r0, [pc, #252]	; (8005198 <sbgEComBinaryLogParseFastImuData+0x114>)
 800509c:	f003 fed8 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <sbgEComBinaryLogParseFastImuData+0x2e>
 80050a6:	4b3d      	ldr	r3, [pc, #244]	; (800519c <sbgEComBinaryLogParseFastImuData+0x118>)
 80050a8:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <sbgEComBinaryLogParseFastImuData+0x110>)
 80050aa:	21a1      	movs	r1, #161	; 0xa1
 80050ac:	483a      	ldr	r0, [pc, #232]	; (8005198 <sbgEComBinaryLogParseFastImuData+0x114>)
 80050ae:	f003 fecf 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fe6a 	bl	8004d8c <sbgStreamBufferReadUint32LE>
 80050b8:	4602      	mov	r2, r0
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint16LE(pInputStream);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fdd8 	bl	8004c74 <sbgStreamBufferReadUint16LE>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	809a      	strh	r2, [r3, #4]
				
	pOutputData->accelerometers[0]	= (float)sbgStreamBufferReadInt16LE(pInputStream) * 0.01f;
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fd93 	bl	8004bf8 <sbgStreamBufferReadInt16LE>
 80050d2:	4603      	mov	r3, r0
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050dc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80051a0 <sbgEComBinaryLogParseFastImuData+0x11c>
 80050e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->accelerometers[1]	= (float)sbgStreamBufferReadInt16LE(pInputStream) * 0.01f;
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff fd84 	bl	8004bf8 <sbgStreamBufferReadInt16LE>
 80050f0:	4603      	mov	r3, r0
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80051a0 <sbgEComBinaryLogParseFastImuData+0x11c>
 80050fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->accelerometers[2]	= (float)sbgStreamBufferReadInt16LE(pInputStream) * 0.01f;
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fd75 	bl	8004bf8 <sbgStreamBufferReadInt16LE>
 800510e:	4603      	mov	r3, r0
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005118:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80051a0 <sbgEComBinaryLogParseFastImuData+0x11c>
 800511c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	edc3 7a04 	vstr	s15, [r3, #16]

	pOutputData->gyroscopes[0]		= (float)sbgStreamBufferReadInt16LE(pInputStream) * 0.001f;
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fd66 	bl	8004bf8 <sbgStreamBufferReadInt16LE>
 800512c:	4603      	mov	r3, r0
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005136:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80051a4 <sbgEComBinaryLogParseFastImuData+0x120>
 800513a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->gyroscopes[1]		= (float)sbgStreamBufferReadInt16LE(pInputStream) * 0.001f;
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fd57 	bl	8004bf8 <sbgStreamBufferReadInt16LE>
 800514a:	4603      	mov	r3, r0
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005154:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80051a4 <sbgEComBinaryLogParseFastImuData+0x120>
 8005158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	edc3 7a06 	vstr	s15, [r3, #24]
	pOutputData->gyroscopes[2]		= (float)sbgStreamBufferReadInt16LE(pInputStream) * 0.001f;
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fd48 	bl	8004bf8 <sbgStreamBufferReadInt16LE>
 8005168:	4603      	mov	r3, r0
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005172:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80051a4 <sbgEComBinaryLogParseFastImuData+0x120>
 8005176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	edc3 7a07 	vstr	s15, [r3, #28]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff fcc5 	bl	8004b10 <sbgStreamBufferGetLastError>
 8005186:	4603      	mov	r3, r0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	0800ae54 	.word	0x0800ae54
 8005194:	0800d214 	.word	0x0800d214
 8005198:	0800ae18 	.word	0x0800ae18
 800519c:	0800ae64 	.word	0x0800ae64
 80051a0:	3c23d70a 	.word	0x3c23d70a
 80051a4:	3a83126f 	.word	0x3a83126f

080051a8 <sbgStreamBufferGetLastError>:
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <sbgStreamBufferGetLastError+0x1c>
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <sbgStreamBufferGetLastError+0x28>)
 80051b8:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <sbgStreamBufferGetLastError+0x2c>)
 80051ba:	f240 111d 	movw	r1, #285	; 0x11d
 80051be:	4806      	ldr	r0, [pc, #24]	; (80051d8 <sbgStreamBufferGetLastError+0x30>)
 80051c0:	f003 fe46 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7c1b      	ldrb	r3, [r3, #16]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	0800ae8c 	.word	0x0800ae8c
 80051d4:	0800d2f8 	.word	0x0800d2f8
 80051d8:	0800ae94 	.word	0x0800ae94

080051dc <sbgStreamBufferGetSize>:
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <sbgStreamBufferGetSize+0x1c>
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <sbgStreamBufferGetSize+0x28>)
 80051ec:	4a06      	ldr	r2, [pc, #24]	; (8005208 <sbgStreamBufferGetSize+0x2c>)
 80051ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80051f2:	4806      	ldr	r0, [pc, #24]	; (800520c <sbgStreamBufferGetSize+0x30>)
 80051f4:	f003 fe2c 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	0800ae8c 	.word	0x0800ae8c
 8005208:	0800d28c 	.word	0x0800d28c
 800520c:	0800ae94 	.word	0x0800ae94

08005210 <sbgStreamBufferGetLength>:
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <sbgStreamBufferGetLength+0x1c>
 800521e:	4b08      	ldr	r3, [pc, #32]	; (8005240 <sbgStreamBufferGetLength+0x30>)
 8005220:	4a08      	ldr	r2, [pc, #32]	; (8005244 <sbgStreamBufferGetLength+0x34>)
 8005222:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8005226:	4808      	ldr	r0, [pc, #32]	; (8005248 <sbgStreamBufferGetLength+0x38>)
 8005228:	f003 fe12 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	461a      	mov	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	1ad3      	subs	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	0800ae8c 	.word	0x0800ae8c
 8005244:	0800d2a4 	.word	0x0800d2a4
 8005248:	0800ae94 	.word	0x0800ae94

0800524c <sbgStreamBufferGetSpace>:
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <sbgStreamBufferGetSpace+0x1c>
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <sbgStreamBufferGetSpace+0x38>)
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <sbgStreamBufferGetSpace+0x3c>)
 800525e:	f240 1167 	movw	r1, #359	; 0x167
 8005262:	480a      	ldr	r0, [pc, #40]	; (800528c <sbgStreamBufferGetSpace+0x40>)
 8005264:	f003 fdf4 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ffb7 	bl	80051dc <sbgStreamBufferGetSize>
 800526e:	4604      	mov	r4, r0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ffcd 	bl	8005210 <sbgStreamBufferGetLength>
 8005276:	4603      	mov	r3, r0
 8005278:	1ae3      	subs	r3, r4, r3
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}
 8005282:	bf00      	nop
 8005284:	0800ae8c 	.word	0x0800ae8c
 8005288:	0800d274 	.word	0x0800d274
 800528c:	0800ae94 	.word	0x0800ae94

08005290 <sbgStreamBufferReadBuffer>:
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
	assert(pHandle);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <sbgStreamBufferReadBuffer+0x20>
 80052a2:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <sbgStreamBufferReadBuffer+0x80>)
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <sbgStreamBufferReadBuffer+0x84>)
 80052a6:	f240 2172 	movw	r1, #626	; 0x272
 80052aa:	481b      	ldr	r0, [pc, #108]	; (8005318 <sbgStreamBufferReadBuffer+0x88>)
 80052ac:	f003 fdd0 	bl	8008e50 <__assert_func>
	assert((pBuffer) || (numBytesToRead == 0));
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <sbgStreamBufferReadBuffer+0x3a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <sbgStreamBufferReadBuffer+0x3a>
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <sbgStreamBufferReadBuffer+0x8c>)
 80052be:	4a15      	ldr	r2, [pc, #84]	; (8005314 <sbgStreamBufferReadBuffer+0x84>)
 80052c0:	f240 2173 	movw	r1, #627	; 0x273
 80052c4:	4814      	ldr	r0, [pc, #80]	; (8005318 <sbgStreamBufferReadBuffer+0x88>)
 80052c6:	f003 fdc3 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	7c1b      	ldrb	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d117      	bne.n	8005302 <sbgStreamBufferReadBuffer+0x72>
		if (sbgStreamBufferGetSpace(pHandle) >= numBytesToRead)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ffba 	bl	800524c <sbgStreamBufferGetSpace>
 80052d8:	4602      	mov	r2, r0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4293      	cmp	r3, r2
 80052de:	d80d      	bhi.n	80052fc <sbgStreamBufferReadBuffer+0x6c>
			memcpy(pBuffer, pHandle->pCurrentPtr, numBytesToRead);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4619      	mov	r1, r3
 80052e8:	68b8      	ldr	r0, [r7, #8]
 80052ea:	f004 f83b 	bl	8009364 <memcpy>
			pHandle->pCurrentPtr += numBytesToRead;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	441a      	add	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	e002      	b.n	8005302 <sbgStreamBufferReadBuffer+0x72>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2208      	movs	r2, #8
 8005300:	741a      	strb	r2, [r3, #16]
	return pHandle->errorCode;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	7c1b      	ldrb	r3, [r3, #16]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	0800ae8c 	.word	0x0800ae8c
 8005314:	0800d338 	.word	0x0800d338
 8005318:	0800ae94 	.word	0x0800ae94
 800531c:	0800aed0 	.word	0x0800aed0

08005320 <sbgStreamBufferReadUint16LE>:
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <sbgStreamBufferReadUint16LE+0x1a>
 800532e:	4b18      	ldr	r3, [pc, #96]	; (8005390 <sbgStreamBufferReadUint16LE+0x70>)
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <sbgStreamBufferReadUint16LE+0x74>)
 8005332:	2179      	movs	r1, #121	; 0x79
 8005334:	4818      	ldr	r0, [pc, #96]	; (8005398 <sbgStreamBufferReadUint16LE+0x78>)
 8005336:	f003 fd8b 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	7c1b      	ldrb	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d121      	bne.n	8005386 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ff82 	bl	800524c <sbgStreamBufferGetSpace>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d918      	bls.n	8005380 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	60d1      	str	r1, [r2, #12]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	60d1      	str	r1, [r2, #12]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 800536e:	89bb      	ldrh	r3, [r7, #12]
 8005370:	b21a      	sxth	r2, r3
 8005372:	89fb      	ldrh	r3, [r7, #14]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	b21b      	sxth	r3, r3
 8005378:	4313      	orrs	r3, r2
 800537a:	b21b      	sxth	r3, r3
 800537c:	b29b      	uxth	r3, r3
 800537e:	e003      	b.n	8005388 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2208      	movs	r2, #8
 8005384:	741a      	strb	r2, [r3, #16]
	return 0;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	0800ae8c 	.word	0x0800ae8c
 8005394:	0800d2c0 	.word	0x0800d2c0
 8005398:	0800af18 	.word	0x0800af18

0800539c <sbgStreamBufferReadUint32LE>:
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <sbgStreamBufferReadUint32LE+0x1c>
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <sbgStreamBufferReadUint32LE+0x90>)
 80053ac:	4a20      	ldr	r2, [pc, #128]	; (8005430 <sbgStreamBufferReadUint32LE+0x94>)
 80053ae:	f240 1189 	movw	r1, #393	; 0x189
 80053b2:	4820      	ldr	r0, [pc, #128]	; (8005434 <sbgStreamBufferReadUint32LE+0x98>)
 80053b4:	f003 fd4c 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7c1b      	ldrb	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d12f      	bne.n	8005420 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ff43 	bl	800524c <sbgStreamBufferGetSpace>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d926      	bls.n	800541a <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	1c59      	adds	r1, r3, #1
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	60d1      	str	r1, [r2, #12]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	1c59      	adds	r1, r3, #1
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	60d1      	str	r1, [r2, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	1c59      	adds	r1, r3, #1
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	60d1      	str	r1, [r2, #12]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	60d1      	str	r1, [r2, #12]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	431a      	orrs	r2, r3
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	4313      	orrs	r3, r2
 8005418:	e003      	b.n	8005422 <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2208      	movs	r2, #8
 800541e:	741a      	strb	r2, [r3, #16]
	return 0;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	0800ae8c 	.word	0x0800ae8c
 8005430:	0800d258 	.word	0x0800d258
 8005434:	0800af18 	.word	0x0800af18

08005438 <sbgStreamBufferReadFloatLE>:
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <sbgStreamBufferReadFloatLE+0x1c>
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <sbgStreamBufferReadFloatLE+0x58>)
 8005448:	4a12      	ldr	r2, [pc, #72]	; (8005494 <sbgStreamBufferReadFloatLE+0x5c>)
 800544a:	f240 4139 	movw	r1, #1081	; 0x439
 800544e:	4812      	ldr	r0, [pc, #72]	; (8005498 <sbgStreamBufferReadFloatLE+0x60>)
 8005450:	f003 fcfe 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	7c1b      	ldrb	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10f      	bne.n	800547c <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fef5 	bl	800524c <sbgStreamBufferGetSpace>
 8005462:	4603      	mov	r3, r0
 8005464:	2b03      	cmp	r3, #3
 8005466:	d906      	bls.n	8005476 <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ff97 	bl	800539c <sbgStreamBufferReadUint32LE>
 800546e:	4603      	mov	r3, r0
 8005470:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	e004      	b.n	8005480 <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2208      	movs	r2, #8
 800547a:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 800547c:	f04f 0300 	mov.w	r3, #0
}
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eeb0 0a67 	vmov.f32	s0, s15
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	0800ae8c 	.word	0x0800ae8c
 8005494:	0800d2dc 	.word	0x0800d2dc
 8005498:	0800af18 	.word	0x0800af18

0800549c <sbgEComBinaryLogParseMagData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseMagData(SbgStreamBuffer *pInputStream, SbgLogMag *pOutputData)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <sbgEComBinaryLogParseMagData+0x1c>
 80054ac:	4b29      	ldr	r3, [pc, #164]	; (8005554 <sbgEComBinaryLogParseMagData+0xb8>)
 80054ae:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <sbgEComBinaryLogParseMagData+0xbc>)
 80054b0:	2109      	movs	r1, #9
 80054b2:	482a      	ldr	r0, [pc, #168]	; (800555c <sbgEComBinaryLogParseMagData+0xc0>)
 80054b4:	f003 fccc 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <sbgEComBinaryLogParseMagData+0x2e>
 80054be:	4b28      	ldr	r3, [pc, #160]	; (8005560 <sbgEComBinaryLogParseMagData+0xc4>)
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <sbgEComBinaryLogParseMagData+0xbc>)
 80054c2:	210a      	movs	r1, #10
 80054c4:	4825      	ldr	r0, [pc, #148]	; (800555c <sbgEComBinaryLogParseMagData+0xc0>)
 80054c6:	f003 fcc3 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ff66 	bl	800539c <sbgStreamBufferReadUint32LE>
 80054d0:	4602      	mov	r2, r0
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint16LE(pInputStream);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff ff22 	bl	8005320 <sbgStreamBufferReadUint16LE>
 80054dc:	4603      	mov	r3, r0
 80054de:	461a      	mov	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	809a      	strh	r2, [r3, #4]

	pOutputData->magnetometers[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ffa7 	bl	8005438 <sbgStreamBufferReadFloatLE>
 80054ea:	eef0 7a40 	vmov.f32	s15, s0
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	edc3 7a02 	vstr	s15, [r3, #8]
	pOutputData->magnetometers[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ff9f 	bl	8005438 <sbgStreamBufferReadFloatLE>
 80054fa:	eef0 7a40 	vmov.f32	s15, s0
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->magnetometers[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ff97 	bl	8005438 <sbgStreamBufferReadFloatLE>
 800550a:	eef0 7a40 	vmov.f32	s15, s0
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	edc3 7a04 	vstr	s15, [r3, #16]
				
	pOutputData->accelerometers[0]	= sbgStreamBufferReadFloatLE(pInputStream);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff ff8f 	bl	8005438 <sbgStreamBufferReadFloatLE>
 800551a:	eef0 7a40 	vmov.f32	s15, s0
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	edc3 7a05 	vstr	s15, [r3, #20]
	pOutputData->accelerometers[1]	= sbgStreamBufferReadFloatLE(pInputStream);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff87 	bl	8005438 <sbgStreamBufferReadFloatLE>
 800552a:	eef0 7a40 	vmov.f32	s15, s0
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	edc3 7a06 	vstr	s15, [r3, #24]
	pOutputData->accelerometers[2]	= sbgStreamBufferReadFloatLE(pInputStream);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff7f 	bl	8005438 <sbgStreamBufferReadFloatLE>
 800553a:	eef0 7a40 	vmov.f32	s15, s0
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	edc3 7a07 	vstr	s15, [r3, #28]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fe2f 	bl	80051a8 <sbgStreamBufferGetLastError>
 800554a:	4603      	mov	r3, r0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	0800af50 	.word	0x0800af50
 8005558:	0800d238 	.word	0x0800d238
 800555c:	0800af60 	.word	0x0800af60
 8005560:	0800af94 	.word	0x0800af94

08005564 <sbgEComBinaryLogParseMagCalibData>:
	//
	return sbgStreamBufferGetLastError(pOutputStream);
}

SbgErrorCode sbgEComBinaryLogParseMagCalibData(SbgStreamBuffer *pInputStream, SbgLogMagCalib *pOutputData)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <sbgEComBinaryLogParseMagCalibData+0x1c>
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <sbgEComBinaryLogParseMagCalibData+0x60>)
 8005576:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <sbgEComBinaryLogParseMagCalibData+0x64>)
 8005578:	213b      	movs	r1, #59	; 0x3b
 800557a:	4814      	ldr	r0, [pc, #80]	; (80055cc <sbgEComBinaryLogParseMagCalibData+0x68>)
 800557c:	f003 fc68 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d105      	bne.n	8005592 <sbgEComBinaryLogParseMagCalibData+0x2e>
 8005586:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <sbgEComBinaryLogParseMagCalibData+0x6c>)
 8005588:	4a0f      	ldr	r2, [pc, #60]	; (80055c8 <sbgEComBinaryLogParseMagCalibData+0x64>)
 800558a:	213c      	movs	r1, #60	; 0x3c
 800558c:	480f      	ldr	r0, [pc, #60]	; (80055cc <sbgEComBinaryLogParseMagCalibData+0x68>)
 800558e:	f003 fc5f 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp	= sbgStreamBufferReadUint32LE(pInputStream);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ff02 	bl	800539c <sbgStreamBufferReadUint32LE>
 8005598:	4602      	mov	r2, r0
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	601a      	str	r2, [r3, #0]
	pOutputData->reserved	= sbgStreamBufferReadUint16LE(pInputStream);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff febe 	bl	8005320 <sbgStreamBufferReadUint16LE>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	809a      	strh	r2, [r3, #4]

	//
	// Read the raw magnetic calibration data buffer
	//
	return sbgStreamBufferReadBuffer(pInputStream, pOutputData->magData, sizeof(pOutputData->magData));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3306      	adds	r3, #6
 80055b0:	2210      	movs	r2, #16
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fe6b 	bl	8005290 <sbgStreamBufferReadBuffer>
 80055ba:	4603      	mov	r3, r0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	0800af50 	.word	0x0800af50
 80055c8:	0800d314 	.word	0x0800d314
 80055cc:	0800af60 	.word	0x0800af60
 80055d0:	0800af94 	.word	0x0800af94

080055d4 <sbgStreamBufferGetLastError>:
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <sbgStreamBufferGetLastError+0x1c>
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <sbgStreamBufferGetLastError+0x28>)
 80055e4:	4a06      	ldr	r2, [pc, #24]	; (8005600 <sbgStreamBufferGetLastError+0x2c>)
 80055e6:	f240 111d 	movw	r1, #285	; 0x11d
 80055ea:	4806      	ldr	r0, [pc, #24]	; (8005604 <sbgStreamBufferGetLastError+0x30>)
 80055ec:	f003 fc30 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	7c1b      	ldrb	r3, [r3, #16]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	0800afbc 	.word	0x0800afbc
 8005600:	0800d418 	.word	0x0800d418
 8005604:	0800afc4 	.word	0x0800afc4

08005608 <sbgStreamBufferGetSize>:
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <sbgStreamBufferGetSize+0x1c>
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <sbgStreamBufferGetSize+0x28>)
 8005618:	4a06      	ldr	r2, [pc, #24]	; (8005634 <sbgStreamBufferGetSize+0x2c>)
 800561a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800561e:	4806      	ldr	r0, [pc, #24]	; (8005638 <sbgStreamBufferGetSize+0x30>)
 8005620:	f003 fc16 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	0800afbc 	.word	0x0800afbc
 8005634:	0800d3ac 	.word	0x0800d3ac
 8005638:	0800afc4 	.word	0x0800afc4

0800563c <sbgStreamBufferGetLength>:
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <sbgStreamBufferGetLength+0x1c>
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <sbgStreamBufferGetLength+0x30>)
 800564c:	4a08      	ldr	r2, [pc, #32]	; (8005670 <sbgStreamBufferGetLength+0x34>)
 800564e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8005652:	4808      	ldr	r0, [pc, #32]	; (8005674 <sbgStreamBufferGetLength+0x38>)
 8005654:	f003 fbfc 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	461a      	mov	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	1ad3      	subs	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	0800afbc 	.word	0x0800afbc
 8005670:	0800d3c4 	.word	0x0800d3c4
 8005674:	0800afc4 	.word	0x0800afc4

08005678 <sbgStreamBufferGetSpace>:
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <sbgStreamBufferGetSpace+0x1c>
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <sbgStreamBufferGetSpace+0x38>)
 8005688:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <sbgStreamBufferGetSpace+0x3c>)
 800568a:	f240 1167 	movw	r1, #359	; 0x167
 800568e:	480a      	ldr	r0, [pc, #40]	; (80056b8 <sbgStreamBufferGetSpace+0x40>)
 8005690:	f003 fbde 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff ffb7 	bl	8005608 <sbgStreamBufferGetSize>
 800569a:	4604      	mov	r4, r0
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ffcd 	bl	800563c <sbgStreamBufferGetLength>
 80056a2:	4603      	mov	r3, r0
 80056a4:	1ae3      	subs	r3, r4, r3
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	0800afbc 	.word	0x0800afbc
 80056b4:	0800d394 	.word	0x0800d394
 80056b8:	0800afc4 	.word	0x0800afc4

080056bc <sbgStreamBufferReadUint16LE>:
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <sbgStreamBufferReadUint16LE+0x1a>
 80056ca:	4b18      	ldr	r3, [pc, #96]	; (800572c <sbgStreamBufferReadUint16LE+0x70>)
 80056cc:	4a18      	ldr	r2, [pc, #96]	; (8005730 <sbgStreamBufferReadUint16LE+0x74>)
 80056ce:	2179      	movs	r1, #121	; 0x79
 80056d0:	4818      	ldr	r0, [pc, #96]	; (8005734 <sbgStreamBufferReadUint16LE+0x78>)
 80056d2:	f003 fbbd 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c1b      	ldrb	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d121      	bne.n	8005722 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff ffca 	bl	8005678 <sbgStreamBufferGetSpace>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d918      	bls.n	800571c <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	60d1      	str	r1, [r2, #12]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	60d1      	str	r1, [r2, #12]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 800570a:	89bb      	ldrh	r3, [r7, #12]
 800570c:	b21a      	sxth	r2, r3
 800570e:	89fb      	ldrh	r3, [r7, #14]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	b21b      	sxth	r3, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	b21b      	sxth	r3, r3
 8005718:	b29b      	uxth	r3, r3
 800571a:	e003      	b.n	8005724 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2208      	movs	r2, #8
 8005720:	741a      	strb	r2, [r3, #16]
	return 0;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	0800afbc 	.word	0x0800afbc
 8005730:	0800d3e0 	.word	0x0800d3e0
 8005734:	0800b000 	.word	0x0800b000

08005738 <sbgStreamBufferReadUint32LE>:
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <sbgStreamBufferReadUint32LE+0x1c>
 8005746:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <sbgStreamBufferReadUint32LE+0x90>)
 8005748:	4a20      	ldr	r2, [pc, #128]	; (80057cc <sbgStreamBufferReadUint32LE+0x94>)
 800574a:	f240 1189 	movw	r1, #393	; 0x189
 800574e:	4820      	ldr	r0, [pc, #128]	; (80057d0 <sbgStreamBufferReadUint32LE+0x98>)
 8005750:	f003 fb7e 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7c1b      	ldrb	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d12f      	bne.n	80057bc <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff ff8b 	bl	8005678 <sbgStreamBufferGetSpace>
 8005762:	4603      	mov	r3, r0
 8005764:	2b03      	cmp	r3, #3
 8005766:	d926      	bls.n	80057b6 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	1c59      	adds	r1, r3, #1
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	60d1      	str	r1, [r2, #12]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	1c59      	adds	r1, r3, #1
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	60d1      	str	r1, [r2, #12]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	60d1      	str	r1, [r2, #12]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	1c59      	adds	r1, r3, #1
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	60d1      	str	r1, [r2, #12]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	431a      	orrs	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	431a      	orrs	r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	061b      	lsls	r3, r3, #24
 80057b2:	4313      	orrs	r3, r2
 80057b4:	e003      	b.n	80057be <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2208      	movs	r2, #8
 80057ba:	741a      	strb	r2, [r3, #16]
	return 0;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	0800afbc 	.word	0x0800afbc
 80057cc:	0800d378 	.word	0x0800d378
 80057d0:	0800b000 	.word	0x0800b000

080057d4 <sbgStreamBufferReadFloatLE>:
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <sbgStreamBufferReadFloatLE+0x1c>
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <sbgStreamBufferReadFloatLE+0x58>)
 80057e4:	4a12      	ldr	r2, [pc, #72]	; (8005830 <sbgStreamBufferReadFloatLE+0x5c>)
 80057e6:	f240 4139 	movw	r1, #1081	; 0x439
 80057ea:	4812      	ldr	r0, [pc, #72]	; (8005834 <sbgStreamBufferReadFloatLE+0x60>)
 80057ec:	f003 fb30 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	7c1b      	ldrb	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10f      	bne.n	8005818 <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ff3d 	bl	8005678 <sbgStreamBufferGetSpace>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b03      	cmp	r3, #3
 8005802:	d906      	bls.n	8005812 <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff97 	bl	8005738 <sbgStreamBufferReadUint32LE>
 800580a:	4603      	mov	r3, r0
 800580c:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	e004      	b.n	800581c <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2208      	movs	r2, #8
 8005816:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 8005818:	f04f 0300 	mov.w	r3, #0
}
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eeb0 0a67 	vmov.f32	s0, s15
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	0800afbc 	.word	0x0800afbc
 8005830:	0800d3fc 	.word	0x0800d3fc
 8005834:	0800b000 	.word	0x0800b000

08005838 <sbgEComBinaryLogParseOdometerData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseOdometerData(SbgStreamBuffer *pInputStream, SbgLogOdometerData *pOutputData)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <sbgEComBinaryLogParseOdometerData+0x1c>
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <sbgEComBinaryLogParseOdometerData+0x68>)
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <sbgEComBinaryLogParseOdometerData+0x6c>)
 800584c:	2109      	movs	r1, #9
 800584e:	4816      	ldr	r0, [pc, #88]	; (80058a8 <sbgEComBinaryLogParseOdometerData+0x70>)
 8005850:	f003 fafe 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <sbgEComBinaryLogParseOdometerData+0x2e>
 800585a:	4b14      	ldr	r3, [pc, #80]	; (80058ac <sbgEComBinaryLogParseOdometerData+0x74>)
 800585c:	4a11      	ldr	r2, [pc, #68]	; (80058a4 <sbgEComBinaryLogParseOdometerData+0x6c>)
 800585e:	210a      	movs	r1, #10
 8005860:	4811      	ldr	r0, [pc, #68]	; (80058a8 <sbgEComBinaryLogParseOdometerData+0x70>)
 8005862:	f003 faf5 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp	= sbgStreamBufferReadUint32LE(pInputStream);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ff66 	bl	8005738 <sbgStreamBufferReadUint32LE>
 800586c:	4602      	mov	r2, r0
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	601a      	str	r2, [r3, #0]
	pOutputData->status		= sbgStreamBufferReadUint16LE(pInputStream);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff22 	bl	80056bc <sbgStreamBufferReadUint16LE>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	809a      	strh	r2, [r3, #4]

	pOutputData->velocity	= sbgStreamBufferReadFloatLE(pInputStream);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ffa7 	bl	80057d4 <sbgStreamBufferReadFloatLE>
 8005886:	eef0 7a40 	vmov.f32	s15, s0
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	edc3 7a02 	vstr	s15, [r3, #8]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fe9f 	bl	80055d4 <sbgStreamBufferGetLastError>
 8005896:	4603      	mov	r3, r0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	0800b038 	.word	0x0800b038
 80058a4:	0800d354 	.word	0x0800d354
 80058a8:	0800b048 	.word	0x0800b048
 80058ac:	0800b084 	.word	0x0800b084

080058b0 <sbgStreamBufferGetSize>:
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <sbgStreamBufferGetSize+0x1c>
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <sbgStreamBufferGetSize+0x28>)
 80058c0:	4a06      	ldr	r2, [pc, #24]	; (80058dc <sbgStreamBufferGetSize+0x2c>)
 80058c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058c6:	4806      	ldr	r0, [pc, #24]	; (80058e0 <sbgStreamBufferGetSize+0x30>)
 80058c8:	f003 fac2 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	0800b0ac 	.word	0x0800b0ac
 80058dc:	0800d454 	.word	0x0800d454
 80058e0:	0800b0b4 	.word	0x0800b0b4

080058e4 <sbgStreamBufferGetLength>:
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <sbgStreamBufferGetLength+0x1c>
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <sbgStreamBufferGetLength+0x30>)
 80058f4:	4a08      	ldr	r2, [pc, #32]	; (8005918 <sbgStreamBufferGetLength+0x34>)
 80058f6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80058fa:	4808      	ldr	r0, [pc, #32]	; (800591c <sbgStreamBufferGetLength+0x38>)
 80058fc:	f003 faa8 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	461a      	mov	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	1ad3      	subs	r3, r2, r3
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	0800b0ac 	.word	0x0800b0ac
 8005918:	0800d4a0 	.word	0x0800d4a0
 800591c:	0800b0b4 	.word	0x0800b0b4

08005920 <sbgStreamBufferGetSpace>:
{
 8005920:	b590      	push	{r4, r7, lr}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <sbgStreamBufferGetSpace+0x1c>
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <sbgStreamBufferGetSpace+0x38>)
 8005930:	4a0a      	ldr	r2, [pc, #40]	; (800595c <sbgStreamBufferGetSpace+0x3c>)
 8005932:	f240 1167 	movw	r1, #359	; 0x167
 8005936:	480a      	ldr	r0, [pc, #40]	; (8005960 <sbgStreamBufferGetSpace+0x40>)
 8005938:	f003 fa8a 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ffb7 	bl	80058b0 <sbgStreamBufferGetSize>
 8005942:	4604      	mov	r4, r0
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ffcd 	bl	80058e4 <sbgStreamBufferGetLength>
 800594a:	4603      	mov	r3, r0
 800594c:	1ae3      	subs	r3, r4, r3
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bd90      	pop	{r4, r7, pc}
 8005956:	bf00      	nop
 8005958:	0800b0ac 	.word	0x0800b0ac
 800595c:	0800d488 	.word	0x0800d488
 8005960:	0800b0b4 	.word	0x0800b0b4

08005964 <sbgStreamBufferReadBuffer>:
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	assert(pHandle);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <sbgStreamBufferReadBuffer+0x20>
 8005976:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <sbgStreamBufferReadBuffer+0x80>)
 8005978:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <sbgStreamBufferReadBuffer+0x84>)
 800597a:	f240 2172 	movw	r1, #626	; 0x272
 800597e:	481b      	ldr	r0, [pc, #108]	; (80059ec <sbgStreamBufferReadBuffer+0x88>)
 8005980:	f003 fa66 	bl	8008e50 <__assert_func>
	assert((pBuffer) || (numBytesToRead == 0));
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <sbgStreamBufferReadBuffer+0x3a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d006      	beq.n	800599e <sbgStreamBufferReadBuffer+0x3a>
 8005990:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <sbgStreamBufferReadBuffer+0x8c>)
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <sbgStreamBufferReadBuffer+0x84>)
 8005994:	f240 2173 	movw	r1, #627	; 0x273
 8005998:	4814      	ldr	r0, [pc, #80]	; (80059ec <sbgStreamBufferReadBuffer+0x88>)
 800599a:	f003 fa59 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	7c1b      	ldrb	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d117      	bne.n	80059d6 <sbgStreamBufferReadBuffer+0x72>
		if (sbgStreamBufferGetSpace(pHandle) >= numBytesToRead)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff ffba 	bl	8005920 <sbgStreamBufferGetSpace>
 80059ac:	4602      	mov	r2, r0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d80d      	bhi.n	80059d0 <sbgStreamBufferReadBuffer+0x6c>
			memcpy(pBuffer, pHandle->pCurrentPtr, numBytesToRead);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4619      	mov	r1, r3
 80059bc:	68b8      	ldr	r0, [r7, #8]
 80059be:	f003 fcd1 	bl	8009364 <memcpy>
			pHandle->pCurrentPtr += numBytesToRead;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	441a      	add	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	e002      	b.n	80059d6 <sbgStreamBufferReadBuffer+0x72>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2208      	movs	r2, #8
 80059d4:	741a      	strb	r2, [r3, #16]
	return pHandle->errorCode;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	7c1b      	ldrb	r3, [r3, #16]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	0800b0ac 	.word	0x0800b0ac
 80059e8:	0800d46c 	.word	0x0800d46c
 80059ec:	0800b0b4 	.word	0x0800b0b4
 80059f0:	0800b0f0 	.word	0x0800b0f0

080059f4 <sbgEComBinaryLogParseRawData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseRawData(SbgStreamBuffer *pInputStream, SbgLogRawData *pOutputData)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
	SbgErrorCode	errorCode = SBG_NO_ERROR;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]
	size_t			payloadSize;

	assert(pInputStream);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d105      	bne.n	8005a14 <sbgEComBinaryLogParseRawData+0x20>
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <sbgEComBinaryLogParseRawData+0x6c>)
 8005a0a:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <sbgEComBinaryLogParseRawData+0x70>)
 8005a0c:	2110      	movs	r1, #16
 8005a0e:	4816      	ldr	r0, [pc, #88]	; (8005a68 <sbgEComBinaryLogParseRawData+0x74>)
 8005a10:	f003 fa1e 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <sbgEComBinaryLogParseRawData+0x32>
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <sbgEComBinaryLogParseRawData+0x78>)
 8005a1c:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <sbgEComBinaryLogParseRawData+0x70>)
 8005a1e:	2111      	movs	r1, #17
 8005a20:	4811      	ldr	r0, [pc, #68]	; (8005a68 <sbgEComBinaryLogParseRawData+0x74>)
 8005a22:	f003 fa15 	bl	8008e50 <__assert_func>

	payloadSize = sbgStreamBufferGetSize(pInputStream);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ff42 	bl	80058b0 <sbgStreamBufferGetSize>
 8005a2c:	60b8      	str	r0, [r7, #8]

	if (payloadSize <= SBG_ECOM_RAW_DATA_MAX_BUFFER_SIZE)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f640 72f6 	movw	r2, #4086	; 0xff6
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d80c      	bhi.n	8005a52 <sbgEComBinaryLogParseRawData+0x5e>
	{
		errorCode = sbgStreamBufferReadBuffer(pInputStream, pOutputData->rawBuffer, payloadSize);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ff90 	bl	8005964 <sbgStreamBufferReadBuffer>
 8005a44:	4603      	mov	r3, r0
 8005a46:	73fb      	strb	r3, [r7, #15]
		pOutputData->bufferSize = payloadSize;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	f8c3 2ff8 	str.w	r2, [r3, #4088]	; 0xff8
 8005a50:	e001      	b.n	8005a56 <sbgEComBinaryLogParseRawData+0x62>
	}
	else
	{
		errorCode = SBG_BUFFER_OVERFLOW;
 8005a52:	2308      	movs	r3, #8
 8005a54:	73fb      	strb	r3, [r7, #15]
	}

	return errorCode;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	0800b138 	.word	0x0800b138
 8005a64:	0800d434 	.word	0x0800d434
 8005a68:	0800b148 	.word	0x0800b148
 8005a6c:	0800b180 	.word	0x0800b180

08005a70 <sbgEComBinaryLogParseRtcmRawData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseRtcmRawData(SbgStreamBuffer *pInputStream, SbgLogRawData *pOutputData)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
	return sbgEComBinaryLogParseRawData(pInputStream, pOutputData);
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ffb9 	bl	80059f4 <sbgEComBinaryLogParseRawData>
 8005a82:	4603      	mov	r3, r0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <sbgStreamBufferGetLastError>:
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <sbgStreamBufferGetLastError+0x1c>
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <sbgStreamBufferGetLastError+0x28>)
 8005a9c:	4a06      	ldr	r2, [pc, #24]	; (8005ab8 <sbgStreamBufferGetLastError+0x2c>)
 8005a9e:	f240 111d 	movw	r1, #285	; 0x11d
 8005aa2:	4806      	ldr	r0, [pc, #24]	; (8005abc <sbgStreamBufferGetLastError+0x30>)
 8005aa4:	f003 f9d4 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7c1b      	ldrb	r3, [r3, #16]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	0800b1a8 	.word	0x0800b1a8
 8005ab8:	0800d5b4 	.word	0x0800d5b4
 8005abc:	0800b1b0 	.word	0x0800b1b0

08005ac0 <sbgStreamBufferGetSize>:
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <sbgStreamBufferGetSize+0x1c>
 8005ace:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <sbgStreamBufferGetSize+0x28>)
 8005ad0:	4a06      	ldr	r2, [pc, #24]	; (8005aec <sbgStreamBufferGetSize+0x2c>)
 8005ad2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ad6:	4806      	ldr	r0, [pc, #24]	; (8005af0 <sbgStreamBufferGetSize+0x30>)
 8005ad8:	f003 f9ba 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	0800b1a8 	.word	0x0800b1a8
 8005aec:	0800d580 	.word	0x0800d580
 8005af0:	0800b1b0 	.word	0x0800b1b0

08005af4 <sbgStreamBufferGetLength>:
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <sbgStreamBufferGetLength+0x1c>
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <sbgStreamBufferGetLength+0x30>)
 8005b04:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <sbgStreamBufferGetLength+0x34>)
 8005b06:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8005b0a:	4808      	ldr	r0, [pc, #32]	; (8005b2c <sbgStreamBufferGetLength+0x38>)
 8005b0c:	f003 f9a0 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	1ad3      	subs	r3, r2, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	0800b1a8 	.word	0x0800b1a8
 8005b28:	0800d598 	.word	0x0800d598
 8005b2c:	0800b1b0 	.word	0x0800b1b0

08005b30 <sbgStreamBufferGetSpace>:
{
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <sbgStreamBufferGetSpace+0x1c>
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <sbgStreamBufferGetSpace+0x38>)
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <sbgStreamBufferGetSpace+0x3c>)
 8005b42:	f240 1167 	movw	r1, #359	; 0x167
 8005b46:	480a      	ldr	r0, [pc, #40]	; (8005b70 <sbgStreamBufferGetSpace+0x40>)
 8005b48:	f003 f982 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffb7 	bl	8005ac0 <sbgStreamBufferGetSize>
 8005b52:	4604      	mov	r4, r0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ffcd 	bl	8005af4 <sbgStreamBufferGetLength>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	1ae3      	subs	r3, r4, r3
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd90      	pop	{r4, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	0800b1a8 	.word	0x0800b1a8
 8005b6c:	0800d568 	.word	0x0800d568
 8005b70:	0800b1b0 	.word	0x0800b1b0

08005b74 <sbgStreamBufferReadInt8>:
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <sbgStreamBufferReadInt8+0x1c>
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <sbgStreamBufferReadInt8+0x50>)
 8005b84:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <sbgStreamBufferReadInt8+0x54>)
 8005b86:	f240 11f1 	movw	r1, #497	; 0x1f1
 8005b8a:	4810      	ldr	r0, [pc, #64]	; (8005bcc <sbgStreamBufferReadInt8+0x58>)
 8005b8c:	f003 f960 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	7c1b      	ldrb	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d110      	bne.n	8005bba <sbgStreamBufferReadInt8+0x46>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(int8_t))
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ffc9 	bl	8005b30 <sbgStreamBufferGetSpace>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <sbgStreamBufferReadInt8+0x40>
			return *((int8_t*)(pHandle->pCurrentPtr++));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	1c59      	adds	r1, r3, #1
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	60d1      	str	r1, [r2, #12]
 8005bae:	f993 3000 	ldrsb.w	r3, [r3]
 8005bb2:	e003      	b.n	8005bbc <sbgStreamBufferReadInt8+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	741a      	strb	r2, [r3, #16]
	return 0;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	0800b1a8 	.word	0x0800b1a8
 8005bc8:	0800d638 	.word	0x0800d638
 8005bcc:	0800b1b0 	.word	0x0800b1b0

08005bd0 <sbgStreamBufferReadUint8>:
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <sbgStreamBufferReadUint8+0x1c>
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <sbgStreamBufferReadUint8+0x50>)
 8005be0:	4a10      	ldr	r2, [pc, #64]	; (8005c24 <sbgStreamBufferReadUint8+0x54>)
 8005be2:	f240 2119 	movw	r1, #537	; 0x219
 8005be6:	4810      	ldr	r0, [pc, #64]	; (8005c28 <sbgStreamBufferReadUint8+0x58>)
 8005be8:	f003 f932 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	7c1b      	ldrb	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10f      	bne.n	8005c14 <sbgStreamBufferReadUint8+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint8_t))
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff ff9b 	bl	8005b30 <sbgStreamBufferGetSpace>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <sbgStreamBufferReadUint8+0x3e>
			return *((uint8_t*)(pHandle->pCurrentPtr++));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	60d1      	str	r1, [r2, #12]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	e003      	b.n	8005c16 <sbgStreamBufferReadUint8+0x46>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2208      	movs	r2, #8
 8005c12:	741a      	strb	r2, [r3, #16]
	return 0;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	0800b1a8 	.word	0x0800b1a8
 8005c24:	0800d54c 	.word	0x0800d54c
 8005c28:	0800b1b0 	.word	0x0800b1b0

08005c2c <sbgStreamBufferReadUint16LE>:
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <sbgStreamBufferReadUint16LE+0x1a>
 8005c3a:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <sbgStreamBufferReadUint16LE+0x70>)
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <sbgStreamBufferReadUint16LE+0x74>)
 8005c3e:	2179      	movs	r1, #121	; 0x79
 8005c40:	4818      	ldr	r0, [pc, #96]	; (8005ca4 <sbgStreamBufferReadUint16LE+0x78>)
 8005c42:	f003 f905 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	7c1b      	ldrb	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d121      	bne.n	8005c92 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ff6e 	bl	8005b30 <sbgStreamBufferGetSpace>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d918      	bls.n	8005c8c <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	60d1      	str	r1, [r2, #12]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	1c59      	adds	r1, r3, #1
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	60d1      	str	r1, [r2, #12]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 8005c7a:	89bb      	ldrh	r3, [r7, #12]
 8005c7c:	b21a      	sxth	r2, r3
 8005c7e:	89fb      	ldrh	r3, [r7, #14]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b21b      	sxth	r3, r3
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	e003      	b.n	8005c94 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2208      	movs	r2, #8
 8005c90:	741a      	strb	r2, [r3, #16]
	return 0;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	0800b1a8 	.word	0x0800b1a8
 8005ca0:	0800d650 	.word	0x0800d650
 8005ca4:	0800b1ec 	.word	0x0800b1ec

08005ca8 <sbgStreamBufferReadUint32LE>:
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <sbgStreamBufferReadUint32LE+0x1c>
 8005cb6:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <sbgStreamBufferReadUint32LE+0x90>)
 8005cb8:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <sbgStreamBufferReadUint32LE+0x94>)
 8005cba:	f240 1189 	movw	r1, #393	; 0x189
 8005cbe:	4820      	ldr	r0, [pc, #128]	; (8005d40 <sbgStreamBufferReadUint32LE+0x98>)
 8005cc0:	f003 f8c6 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	7c1b      	ldrb	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d12f      	bne.n	8005d2c <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff2f 	bl	8005b30 <sbgStreamBufferGetSpace>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d926      	bls.n	8005d26 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	60d1      	str	r1, [r2, #12]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	1c59      	adds	r1, r3, #1
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	60d1      	str	r1, [r2, #12]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	1c59      	adds	r1, r3, #1
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	60d1      	str	r1, [r2, #12]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	60d1      	str	r1, [r2, #12]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	431a      	orrs	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	4313      	orrs	r3, r2
 8005d24:	e003      	b.n	8005d2e <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2208      	movs	r2, #8
 8005d2a:	741a      	strb	r2, [r3, #16]
	return 0;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	0800b1a8 	.word	0x0800b1a8
 8005d3c:	0800d6cc 	.word	0x0800d6cc
 8005d40:	0800b1ec 	.word	0x0800b1ec

08005d44 <sbgEComBinaryLogSatCheckHealthStatus>:
 *
 * \param[in]	healthStatus				Health status.
 * \return									SBG_NO_ERROR if successful.
 */
static SbgErrorCode sbgEComBinaryLogSatCheckHealthStatus(uint8_t healthStatus)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
	SbgErrorCode						 errorCode = SBG_INVALID_FRAME;
 8005d4e:	2304      	movs	r3, #4
 8005d50:	73fb      	strb	r3, [r7, #15]

	switch (healthStatus)
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d802      	bhi.n	8005d5e <sbgEComBinaryLogSatCheckHealthStatus+0x1a>
	{
	case SBG_ECOM_SAT_HEALTH_STATUS_UNKNOWN:
	case SBG_ECOM_SAT_HEALTH_STATUS_HEALTHY:
	case SBG_ECOM_SAT_HEALTH_STATUS_UNHEALTHY:
		errorCode = SBG_NO_ERROR;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]
		break;
 8005d5c:	bf00      	nop
	}

	if (errorCode != SBG_NO_ERROR)
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00d      	beq.n	8005d80 <sbgEComBinaryLogSatCheckHealthStatus+0x3c>
	{
		SBG_LOG_ERROR(errorCode, "invalid health status: %" PRIu8, healthStatus);
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	9303      	str	r3, [sp, #12]
 8005d68:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <sbgEComBinaryLogSatCheckHealthStatus+0x48>)
 8005d6a:	9302      	str	r3, [sp, #8]
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	9301      	str	r3, [sp, #4]
 8005d70:	2300      	movs	r3, #0
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <sbgEComBinaryLogSatCheckHealthStatus+0x4c>)
 8005d76:	226f      	movs	r2, #111	; 0x6f
 8005d78:	4906      	ldr	r1, [pc, #24]	; (8005d94 <sbgEComBinaryLogSatCheckHealthStatus+0x50>)
 8005d7a:	4807      	ldr	r0, [pc, #28]	; (8005d98 <sbgEComBinaryLogSatCheckHealthStatus+0x54>)
 8005d7c:	f7fc ffcc 	bl	8002d18 <sbgPlatformDebugLogMsg>
	}

	return errorCode;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	0800b260 	.word	0x0800b260
 8005d90:	0800b224 	.word	0x0800b224
 8005d94:	0800d4bc 	.word	0x0800d4bc
 8005d98:	0800b22c 	.word	0x0800b22c

08005d9c <sbgEComBinaryLogSatCheckTrackingStatus>:
 *
 * \param[in]	trackingStatus				Tracking status.
 * \return									SBG_NO_ERROR if successful.
 */
static SbgErrorCode sbgEComBinaryLogSatCheckTrackingStatus(uint8_t trackingStatus)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af04      	add	r7, sp, #16
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
	SbgErrorCode						 errorCode = SBG_INVALID_FRAME;
 8005da6:	2304      	movs	r3, #4
 8005da8:	73fb      	strb	r3, [r7, #15]

	switch (trackingStatus)
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d802      	bhi.n	8005db6 <sbgEComBinaryLogSatCheckTrackingStatus+0x1a>
	case SBG_ECOM_SAT_TRACKING_STATUS_SEARCHING:
	case SBG_ECOM_SAT_TRACKING_STATUS_TRACKING_UNKNOWN:
	case SBG_ECOM_SAT_TRACKING_STATUS_TRACKING_NOT_USED:
	case SBG_ECOM_SAT_TRACKING_STATUS_TRACKING_REJECTED:
	case SBG_ECOM_SAT_TRACKING_STATUS_TRACKING_USED:	
		errorCode = SBG_NO_ERROR;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
		break;
 8005db4:	bf00      	nop
	}

	if (errorCode != SBG_NO_ERROR)
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00d      	beq.n	8005dd8 <sbgEComBinaryLogSatCheckTrackingStatus+0x3c>
	{
		SBG_LOG_ERROR(errorCode, "invalid tracking status: %" PRIu8, trackingStatus);
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	9303      	str	r3, [sp, #12]
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <sbgEComBinaryLogSatCheckTrackingStatus+0x48>)
 8005dc2:	9302      	str	r3, [sp, #8]
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <sbgEComBinaryLogSatCheckTrackingStatus+0x4c>)
 8005dce:	228d      	movs	r2, #141	; 0x8d
 8005dd0:	4906      	ldr	r1, [pc, #24]	; (8005dec <sbgEComBinaryLogSatCheckTrackingStatus+0x50>)
 8005dd2:	4807      	ldr	r0, [pc, #28]	; (8005df0 <sbgEComBinaryLogSatCheckTrackingStatus+0x54>)
 8005dd4:	f7fc ffa0 	bl	8002d18 <sbgPlatformDebugLogMsg>
	}

	return errorCode;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	0800b27c 	.word	0x0800b27c
 8005de8:	0800b224 	.word	0x0800b224
 8005dec:	0800d4e4 	.word	0x0800d4e4
 8005df0:	0800b22c 	.word	0x0800b22c

08005df4 <sbgEComBinaryLogParseSignalData>:
 * \param[in]	pStreamBuffer				Stream buffer.
 * \param[out]	pSignalData					Signal data.
 * \return									SBG_NO_ERROR if successful.
 */
static SbgErrorCode sbgEComBinaryLogParseSignalData(SbgStreamBuffer *pStreamBuffer, SbgLogSatSignalData *pSignalData)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af04      	add	r7, sp, #16
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
	SbgErrorCode						 errorCode;
	uint8_t								 signalId;

	assert(pSignalData);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <sbgEComBinaryLogParseSignalData+0x1c>
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <sbgEComBinaryLogParseSignalData+0xc8>)
 8005e06:	4a2e      	ldr	r2, [pc, #184]	; (8005ec0 <sbgEComBinaryLogParseSignalData+0xcc>)
 8005e08:	21d4      	movs	r1, #212	; 0xd4
 8005e0a:	482e      	ldr	r0, [pc, #184]	; (8005ec4 <sbgEComBinaryLogParseSignalData+0xd0>)
 8005e0c:	f003 f820 	bl	8008e50 <__assert_func>

	signalId			= sbgStreamBufferReadUint8(pStreamBuffer);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fedd 	bl	8005bd0 <sbgStreamBufferReadUint8>
 8005e16:	4603      	mov	r3, r0
 8005e18:	73bb      	strb	r3, [r7, #14]
	pSignalData->flags	= sbgStreamBufferReadUint8(pStreamBuffer);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fed8 	bl	8005bd0 <sbgStreamBufferReadUint8>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	705a      	strb	r2, [r3, #1]
	pSignalData->snr	= sbgStreamBufferReadUint8(pStreamBuffer);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fed1 	bl	8005bd0 <sbgStreamBufferReadUint8>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	709a      	strb	r2, [r3, #2]

	errorCode = sbgStreamBufferGetLastError(pStreamBuffer);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fe28 	bl	8005a8c <sbgStreamBufferGetLastError>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]

	if (errorCode == SBG_NO_ERROR)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d135      	bne.n	8005eb2 <sbgEComBinaryLogParseSignalData+0xbe>
	{
		if (sbgEComSignalIdIsValid(signalId))
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fc29 	bl	80076a0 <sbgEComSignalIdIsValid>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01e      	beq.n	8005e92 <sbgEComBinaryLogParseSignalData+0x9e>
		{
			uint8_t								 healthStatus;

			pSignalData->id = signalId;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	7bba      	ldrb	r2, [r7, #14]
 8005e58:	701a      	strb	r2, [r3, #0]

			healthStatus = sbgEComBinaryLogSatGetField(pSignalData->flags, SBG_ECOM_LOG_SAT_HEALTH_STATUS_OFFSET, SBG_ECOM_LOG_SAT_HEALTH_STATUS_MASK);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	08db      	lsrs	r3, r3, #3
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	737b      	strb	r3, [r7, #13]

			errorCode = sbgEComBinaryLogSatCheckHealthStatus(healthStatus);
 8005e68:	7b7b      	ldrb	r3, [r7, #13]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ff6a 	bl	8005d44 <sbgEComBinaryLogSatCheckHealthStatus>
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]

			if (errorCode == SBG_NO_ERROR)
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11b      	bne.n	8005eb2 <sbgEComBinaryLogParseSignalData+0xbe>
			{
				uint8_t								 trackingStatus;

				trackingStatus = sbgEComBinaryLogSatGetField(pSignalData->flags, SBG_ECOM_LOG_SAT_TRACKING_STATUS_OFFSET, SBG_ECOM_LOG_SAT_TRACKING_STATUS_MASK);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	733b      	strb	r3, [r7, #12]

				errorCode = sbgEComBinaryLogSatCheckTrackingStatus(trackingStatus);
 8005e84:	7b3b      	ldrb	r3, [r7, #12]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff ff88 	bl	8005d9c <sbgEComBinaryLogSatCheckTrackingStatus>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	e00f      	b.n	8005eb2 <sbgEComBinaryLogParseSignalData+0xbe>
			}
		}
		else
		{
			errorCode = SBG_INVALID_FRAME;
 8005e92:	2304      	movs	r3, #4
 8005e94:	73fb      	strb	r3, [r7, #15]
			SBG_LOG_ERROR(errorCode, "invalid signal ID: %" PRIu8, signalId);
 8005e96:	7bbb      	ldrb	r3, [r7, #14]
 8005e98:	9303      	str	r3, [sp, #12]
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <sbgEComBinaryLogParseSignalData+0xd4>)
 8005e9c:	9302      	str	r3, [sp, #8]
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <sbgEComBinaryLogParseSignalData+0xd8>)
 8005ea8:	22f4      	movs	r2, #244	; 0xf4
 8005eaa:	4909      	ldr	r1, [pc, #36]	; (8005ed0 <sbgEComBinaryLogParseSignalData+0xdc>)
 8005eac:	4805      	ldr	r0, [pc, #20]	; (8005ec4 <sbgEComBinaryLogParseSignalData+0xd0>)
 8005eae:	f7fc ff33 	bl	8002d18 <sbgPlatformDebugLogMsg>
		}
	}

	return errorCode;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	0800b29c 	.word	0x0800b29c
 8005ec0:	0800d50c 	.word	0x0800d50c
 8005ec4:	0800b22c 	.word	0x0800b22c
 8005ec8:	0800b2a8 	.word	0x0800b2a8
 8005ecc:	0800b224 	.word	0x0800b224
 8005ed0:	0800d52c 	.word	0x0800d52c

08005ed4 <sbgEComBinaryLogSatCheckElevationStatus>:
 *
 * \param[in]	elevationStatus				Elevation status value.
 * \return									SBG_NO_ERROR if successful.
 */
static SbgErrorCode sbgEComBinaryLogSatCheckElevationStatus(uint8_t elevationStatus)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af04      	add	r7, sp, #16
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
	SbgErrorCode						 errorCode = SBG_INVALID_FRAME;
 8005ede:	2304      	movs	r3, #4
 8005ee0:	73fb      	strb	r3, [r7, #15]

	switch (elevationStatus)
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d802      	bhi.n	8005eee <sbgEComBinaryLogSatCheckElevationStatus+0x1a>
	{
	case SBG_ECOM_SAT_ELEVATION_STATUS_UNKNOWN:
	case SBG_ECOM_SAT_ELEVATION_STATUS_SETTING:
	case SBG_ECOM_SAT_ELEVATION_STATUS_RISING:
		errorCode = SBG_NO_ERROR;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73fb      	strb	r3, [r7, #15]
		break;
 8005eec:	bf00      	nop
	}

	if (errorCode != SBG_NO_ERROR)
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00e      	beq.n	8005f12 <sbgEComBinaryLogSatCheckElevationStatus+0x3e>
	{
		SBG_LOG_ERROR(errorCode, "invalid elevation status: %" PRIu8, elevationStatus);
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	9303      	str	r3, [sp, #12]
 8005ef8:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <sbgEComBinaryLogSatCheckElevationStatus+0x48>)
 8005efa:	9302      	str	r3, [sp, #8]
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	2300      	movs	r3, #0
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <sbgEComBinaryLogSatCheckElevationStatus+0x4c>)
 8005f06:	f44f 7288 	mov.w	r2, #272	; 0x110
 8005f0a:	4906      	ldr	r1, [pc, #24]	; (8005f24 <sbgEComBinaryLogSatCheckElevationStatus+0x50>)
 8005f0c:	4806      	ldr	r0, [pc, #24]	; (8005f28 <sbgEComBinaryLogSatCheckElevationStatus+0x54>)
 8005f0e:	f7fc ff03 	bl	8002d18 <sbgPlatformDebugLogMsg>
	}

	return errorCode;
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	0800b2c0 	.word	0x0800b2c0
 8005f20:	0800b224 	.word	0x0800b224
 8005f24:	0800d5d0 	.word	0x0800d5d0
 8005f28:	0800b22c 	.word	0x0800b22c

08005f2c <sbgEComBinaryLogParseSatData>:
 * \param[in]	pStreamBuffer				Stream buffer.
 * \param[out]	pSatGroupData				Satellite group data.
 * \return									SBG_NO_ERROR if successful.
 */
static SbgErrorCode sbgEComBinaryLogParseSatData(SbgStreamBuffer *pStreamBuffer, SbgLogSatData *pSatData)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af04      	add	r7, sp, #16
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
	SbgErrorCode						 errorCode;

	assert(pSatData);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <sbgEComBinaryLogParseSatData+0x1e>
 8005f3c:	4b76      	ldr	r3, [pc, #472]	; (8006118 <sbgEComBinaryLogParseSatData+0x1ec>)
 8005f3e:	4a77      	ldr	r2, [pc, #476]	; (800611c <sbgEComBinaryLogParseSatData+0x1f0>)
 8005f40:	f240 1121 	movw	r1, #289	; 0x121
 8005f44:	4876      	ldr	r0, [pc, #472]	; (8006120 <sbgEComBinaryLogParseSatData+0x1f4>)
 8005f46:	f002 ff83 	bl	8008e50 <__assert_func>

	pSatData->id					= sbgStreamBufferReadUint8(pStreamBuffer);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff fe40 	bl	8005bd0 <sbgStreamBufferReadUint8>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	701a      	strb	r2, [r3, #0]
	pSatData->elevation				= sbgStreamBufferReadInt8(pStreamBuffer);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fe0b 	bl	8005b74 <sbgStreamBufferReadInt8>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	461a      	mov	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	705a      	strb	r2, [r3, #1]
	pSatData->azimuth				= sbgStreamBufferReadUint16(pStreamBuffer);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fe60 	bl	8005c2c <sbgStreamBufferReadUint16LE>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	805a      	strh	r2, [r3, #2]
	pSatData->flags					= sbgStreamBufferReadUint16(pStreamBuffer);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff fe59 	bl	8005c2c <sbgStreamBufferReadUint16LE>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	809a      	strh	r2, [r3, #4]
	pSatData->nrSignals				= sbgStreamBufferReadUint8(pStreamBuffer);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fe24 	bl	8005bd0 <sbgStreamBufferReadUint8>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	609a      	str	r2, [r3, #8]
	pSatData->signalDataArraySize	= pSatData->nrSignals;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	60da      	str	r2, [r3, #12]

	errorCode = sbgStreamBufferGetLastError(pStreamBuffer);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fd77 	bl	8005a8c <sbgStreamBufferGetLastError>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75fb      	strb	r3, [r7, #23]

	if (errorCode == SBG_NO_ERROR)
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f040 80b2 	bne.w	800610e <sbgEComBinaryLogParseSatData+0x1e2>
	{
		if (pSatData->nrSignals <= SBG_ECOM_SAT_MAX_NR_SIGNALS)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	f200 809b 	bhi.w	80060ea <sbgEComBinaryLogParseSatData+0x1be>
		{
			pSatData->pSignalData = malloc(sizeof(*pSatData->pSignalData) * pSatData->signalDataArraySize);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f003 f9c0 	bl	8009344 <malloc>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	611a      	str	r2, [r3, #16]

			if (pSatData->pSignalData)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d07a      	beq.n	80060ca <sbgEComBinaryLogParseSatData+0x19e>
			{
				uint8_t								 constellationId;

				constellationId = sbgEComBinaryLogSatGetField(pSatData->flags, SBG_ECOM_LOG_SAT_CONSTELLATION_ID_OFFSET, SBG_ECOM_LOG_SAT_CONSTELLATION_ID_MASK);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	889b      	ldrh	r3, [r3, #4]
 8005fd8:	09db      	lsrs	r3, r3, #7
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	73fb      	strb	r3, [r7, #15]

				if (sbgEComConstellationIdIsValid(constellationId))
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fb70 	bl	80076cc <sbgEComConstellationIdIsValid>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04c      	beq.n	800608c <sbgEComBinaryLogParseSatData+0x160>
				{
					uint8_t								 elevationStatus;

					elevationStatus = sbgEComBinaryLogSatGetField(pSatData->flags, SBG_ECOM_LOG_SAT_ELEVATION_STATUS_OFFSET, SBG_ECOM_LOG_SAT_ELEVATION_STATUS_MASK);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	889b      	ldrh	r3, [r3, #4]
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	73bb      	strb	r3, [r7, #14]

					errorCode = sbgEComBinaryLogSatCheckElevationStatus(elevationStatus);
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff ff65 	bl	8005ed4 <sbgEComBinaryLogSatCheckElevationStatus>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

					if (errorCode == SBG_NO_ERROR)
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d14e      	bne.n	80060b2 <sbgEComBinaryLogParseSatData+0x186>
					{
						uint8_t								 healthStatus;

						healthStatus = sbgEComBinaryLogSatGetField(pSatData->flags, SBG_ECOM_LOG_SAT_HEALTH_STATUS_OFFSET, SBG_ECOM_LOG_SAT_HEALTH_STATUS_MASK);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	889b      	ldrh	r3, [r3, #4]
 8006018:	08db      	lsrs	r3, r3, #3
 800601a:	b29b      	uxth	r3, r3
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	737b      	strb	r3, [r7, #13]

						errorCode = sbgEComBinaryLogSatCheckHealthStatus(healthStatus);
 8006024:	7b7b      	ldrb	r3, [r7, #13]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fe8c 	bl	8005d44 <sbgEComBinaryLogSatCheckHealthStatus>
 800602c:	4603      	mov	r3, r0
 800602e:	75fb      	strb	r3, [r7, #23]

						if (errorCode == SBG_NO_ERROR)
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d13d      	bne.n	80060b2 <sbgEComBinaryLogParseSatData+0x186>
						{
							uint8_t								 trackingStatus;

							trackingStatus = sbgEComBinaryLogSatGetField(pSatData->flags, SBG_ECOM_LOG_SAT_TRACKING_STATUS_OFFSET, SBG_ECOM_LOG_SAT_TRACKING_STATUS_MASK);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	889b      	ldrh	r3, [r3, #4]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	733b      	strb	r3, [r7, #12]

							errorCode = sbgEComBinaryLogSatCheckTrackingStatus(trackingStatus);
 8006042:	7b3b      	ldrb	r3, [r7, #12]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fea9 	bl	8005d9c <sbgEComBinaryLogSatCheckTrackingStatus>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]

							if (errorCode == SBG_NO_ERROR)
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d12e      	bne.n	80060b2 <sbgEComBinaryLogParseSatData+0x186>
							{
								for (size_t i = 0; i < pSatData->nrSignals; i++)
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	e012      	b.n	8006080 <sbgEComBinaryLogParseSatData+0x154>
								{
									errorCode = sbgEComBinaryLogParseSignalData(pStreamBuffer, &pSatData->pSignalData[i]);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4613      	mov	r3, r2
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	4413      	add	r3, r2
 8006066:	440b      	add	r3, r1
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fec2 	bl	8005df4 <sbgEComBinaryLogParseSignalData>
 8006070:	4603      	mov	r3, r0
 8006072:	75fb      	strb	r3, [r7, #23]

									if (errorCode != SBG_NO_ERROR)
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d11a      	bne.n	80060b0 <sbgEComBinaryLogParseSatData+0x184>
								for (size_t i = 0; i < pSatData->nrSignals; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	429a      	cmp	r2, r3
 8006088:	d3e7      	bcc.n	800605a <sbgEComBinaryLogParseSatData+0x12e>
 800608a:	e012      	b.n	80060b2 <sbgEComBinaryLogParseSatData+0x186>
						}
					}
				}
				else
				{
					errorCode = SBG_INVALID_FRAME;
 800608c:	2304      	movs	r3, #4
 800608e:	75fb      	strb	r3, [r7, #23]
					SBG_LOG_ERROR(errorCode, "invalid constellation id: %" PRIu8, constellationId);
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	9303      	str	r3, [sp, #12]
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <sbgEComBinaryLogParseSatData+0x1f8>)
 8006096:	9302      	str	r3, [sp, #8]
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	2300      	movs	r3, #0
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	4b21      	ldr	r3, [pc, #132]	; (8006128 <sbgEComBinaryLogParseSatData+0x1fc>)
 80060a2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80060a6:	4921      	ldr	r1, [pc, #132]	; (800612c <sbgEComBinaryLogParseSatData+0x200>)
 80060a8:	481d      	ldr	r0, [pc, #116]	; (8006120 <sbgEComBinaryLogParseSatData+0x1f4>)
 80060aa:	f7fc fe35 	bl	8002d18 <sbgPlatformDebugLogMsg>
 80060ae:	e000      	b.n	80060b2 <sbgEComBinaryLogParseSatData+0x186>
										break;
 80060b0:	bf00      	nop
				}

				if (errorCode != SBG_NO_ERROR)
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d02a      	beq.n	800610e <sbgEComBinaryLogParseSatData+0x1e2>
				{
					free(pSatData->pSignalData);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	4618      	mov	r0, r3
 80060be:	f003 f949 	bl	8009354 <free>
					pSatData->pSignalData = NULL;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2200      	movs	r2, #0
 80060c6:	611a      	str	r2, [r3, #16]
 80060c8:	e021      	b.n	800610e <sbgEComBinaryLogParseSatData+0x1e2>
				}
			}
			else
			{
				errorCode = SBG_MALLOC_FAILED;
 80060ca:	230b      	movs	r3, #11
 80060cc:	75fb      	strb	r3, [r7, #23]
				SBG_LOG_ERROR(errorCode, "unable to allocate signal data array");
 80060ce:	4b18      	ldr	r3, [pc, #96]	; (8006130 <sbgEComBinaryLogParseSatData+0x204>)
 80060d0:	9302      	str	r3, [sp, #8]
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <sbgEComBinaryLogParseSatData+0x1fc>)
 80060dc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80060e0:	4912      	ldr	r1, [pc, #72]	; (800612c <sbgEComBinaryLogParseSatData+0x200>)
 80060e2:	480f      	ldr	r0, [pc, #60]	; (8006120 <sbgEComBinaryLogParseSatData+0x1f4>)
 80060e4:	f7fc fe18 	bl	8002d18 <sbgPlatformDebugLogMsg>
 80060e8:	e011      	b.n	800610e <sbgEComBinaryLogParseSatData+0x1e2>
			}
		}
		else
		{
			errorCode = SBG_INVALID_FRAME;
 80060ea:	2304      	movs	r3, #4
 80060ec:	75fb      	strb	r3, [r7, #23]
			SBG_LOG_ERROR(errorCode, "invalid number of signals: %zu", pSatData->nrSignals);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <sbgEComBinaryLogParseSatData+0x208>)
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	2300      	movs	r3, #0
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	4b09      	ldr	r3, [pc, #36]	; (8006128 <sbgEComBinaryLogParseSatData+0x1fc>)
 8006102:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006106:	4909      	ldr	r1, [pc, #36]	; (800612c <sbgEComBinaryLogParseSatData+0x200>)
 8006108:	4805      	ldr	r0, [pc, #20]	; (8006120 <sbgEComBinaryLogParseSatData+0x1f4>)
 800610a:	f7fc fe05 	bl	8002d18 <sbgPlatformDebugLogMsg>
		}
	}

	return errorCode;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	0800b2e0 	.word	0x0800b2e0
 800611c:	0800d5f8 	.word	0x0800d5f8
 8006120:	0800b22c 	.word	0x0800b22c
 8006124:	0800b2ec 	.word	0x0800b2ec
 8006128:	0800b224 	.word	0x0800b224
 800612c:	0800d618 	.word	0x0800d618
 8006130:	0800b30c 	.word	0x0800b30c
 8006134:	0800b334 	.word	0x0800b334

08006138 <sbgLogSatDataDestroy>:
 * Satellite data destructor.
 *
 * \param[in]	pSatData					Satellite data.
 */
static void sbgLogSatDataDestroy(SbgLogSatData *pSatData)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	assert(pSatData);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <sbgLogSatDataDestroy+0x1c>
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <sbgLogSatDataDestroy+0x34>)
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <sbgLogSatDataDestroy+0x38>)
 800614a:	f240 11af 	movw	r1, #431	; 0x1af
 800614e:	4809      	ldr	r0, [pc, #36]	; (8006174 <sbgLogSatDataDestroy+0x3c>)
 8006150:	f002 fe7e 	bl	8008e50 <__assert_func>

	free(pSatData->pSignalData);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	4618      	mov	r0, r3
 800615a:	f003 f8fb 	bl	8009354 <free>
	pSatData->pSignalData = NULL;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	611a      	str	r2, [r3, #16]
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	0800b2e0 	.word	0x0800b2e0
 8006170:	0800d66c 	.word	0x0800d66c
 8006174:	0800b22c 	.word	0x0800b22c

08006178 <sbgEComBinaryLogParseSatGroupData>:
//----------------------------------------------------------------------//
//- Public functions                                                   -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseSatGroupData(SbgStreamBuffer *pStreamBuffer, SbgLogSatGroupData *pSatGroupData)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af04      	add	r7, sp, #16
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	SbgErrorCode						 errorCode;

	assert(pSatGroupData);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <sbgEComBinaryLogParseSatGroupData+0x1e>
 8006188:	4b4a      	ldr	r3, [pc, #296]	; (80062b4 <sbgEComBinaryLogParseSatGroupData+0x13c>)
 800618a:	4a4b      	ldr	r2, [pc, #300]	; (80062b8 <sbgEComBinaryLogParseSatGroupData+0x140>)
 800618c:	f240 2101 	movw	r1, #513	; 0x201
 8006190:	484a      	ldr	r0, [pc, #296]	; (80062bc <sbgEComBinaryLogParseSatGroupData+0x144>)
 8006192:	f002 fe5d 	bl	8008e50 <__assert_func>
	assert(pStreamBuffer);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <sbgEComBinaryLogParseSatGroupData+0x32>
 800619c:	4b48      	ldr	r3, [pc, #288]	; (80062c0 <sbgEComBinaryLogParseSatGroupData+0x148>)
 800619e:	4a46      	ldr	r2, [pc, #280]	; (80062b8 <sbgEComBinaryLogParseSatGroupData+0x140>)
 80061a0:	f240 2102 	movw	r1, #514	; 0x202
 80061a4:	4845      	ldr	r0, [pc, #276]	; (80062bc <sbgEComBinaryLogParseSatGroupData+0x144>)
 80061a6:	f002 fe53 	bl	8008e50 <__assert_func>

	pSatGroupData->timeStamp				= sbgStreamBufferReadUint32LE(pStreamBuffer);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fd7c 	bl	8005ca8 <sbgStreamBufferReadUint32LE>
 80061b0:	4602      	mov	r2, r0
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	601a      	str	r2, [r3, #0]
	pSatGroupData->reserved					= sbgStreamBufferReadUint32LE(pStreamBuffer);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff fd76 	bl	8005ca8 <sbgStreamBufferReadUint32LE>
 80061bc:	4602      	mov	r2, r0
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	605a      	str	r2, [r3, #4]
	pSatGroupData->nrSatellites				= sbgStreamBufferReadUint8(pStreamBuffer);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fd04 	bl	8005bd0 <sbgStreamBufferReadUint8>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	609a      	str	r2, [r3, #8]
	pSatGroupData->satDataArraySize			= pSatGroupData->nrSatellites;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	60da      	str	r2, [r3, #12]

	errorCode = sbgStreamBufferGetLastError(pStreamBuffer);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fc57 	bl	8005a8c <sbgStreamBufferGetLastError>
 80061de:	4603      	mov	r3, r0
 80061e0:	73fb      	strb	r3, [r7, #15]

	if (errorCode == SBG_NO_ERROR)
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d160      	bne.n	80062aa <sbgEComBinaryLogParseSatGroupData+0x132>
	{
		if (pSatGroupData->nrSatellites <= SBG_ECOM_SAT_MAX_NR_SATELLITES)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d84a      	bhi.n	8006286 <sbgEComBinaryLogParseSatGroupData+0x10e>
		{
			pSatGroupData->pSatData = malloc(sizeof(*pSatGroupData->pSatData) * pSatGroupData->satDataArraySize);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f003 f8a1 	bl	8009344 <malloc>
 8006202:	4603      	mov	r3, r0
 8006204:	461a      	mov	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	611a      	str	r2, [r3, #16]

			if (pSatGroupData->pSatData)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d029      	beq.n	8006266 <sbgEComBinaryLogParseSatGroupData+0xee>
			{
				for (size_t i = 0; i < pSatGroupData->nrSatellites; i++)
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	e013      	b.n	8006240 <sbgEComBinaryLogParseSatGroupData+0xc8>
				{
					errorCode = sbgEComBinaryLogParseSatData(pStreamBuffer, &pSatGroupData->pSatData[i]);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	6919      	ldr	r1, [r3, #16]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fe7e 	bl	8005f2c <sbgEComBinaryLogParseSatData>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

					if (errorCode != SBG_NO_ERROR)
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <sbgEComBinaryLogParseSatGroupData+0xd4>
				for (size_t i = 0; i < pSatGroupData->nrSatellites; i++)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3301      	adds	r3, #1
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	d3e6      	bcc.n	8006218 <sbgEComBinaryLogParseSatGroupData+0xa0>
 800624a:	e000      	b.n	800624e <sbgEComBinaryLogParseSatGroupData+0xd6>
					{
						break;
 800624c:	bf00      	nop
					}
				}

				if (errorCode != SBG_NO_ERROR)
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02a      	beq.n	80062aa <sbgEComBinaryLogParseSatGroupData+0x132>
				{
					free(pSatGroupData->pSatData);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4618      	mov	r0, r3
 800625a:	f003 f87b 	bl	8009354 <free>
					pSatGroupData->pSatData = NULL;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2200      	movs	r2, #0
 8006262:	611a      	str	r2, [r3, #16]
 8006264:	e021      	b.n	80062aa <sbgEComBinaryLogParseSatGroupData+0x132>
				}
			}
			else
			{
				errorCode = SBG_MALLOC_FAILED;
 8006266:	230b      	movs	r3, #11
 8006268:	73fb      	strb	r3, [r7, #15]
				SBG_LOG_ERROR(errorCode, "unable to allocate satellite data array");
 800626a:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <sbgEComBinaryLogParseSatGroupData+0x14c>)
 800626c:	9302      	str	r3, [sp, #8]
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	2300      	movs	r3, #0
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <sbgEComBinaryLogParseSatGroupData+0x150>)
 8006278:	f240 2226 	movw	r2, #550	; 0x226
 800627c:	4913      	ldr	r1, [pc, #76]	; (80062cc <sbgEComBinaryLogParseSatGroupData+0x154>)
 800627e:	480f      	ldr	r0, [pc, #60]	; (80062bc <sbgEComBinaryLogParseSatGroupData+0x144>)
 8006280:	f7fc fd4a 	bl	8002d18 <sbgPlatformDebugLogMsg>
 8006284:	e011      	b.n	80062aa <sbgEComBinaryLogParseSatGroupData+0x132>
			}
		}
		else
		{
			errorCode = SBG_INVALID_FRAME;
 8006286:	2304      	movs	r3, #4
 8006288:	73fb      	strb	r3, [r7, #15]
			SBG_LOG_ERROR(errorCode, "invalid number of satellites: %zu", pSatGroupData->nrSatellites);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <sbgEComBinaryLogParseSatGroupData+0x158>)
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	2300      	movs	r3, #0
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <sbgEComBinaryLogParseSatGroupData+0x150>)
 800629e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80062a2:	490a      	ldr	r1, [pc, #40]	; (80062cc <sbgEComBinaryLogParseSatGroupData+0x154>)
 80062a4:	4805      	ldr	r0, [pc, #20]	; (80062bc <sbgEComBinaryLogParseSatGroupData+0x144>)
 80062a6:	f7fc fd37 	bl	8002d18 <sbgPlatformDebugLogMsg>
		}
	}

	return errorCode;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	0800b380 	.word	0x0800b380
 80062b8:	0800d684 	.word	0x0800d684
 80062bc:	0800b22c 	.word	0x0800b22c
 80062c0:	0800b390 	.word	0x0800b390
 80062c4:	0800b3a0 	.word	0x0800b3a0
 80062c8:	0800b224 	.word	0x0800b224
 80062cc:	0800d6a8 	.word	0x0800d6a8
 80062d0:	0800b3c8 	.word	0x0800b3c8

080062d4 <sbgLogSatGroupDataDestroy>:

	return SBG_NO_ERROR;
}

void sbgLogSatGroupDataDestroy(SbgLogSatGroupData *pSatGroupData)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	assert(pSatGroupData);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <sbgLogSatGroupDataDestroy+0x1c>
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <sbgLogSatGroupDataDestroy+0x60>)
 80062e4:	4a14      	ldr	r2, [pc, #80]	; (8006338 <sbgLogSatGroupDataDestroy+0x64>)
 80062e6:	f240 216f 	movw	r1, #623	; 0x26f
 80062ea:	4814      	ldr	r0, [pc, #80]	; (800633c <sbgLogSatGroupDataDestroy+0x68>)
 80062ec:	f002 fdb0 	bl	8008e50 <__assert_func>

	for (size_t i = 0; i < pSatGroupData->nrSatellites; i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e00d      	b.n	8006312 <sbgLogSatGroupDataDestroy+0x3e>
	{
		sbgLogSatDataDestroy(&pSatGroupData->pSatData[i]);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6919      	ldr	r1, [r3, #16]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff ff16 	bl	8006138 <sbgLogSatDataDestroy>
	for (size_t i = 0; i < pSatGroupData->nrSatellites; i++)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	429a      	cmp	r2, r3
 800631a:	d3ec      	bcc.n	80062f6 <sbgLogSatGroupDataDestroy+0x22>
	}

	free(pSatGroupData->pSatData);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	4618      	mov	r0, r3
 8006322:	f003 f817 	bl	8009354 <free>
	pSatGroupData->pSatData = NULL;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	611a      	str	r2, [r3, #16]
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	0800b380 	.word	0x0800b380
 8006338:	0800d6e8 	.word	0x0800d6e8
 800633c:	0800b22c 	.word	0x0800b22c

08006340 <sbgStreamBufferGetLastError>:
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <sbgStreamBufferGetLastError+0x1c>
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <sbgStreamBufferGetLastError+0x28>)
 8006350:	4a06      	ldr	r2, [pc, #24]	; (800636c <sbgStreamBufferGetLastError+0x2c>)
 8006352:	f240 111d 	movw	r1, #285	; 0x11d
 8006356:	4806      	ldr	r0, [pc, #24]	; (8006370 <sbgStreamBufferGetLastError+0x30>)
 8006358:	f002 fd7a 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	7c1b      	ldrb	r3, [r3, #16]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	0800b4cc 	.word	0x0800b4cc
 800636c:	0800d7c8 	.word	0x0800d7c8
 8006370:	0800b4d4 	.word	0x0800b4d4

08006374 <sbgStreamBufferGetSize>:
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <sbgStreamBufferGetSize+0x1c>
 8006382:	4b06      	ldr	r3, [pc, #24]	; (800639c <sbgStreamBufferGetSize+0x28>)
 8006384:	4a06      	ldr	r2, [pc, #24]	; (80063a0 <sbgStreamBufferGetSize+0x2c>)
 8006386:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800638a:	4806      	ldr	r0, [pc, #24]	; (80063a4 <sbgStreamBufferGetSize+0x30>)
 800638c:	f002 fd60 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	0800b4cc 	.word	0x0800b4cc
 80063a0:	0800d75c 	.word	0x0800d75c
 80063a4:	0800b4d4 	.word	0x0800b4d4

080063a8 <sbgStreamBufferGetLength>:
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <sbgStreamBufferGetLength+0x1c>
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <sbgStreamBufferGetLength+0x30>)
 80063b8:	4a08      	ldr	r2, [pc, #32]	; (80063dc <sbgStreamBufferGetLength+0x34>)
 80063ba:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80063be:	4808      	ldr	r0, [pc, #32]	; (80063e0 <sbgStreamBufferGetLength+0x38>)
 80063c0:	f002 fd46 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	461a      	mov	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	1ad3      	subs	r3, r2, r3
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	0800b4cc 	.word	0x0800b4cc
 80063dc:	0800d774 	.word	0x0800d774
 80063e0:	0800b4d4 	.word	0x0800b4d4

080063e4 <sbgStreamBufferGetSpace>:
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <sbgStreamBufferGetSpace+0x1c>
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <sbgStreamBufferGetSpace+0x38>)
 80063f4:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <sbgStreamBufferGetSpace+0x3c>)
 80063f6:	f240 1167 	movw	r1, #359	; 0x167
 80063fa:	480a      	ldr	r0, [pc, #40]	; (8006424 <sbgStreamBufferGetSpace+0x40>)
 80063fc:	f002 fd28 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff ffb7 	bl	8006374 <sbgStreamBufferGetSize>
 8006406:	4604      	mov	r4, r0
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ffcd 	bl	80063a8 <sbgStreamBufferGetLength>
 800640e:	4603      	mov	r3, r0
 8006410:	1ae3      	subs	r3, r4, r3
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bd90      	pop	{r4, r7, pc}
 800641a:	bf00      	nop
 800641c:	0800b4cc 	.word	0x0800b4cc
 8006420:	0800d744 	.word	0x0800d744
 8006424:	0800b4d4 	.word	0x0800b4d4

08006428 <sbgStreamBufferReadUint16LE>:
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d105      	bne.n	8006442 <sbgStreamBufferReadUint16LE+0x1a>
 8006436:	4b18      	ldr	r3, [pc, #96]	; (8006498 <sbgStreamBufferReadUint16LE+0x70>)
 8006438:	4a18      	ldr	r2, [pc, #96]	; (800649c <sbgStreamBufferReadUint16LE+0x74>)
 800643a:	2179      	movs	r1, #121	; 0x79
 800643c:	4818      	ldr	r0, [pc, #96]	; (80064a0 <sbgStreamBufferReadUint16LE+0x78>)
 800643e:	f002 fd07 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7c1b      	ldrb	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d121      	bne.n	800648e <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ffca 	bl	80063e4 <sbgStreamBufferGetSpace>
 8006450:	4603      	mov	r3, r0
 8006452:	2b01      	cmp	r3, #1
 8006454:	d918      	bls.n	8006488 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	1c59      	adds	r1, r3, #1
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	60d1      	str	r1, [r2, #12]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	60d1      	str	r1, [r2, #12]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 8006476:	89bb      	ldrh	r3, [r7, #12]
 8006478:	b21a      	sxth	r2, r3
 800647a:	89fb      	ldrh	r3, [r7, #14]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	b21b      	sxth	r3, r3
 8006480:	4313      	orrs	r3, r2
 8006482:	b21b      	sxth	r3, r3
 8006484:	b29b      	uxth	r3, r3
 8006486:	e003      	b.n	8006490 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2208      	movs	r2, #8
 800648c:	741a      	strb	r2, [r3, #16]
	return 0;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	0800b4cc 	.word	0x0800b4cc
 800649c:	0800d7ac 	.word	0x0800d7ac
 80064a0:	0800b510 	.word	0x0800b510

080064a4 <sbgStreamBufferReadUint32LE>:
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <sbgStreamBufferReadUint32LE+0x1c>
 80064b2:	4b20      	ldr	r3, [pc, #128]	; (8006534 <sbgStreamBufferReadUint32LE+0x90>)
 80064b4:	4a20      	ldr	r2, [pc, #128]	; (8006538 <sbgStreamBufferReadUint32LE+0x94>)
 80064b6:	f240 1189 	movw	r1, #393	; 0x189
 80064ba:	4820      	ldr	r0, [pc, #128]	; (800653c <sbgStreamBufferReadUint32LE+0x98>)
 80064bc:	f002 fcc8 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7c1b      	ldrb	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d12f      	bne.n	8006528 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ff8b 	bl	80063e4 <sbgStreamBufferGetSpace>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d926      	bls.n	8006522 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	1c59      	adds	r1, r3, #1
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	60d1      	str	r1, [r2, #12]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	60d1      	str	r1, [r2, #12]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	1c59      	adds	r1, r3, #1
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	60d1      	str	r1, [r2, #12]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	1c59      	adds	r1, r3, #1
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	60d1      	str	r1, [r2, #12]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	431a      	orrs	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	431a      	orrs	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	4313      	orrs	r3, r2
 8006520:	e003      	b.n	800652a <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2208      	movs	r2, #8
 8006526:	741a      	strb	r2, [r3, #16]
	return 0;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	0800b4cc 	.word	0x0800b4cc
 8006538:	0800d728 	.word	0x0800d728
 800653c:	0800b510 	.word	0x0800b510

08006540 <sbgStreamBufferReadFloatLE>:
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <sbgStreamBufferReadFloatLE+0x1c>
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <sbgStreamBufferReadFloatLE+0x58>)
 8006550:	4a12      	ldr	r2, [pc, #72]	; (800659c <sbgStreamBufferReadFloatLE+0x5c>)
 8006552:	f240 4139 	movw	r1, #1081	; 0x439
 8006556:	4812      	ldr	r0, [pc, #72]	; (80065a0 <sbgStreamBufferReadFloatLE+0x60>)
 8006558:	f002 fc7a 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7c1b      	ldrb	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10f      	bne.n	8006584 <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ff3d 	bl	80063e4 <sbgStreamBufferGetSpace>
 800656a:	4603      	mov	r3, r0
 800656c:	2b03      	cmp	r3, #3
 800656e:	d906      	bls.n	800657e <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ff97 	bl	80064a4 <sbgStreamBufferReadUint32LE>
 8006576:	4603      	mov	r3, r0
 8006578:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	e004      	b.n	8006588 <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2208      	movs	r2, #8
 8006582:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 8006584:	f04f 0300 	mov.w	r3, #0
}
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eeb0 0a67 	vmov.f32	s0, s15
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	0800b4cc 	.word	0x0800b4cc
 800659c:	0800d790 	.word	0x0800d790
 80065a0:	0800b510 	.word	0x0800b510

080065a4 <sbgEComBinaryLogParseShipMotionData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseShipMotionData(SbgStreamBuffer *pInputStream, SbgLogShipMotionData *pOutputData)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <sbgEComBinaryLogParseShipMotionData+0x1c>
 80065b4:	4b44      	ldr	r3, [pc, #272]	; (80066c8 <sbgEComBinaryLogParseShipMotionData+0x124>)
 80065b6:	4a45      	ldr	r2, [pc, #276]	; (80066cc <sbgEComBinaryLogParseShipMotionData+0x128>)
 80065b8:	2109      	movs	r1, #9
 80065ba:	4845      	ldr	r0, [pc, #276]	; (80066d0 <sbgEComBinaryLogParseShipMotionData+0x12c>)
 80065bc:	f002 fc48 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d105      	bne.n	80065d2 <sbgEComBinaryLogParseShipMotionData+0x2e>
 80065c6:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <sbgEComBinaryLogParseShipMotionData+0x130>)
 80065c8:	4a40      	ldr	r2, [pc, #256]	; (80066cc <sbgEComBinaryLogParseShipMotionData+0x128>)
 80065ca:	210a      	movs	r1, #10
 80065cc:	4840      	ldr	r0, [pc, #256]	; (80066d0 <sbgEComBinaryLogParseShipMotionData+0x12c>)
 80065ce:	f002 fc3f 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff ff66 	bl	80064a4 <sbgStreamBufferReadUint32LE>
 80065d8:	4602      	mov	r2, r0
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	601a      	str	r2, [r3, #0]

	//
	// Read the main heave period in seconds
	//
	pOutputData->mainHeavePeriod	= sbgStreamBufferReadFloatLE(pInputStream);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff ffae 	bl	8006540 <sbgStreamBufferReadFloatLE>
 80065e4:	eef0 7a40 	vmov.f32	s15, s0
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	edc3 7a02 	vstr	s15, [r3, #8]

	//
	// Read the surge, sway and heave ship motion
	//
	pOutputData->shipMotion[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ffa6 	bl	8006540 <sbgStreamBufferReadFloatLE>
 80065f4:	eef0 7a40 	vmov.f32	s15, s0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	edc3 7a03 	vstr	s15, [r3, #12]
	pOutputData->shipMotion[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff9e 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006604:	eef0 7a40 	vmov.f32	s15, s0
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	edc3 7a04 	vstr	s15, [r3, #16]
	pOutputData->shipMotion[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff ff96 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006614:	eef0 7a40 	vmov.f32	s15, s0
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	edc3 7a05 	vstr	s15, [r3, #20]
	
	//
	// Read the ship accelerations
	//
	pOutputData->shipAccel[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff ff8e 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006624:	eef0 7a40 	vmov.f32	s15, s0
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	edc3 7a06 	vstr	s15, [r3, #24]
	pOutputData->shipAccel[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff ff86 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006634:	eef0 7a40 	vmov.f32	s15, s0
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	edc3 7a07 	vstr	s15, [r3, #28]
	pOutputData->shipAccel[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff ff7e 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006644:	eef0 7a40 	vmov.f32	s15, s0
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	edc3 7a08 	vstr	s15, [r3, #32]

	//
	// Test if we have a additional information such as ship velocity and status (since version 1.4)
	//
	if (sbgStreamBufferGetSpace(pInputStream) >= 14)
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fec8 	bl	80063e4 <sbgStreamBufferGetSpace>
 8006654:	4603      	mov	r3, r0
 8006656:	2b0d      	cmp	r3, #13
 8006658:	d91f      	bls.n	800669a <sbgEComBinaryLogParseShipMotionData+0xf6>
	{
		//
		// Read new outputs
		//
		pOutputData->shipVel[0]		= sbgStreamBufferReadFloatLE(pInputStream);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff ff70 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006660:	eef0 7a40 	vmov.f32	s15, s0
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		pOutputData->shipVel[1]		= sbgStreamBufferReadFloatLE(pInputStream);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff ff68 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006670:	eef0 7a40 	vmov.f32	s15, s0
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		pOutputData->shipVel[2]		= sbgStreamBufferReadFloatLE(pInputStream);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ff60 	bl	8006540 <sbgStreamBufferReadFloatLE>
 8006680:	eef0 7a40 	vmov.f32	s15, s0
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		pOutputData->status			= sbgStreamBufferReadUint16LE(pInputStream);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fecc 	bl	8006428 <sbgStreamBufferReadUint16LE>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	809a      	strh	r2, [r3, #4]
 8006698:	e00e      	b.n	80066b8 <sbgEComBinaryLogParseShipMotionData+0x114>
	else
	{
		//
		// Those outputs are not available in previous versions
		//
		pOutputData->shipVel[0]		= 0.0f;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24
		pOutputData->shipVel[1]		= 0.0f;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28
		pOutputData->shipVel[2]		= 0.0f;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	62da      	str	r2, [r3, #44]	; 0x2c

		pOutputData->status			= 0;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2200      	movs	r2, #0
 80066b6:	809a      	strh	r2, [r3, #4]
	}

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fe41 	bl	8006340 <sbgStreamBufferGetLastError>
 80066be:	4603      	mov	r3, r0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	0800b548 	.word	0x0800b548
 80066cc:	0800d704 	.word	0x0800d704
 80066d0:	0800b558 	.word	0x0800b558
 80066d4:	0800b594 	.word	0x0800b594

080066d8 <sbgStreamBufferGetLastError>:
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <sbgStreamBufferGetLastError+0x1c>
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <sbgStreamBufferGetLastError+0x28>)
 80066e8:	4a06      	ldr	r2, [pc, #24]	; (8006704 <sbgStreamBufferGetLastError+0x2c>)
 80066ea:	f240 111d 	movw	r1, #285	; 0x11d
 80066ee:	4806      	ldr	r0, [pc, #24]	; (8006708 <sbgStreamBufferGetLastError+0x30>)
 80066f0:	f002 fbae 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	0800b5bc 	.word	0x0800b5bc
 8006704:	0800d888 	.word	0x0800d888
 8006708:	0800b5c4 	.word	0x0800b5c4

0800670c <sbgStreamBufferGetSize>:
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <sbgStreamBufferGetSize+0x1c>
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <sbgStreamBufferGetSize+0x28>)
 800671c:	4a06      	ldr	r2, [pc, #24]	; (8006738 <sbgStreamBufferGetSize+0x2c>)
 800671e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006722:	4806      	ldr	r0, [pc, #24]	; (800673c <sbgStreamBufferGetSize+0x30>)
 8006724:	f002 fb94 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	0800b5bc 	.word	0x0800b5bc
 8006738:	0800d838 	.word	0x0800d838
 800673c:	0800b5c4 	.word	0x0800b5c4

08006740 <sbgStreamBufferGetLength>:
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <sbgStreamBufferGetLength+0x1c>
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <sbgStreamBufferGetLength+0x30>)
 8006750:	4a08      	ldr	r2, [pc, #32]	; (8006774 <sbgStreamBufferGetLength+0x34>)
 8006752:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8006756:	4808      	ldr	r0, [pc, #32]	; (8006778 <sbgStreamBufferGetLength+0x38>)
 8006758:	f002 fb7a 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	461a      	mov	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	1ad3      	subs	r3, r2, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	0800b5bc 	.word	0x0800b5bc
 8006774:	0800d850 	.word	0x0800d850
 8006778:	0800b5c4 	.word	0x0800b5c4

0800677c <sbgStreamBufferGetSpace>:
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <sbgStreamBufferGetSpace+0x1c>
 800678a:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <sbgStreamBufferGetSpace+0x38>)
 800678c:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <sbgStreamBufferGetSpace+0x3c>)
 800678e:	f240 1167 	movw	r1, #359	; 0x167
 8006792:	480a      	ldr	r0, [pc, #40]	; (80067bc <sbgStreamBufferGetSpace+0x40>)
 8006794:	f002 fb5c 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff ffb7 	bl	800670c <sbgStreamBufferGetSize>
 800679e:	4604      	mov	r4, r0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ffcd 	bl	8006740 <sbgStreamBufferGetLength>
 80067a6:	4603      	mov	r3, r0
 80067a8:	1ae3      	subs	r3, r4, r3
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd90      	pop	{r4, r7, pc}
 80067b2:	bf00      	nop
 80067b4:	0800b5bc 	.word	0x0800b5bc
 80067b8:	0800d820 	.word	0x0800d820
 80067bc:	0800b5c4 	.word	0x0800b5c4

080067c0 <sbgStreamBufferReadUint16LE>:
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <sbgStreamBufferReadUint16LE+0x1a>
 80067ce:	4b18      	ldr	r3, [pc, #96]	; (8006830 <sbgStreamBufferReadUint16LE+0x70>)
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <sbgStreamBufferReadUint16LE+0x74>)
 80067d2:	2179      	movs	r1, #121	; 0x79
 80067d4:	4818      	ldr	r0, [pc, #96]	; (8006838 <sbgStreamBufferReadUint16LE+0x78>)
 80067d6:	f002 fb3b 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7c1b      	ldrb	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d121      	bne.n	8006826 <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff ffca 	bl	800677c <sbgStreamBufferGetSpace>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d918      	bls.n	8006820 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	1c59      	adds	r1, r3, #1
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	60d1      	str	r1, [r2, #12]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	60d1      	str	r1, [r2, #12]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 800680e:	89bb      	ldrh	r3, [r7, #12]
 8006810:	b21a      	sxth	r2, r3
 8006812:	89fb      	ldrh	r3, [r7, #14]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	b21b      	sxth	r3, r3
 8006818:	4313      	orrs	r3, r2
 800681a:	b21b      	sxth	r3, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	e003      	b.n	8006828 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2208      	movs	r2, #8
 8006824:	741a      	strb	r2, [r3, #16]
	return 0;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	0800b5bc 	.word	0x0800b5bc
 8006834:	0800d804 	.word	0x0800d804
 8006838:	0800b600 	.word	0x0800b600

0800683c <sbgStreamBufferReadUint32LE>:
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <sbgStreamBufferReadUint32LE+0x1c>
 800684a:	4b20      	ldr	r3, [pc, #128]	; (80068cc <sbgStreamBufferReadUint32LE+0x90>)
 800684c:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <sbgStreamBufferReadUint32LE+0x94>)
 800684e:	f240 1189 	movw	r1, #393	; 0x189
 8006852:	4820      	ldr	r0, [pc, #128]	; (80068d4 <sbgStreamBufferReadUint32LE+0x98>)
 8006854:	f002 fafc 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7c1b      	ldrb	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d12f      	bne.n	80068c0 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ff8b 	bl	800677c <sbgStreamBufferGetSpace>
 8006866:	4603      	mov	r3, r0
 8006868:	2b03      	cmp	r3, #3
 800686a:	d926      	bls.n	80068ba <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	60d1      	str	r1, [r2, #12]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	1c59      	adds	r1, r3, #1
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	60d1      	str	r1, [r2, #12]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	60d1      	str	r1, [r2, #12]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	1c59      	adds	r1, r3, #1
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	60d1      	str	r1, [r2, #12]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	431a      	orrs	r2, r3
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	431a      	orrs	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	061b      	lsls	r3, r3, #24
 80068b6:	4313      	orrs	r3, r2
 80068b8:	e003      	b.n	80068c2 <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2208      	movs	r2, #8
 80068be:	741a      	strb	r2, [r3, #16]
	return 0;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	0800b5bc 	.word	0x0800b5bc
 80068d0:	0800d86c 	.word	0x0800d86c
 80068d4:	0800b600 	.word	0x0800b600

080068d8 <sbgEComBinaryLogParseStatusData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseStatusData(SbgStreamBuffer *pInputStream, SbgLogStatusData *pOutputData)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <sbgEComBinaryLogParseStatusData+0x1c>
 80068e8:	4b29      	ldr	r3, [pc, #164]	; (8006990 <sbgEComBinaryLogParseStatusData+0xb8>)
 80068ea:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <sbgEComBinaryLogParseStatusData+0xbc>)
 80068ec:	2109      	movs	r1, #9
 80068ee:	482a      	ldr	r0, [pc, #168]	; (8006998 <sbgEComBinaryLogParseStatusData+0xc0>)
 80068f0:	f002 faae 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <sbgEComBinaryLogParseStatusData+0x2e>
 80068fa:	4b28      	ldr	r3, [pc, #160]	; (800699c <sbgEComBinaryLogParseStatusData+0xc4>)
 80068fc:	4a25      	ldr	r2, [pc, #148]	; (8006994 <sbgEComBinaryLogParseStatusData+0xbc>)
 80068fe:	210a      	movs	r1, #10
 8006900:	4825      	ldr	r0, [pc, #148]	; (8006998 <sbgEComBinaryLogParseStatusData+0xc0>)
 8006902:	f002 faa5 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff ff98 	bl	800683c <sbgStreamBufferReadUint32LE>
 800690c:	4602      	mov	r2, r0
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	601a      	str	r2, [r3, #0]
	pOutputData->generalStatus	= sbgStreamBufferReadUint16LE(pInputStream);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff ff54 	bl	80067c0 <sbgStreamBufferReadUint16LE>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	809a      	strh	r2, [r3, #4]
	pOutputData->comStatus2		= sbgStreamBufferReadUint16LE(pInputStream);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff ff4d 	bl	80067c0 <sbgStreamBufferReadUint16LE>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	819a      	strh	r2, [r3, #12]
	pOutputData->comStatus		= sbgStreamBufferReadUint32LE(pInputStream);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff ff84 	bl	800683c <sbgStreamBufferReadUint32LE>
 8006934:	4602      	mov	r2, r0
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	609a      	str	r2, [r3, #8]
	pOutputData->aidingStatus	= sbgStreamBufferReadUint32LE(pInputStream);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff ff7e 	bl	800683c <sbgStreamBufferReadUint32LE>
 8006940:	4602      	mov	r2, r0
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	611a      	str	r2, [r3, #16]
	pOutputData->reserved2		= sbgStreamBufferReadUint32LE(pInputStream);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff ff78 	bl	800683c <sbgStreamBufferReadUint32LE>
 800694c:	4602      	mov	r2, r0
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	615a      	str	r2, [r3, #20]
	pOutputData->reserved3		= sbgStreamBufferReadUint16LE(pInputStream);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff ff34 	bl	80067c0 <sbgStreamBufferReadUint16LE>
 8006958:	4603      	mov	r3, r0
 800695a:	461a      	mov	r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	831a      	strh	r2, [r3, #24]
	
	//
	// Test if we have a additional information such as uptime (since version 1.7)
	//
	if (sbgStreamBufferGetSpace(pInputStream) >= sizeof(uint32_t))
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ff0b 	bl	800677c <sbgStreamBufferGetSpace>
 8006966:	4603      	mov	r3, r0
 8006968:	2b03      	cmp	r3, #3
 800696a:	d906      	bls.n	800697a <sbgEComBinaryLogParseStatusData+0xa2>
	{
		//
		// Read the additional information
		//
		pOutputData->uptime		= sbgStreamBufferReadUint32LE(pInputStream);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff65 	bl	800683c <sbgStreamBufferReadUint32LE>
 8006972:	4602      	mov	r2, r0
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	61da      	str	r2, [r3, #28]
 8006978:	e002      	b.n	8006980 <sbgEComBinaryLogParseStatusData+0xa8>
	else
	{
		//
		// Default the additional information
		//
		pOutputData->uptime = 0;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	61da      	str	r2, [r3, #28]
	}
	
	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff fea9 	bl	80066d8 <sbgStreamBufferGetLastError>
 8006986:	4603      	mov	r3, r0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	0800b638 	.word	0x0800b638
 8006994:	0800d7e4 	.word	0x0800d7e4
 8006998:	0800b648 	.word	0x0800b648
 800699c:	0800b680 	.word	0x0800b680

080069a0 <sbgStreamBufferGetLastError>:
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <sbgStreamBufferGetLastError+0x1c>
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <sbgStreamBufferGetLastError+0x28>)
 80069b0:	4a06      	ldr	r2, [pc, #24]	; (80069cc <sbgStreamBufferGetLastError+0x2c>)
 80069b2:	f240 111d 	movw	r1, #285	; 0x11d
 80069b6:	4806      	ldr	r0, [pc, #24]	; (80069d0 <sbgStreamBufferGetLastError+0x30>)
 80069b8:	f002 fa4a 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	7c1b      	ldrb	r3, [r3, #16]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	0800b6a8 	.word	0x0800b6a8
 80069cc:	0800d99c 	.word	0x0800d99c
 80069d0:	0800b6b0 	.word	0x0800b6b0

080069d4 <sbgStreamBufferGetSize>:
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <sbgStreamBufferGetSize+0x1c>
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <sbgStreamBufferGetSize+0x28>)
 80069e4:	4a06      	ldr	r2, [pc, #24]	; (8006a00 <sbgStreamBufferGetSize+0x2c>)
 80069e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80069ea:	4806      	ldr	r0, [pc, #24]	; (8006a04 <sbgStreamBufferGetSize+0x30>)
 80069ec:	f002 fa30 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	0800b6a8 	.word	0x0800b6a8
 8006a00:	0800d8f8 	.word	0x0800d8f8
 8006a04:	0800b6b0 	.word	0x0800b6b0

08006a08 <sbgStreamBufferGetLength>:
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <sbgStreamBufferGetLength+0x1c>
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <sbgStreamBufferGetLength+0x30>)
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <sbgStreamBufferGetLength+0x34>)
 8006a1a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8006a1e:	4808      	ldr	r0, [pc, #32]	; (8006a40 <sbgStreamBufferGetLength+0x38>)
 8006a20:	f002 fa16 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	1ad3      	subs	r3, r2, r3
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	0800b6a8 	.word	0x0800b6a8
 8006a3c:	0800d910 	.word	0x0800d910
 8006a40:	0800b6b0 	.word	0x0800b6b0

08006a44 <sbgStreamBufferGetSpace>:
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <sbgStreamBufferGetSpace+0x1c>
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <sbgStreamBufferGetSpace+0x38>)
 8006a54:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <sbgStreamBufferGetSpace+0x3c>)
 8006a56:	f240 1167 	movw	r1, #359	; 0x167
 8006a5a:	480a      	ldr	r0, [pc, #40]	; (8006a84 <sbgStreamBufferGetSpace+0x40>)
 8006a5c:	f002 f9f8 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ffb7 	bl	80069d4 <sbgStreamBufferGetSize>
 8006a66:	4604      	mov	r4, r0
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ffcd 	bl	8006a08 <sbgStreamBufferGetLength>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	1ae3      	subs	r3, r4, r3
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd90      	pop	{r4, r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0800b6a8 	.word	0x0800b6a8
 8006a80:	0800d8e0 	.word	0x0800d8e0
 8006a84:	0800b6b0 	.word	0x0800b6b0

08006a88 <sbgStreamBufferReadUint16LE>:
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d105      	bne.n	8006aa2 <sbgStreamBufferReadUint16LE+0x1a>
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <sbgStreamBufferReadUint16LE+0x70>)
 8006a98:	4a18      	ldr	r2, [pc, #96]	; (8006afc <sbgStreamBufferReadUint16LE+0x74>)
 8006a9a:	2179      	movs	r1, #121	; 0x79
 8006a9c:	4818      	ldr	r0, [pc, #96]	; (8006b00 <sbgStreamBufferReadUint16LE+0x78>)
 8006a9e:	f002 f9d7 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	7c1b      	ldrb	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d121      	bne.n	8006aee <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff ffca 	bl	8006a44 <sbgStreamBufferGetSpace>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d918      	bls.n	8006ae8 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	60d1      	str	r1, [r2, #12]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	1c59      	adds	r1, r3, #1
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	60d1      	str	r1, [r2, #12]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 8006ad6:	89bb      	ldrh	r3, [r7, #12]
 8006ad8:	b21a      	sxth	r2, r3
 8006ada:	89fb      	ldrh	r3, [r7, #14]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	b21b      	sxth	r3, r3
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	e003      	b.n	8006af0 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2208      	movs	r2, #8
 8006aec:	741a      	strb	r2, [r3, #16]
	return 0;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	0800b6a8 	.word	0x0800b6a8
 8006afc:	0800d92c 	.word	0x0800d92c
 8006b00:	0800b6ec 	.word	0x0800b6ec

08006b04 <sbgStreamBufferReadUint32LE>:
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <sbgStreamBufferReadUint32LE+0x1c>
 8006b12:	4b20      	ldr	r3, [pc, #128]	; (8006b94 <sbgStreamBufferReadUint32LE+0x90>)
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <sbgStreamBufferReadUint32LE+0x94>)
 8006b16:	f240 1189 	movw	r1, #393	; 0x189
 8006b1a:	4820      	ldr	r0, [pc, #128]	; (8006b9c <sbgStreamBufferReadUint32LE+0x98>)
 8006b1c:	f002 f998 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	7c1b      	ldrb	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d12f      	bne.n	8006b88 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff8b 	bl	8006a44 <sbgStreamBufferGetSpace>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d926      	bls.n	8006b82 <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	60d1      	str	r1, [r2, #12]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	1c59      	adds	r1, r3, #1
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	60d1      	str	r1, [r2, #12]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	1c59      	adds	r1, r3, #1
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	60d1      	str	r1, [r2, #12]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	60d1      	str	r1, [r2, #12]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	431a      	orrs	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	e003      	b.n	8006b8a <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2208      	movs	r2, #8
 8006b86:	741a      	strb	r2, [r3, #16]
	return 0;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	0800b6a8 	.word	0x0800b6a8
 8006b98:	0800d8c4 	.word	0x0800d8c4
 8006b9c:	0800b6ec 	.word	0x0800b6ec

08006ba0 <sbgStreamBufferReadUint64LE>:
{
 8006ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba4:	b086      	sub	sp, #24
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <sbgStreamBufferReadUint64LE+0x1e>
 8006bb0:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <sbgStreamBufferReadUint64LE+0x94>)
 8006bb2:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <sbgStreamBufferReadUint64LE+0x98>)
 8006bb4:	f240 31c7 	movw	r1, #967	; 0x3c7
 8006bb8:	4820      	ldr	r0, [pc, #128]	; (8006c3c <sbgStreamBufferReadUint64LE+0x9c>)
 8006bba:	f002 f949 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	7c1b      	ldrb	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d129      	bne.n	8006c1a <sbgStreamBufferReadUint64LE+0x7a>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint64_t))
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff ff3c 	bl	8006a44 <sbgStreamBufferGetSpace>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b07      	cmp	r3, #7
 8006bd0:	d920      	bls.n	8006c14 <sbgStreamBufferReadUint64LE+0x74>
				lowPart = sbgStreamBufferReadUint32LE(pHandle);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ff96 	bl	8006b04 <sbgStreamBufferReadUint32LE>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2200      	movs	r2, #0
 8006bdc:	469a      	mov	sl, r3
 8006bde:	4693      	mov	fp, r2
 8006be0:	e9c7 ab04 	strd	sl, fp, [r7, #16]
				highPart = sbgStreamBufferReadUint32LE(pHandle);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ff8d 	bl	8006b04 <sbgStreamBufferReadUint32LE>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2200      	movs	r2, #0
 8006bee:	4698      	mov	r8, r3
 8006bf0:	4691      	mov	r9, r2
 8006bf2:	e9c7 8902 	strd	r8, r9, [r7, #8]
					return lowPart | (highPart << 32);
 8006bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	0003      	movs	r3, r0
 8006c04:	2200      	movs	r2, #0
 8006c06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c0a:	ea42 0400 	orr.w	r4, r2, r0
 8006c0e:	ea43 0501 	orr.w	r5, r3, r1
 8006c12:	e006      	b.n	8006c22 <sbgStreamBufferReadUint64LE+0x82>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2208      	movs	r2, #8
 8006c18:	741a      	strb	r2, [r3, #16]
	return 0ull;
 8006c1a:	f04f 0400 	mov.w	r4, #0
 8006c1e:	f04f 0500 	mov.w	r5, #0
}
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c32:	bf00      	nop
 8006c34:	0800b6a8 	.word	0x0800b6a8
 8006c38:	0800d964 	.word	0x0800d964
 8006c3c:	0800b6ec 	.word	0x0800b6ec

08006c40 <sbgStreamBufferReadFloatLE>:
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <sbgStreamBufferReadFloatLE+0x1c>
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <sbgStreamBufferReadFloatLE+0x58>)
 8006c50:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <sbgStreamBufferReadFloatLE+0x5c>)
 8006c52:	f240 4139 	movw	r1, #1081	; 0x439
 8006c56:	4812      	ldr	r0, [pc, #72]	; (8006ca0 <sbgStreamBufferReadFloatLE+0x60>)
 8006c58:	f002 f8fa 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7c1b      	ldrb	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10f      	bne.n	8006c84 <sbgStreamBufferReadFloatLE+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(float))
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff feed 	bl	8006a44 <sbgStreamBufferGetSpace>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d906      	bls.n	8006c7e <sbgStreamBufferReadFloatLE+0x3e>
			floatInt.valU = sbgStreamBufferReadUint32LE(pHandle);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff ff47 	bl	8006b04 <sbgStreamBufferReadUint32LE>
 8006c76:	4603      	mov	r3, r0
 8006c78:	60fb      	str	r3, [r7, #12]
			return floatInt.valF;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	e004      	b.n	8006c88 <sbgStreamBufferReadFloatLE+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2208      	movs	r2, #8
 8006c82:	741a      	strb	r2, [r3, #16]
	return 0.0f;
 8006c84:	f04f 0300 	mov.w	r3, #0
}
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	0800b6a8 	.word	0x0800b6a8
 8006c9c:	0800d980 	.word	0x0800d980
 8006ca0:	0800b6ec 	.word	0x0800b6ec

08006ca4 <sbgStreamBufferReadDoubleLE>:
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <sbgStreamBufferReadDoubleLE+0x1c>
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <sbgStreamBufferReadDoubleLE+0x5c>)
 8006cb4:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <sbgStreamBufferReadDoubleLE+0x60>)
 8006cb6:	f44f 618d 	mov.w	r1, #1128	; 0x468
 8006cba:	4813      	ldr	r0, [pc, #76]	; (8006d08 <sbgStreamBufferReadDoubleLE+0x64>)
 8006cbc:	f002 f8c8 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	7c1b      	ldrb	r3, [r3, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d112      	bne.n	8006cee <sbgStreamBufferReadDoubleLE+0x4a>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(double))
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff febb 	bl	8006a44 <sbgStreamBufferGetSpace>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b07      	cmp	r3, #7
 8006cd2:	d909      	bls.n	8006ce8 <sbgStreamBufferReadDoubleLE+0x44>
			doubleInt.valU = sbgStreamBufferReadUint64LE(pHandle);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff ff63 	bl	8006ba0 <sbgStreamBufferReadUint64LE>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	e9c7 2302 	strd	r2, r3, [r7, #8]
			return doubleInt.valF;
 8006ce2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ce6:	e006      	b.n	8006cf6 <sbgStreamBufferReadDoubleLE+0x52>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2208      	movs	r2, #8
 8006cec:	741a      	strb	r2, [r3, #16]
	return 0.0;
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
}
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	0800b6a8 	.word	0x0800b6a8
 8006d04:	0800d948 	.word	0x0800d948
 8006d08:	0800b6ec 	.word	0x0800b6ec

08006d0c <sbgEComBinaryLogParseUsblData>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParseUsblData(SbgStreamBuffer *pInputStream, SbgLogUsblData *pOutputData)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <sbgEComBinaryLogParseUsblData+0x1c>
 8006d1c:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <sbgEComBinaryLogParseUsblData+0xb8>)
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	; (8006dc8 <sbgEComBinaryLogParseUsblData+0xbc>)
 8006d20:	2109      	movs	r1, #9
 8006d22:	482a      	ldr	r0, [pc, #168]	; (8006dcc <sbgEComBinaryLogParseUsblData+0xc0>)
 8006d24:	f002 f894 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <sbgEComBinaryLogParseUsblData+0x2e>
 8006d2e:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <sbgEComBinaryLogParseUsblData+0xc4>)
 8006d30:	4a25      	ldr	r2, [pc, #148]	; (8006dc8 <sbgEComBinaryLogParseUsblData+0xbc>)
 8006d32:	210a      	movs	r1, #10
 8006d34:	4825      	ldr	r0, [pc, #148]	; (8006dcc <sbgEComBinaryLogParseUsblData+0xc0>)
 8006d36:	f002 f88b 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp			= sbgStreamBufferReadUint32LE(pInputStream);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fee2 	bl	8006b04 <sbgStreamBufferReadUint32LE>
 8006d40:	4602      	mov	r2, r0
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	601a      	str	r2, [r3, #0]
	pOutputData->status				= sbgStreamBufferReadUint16LE(pInputStream);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fe9e 	bl	8006a88 <sbgStreamBufferReadUint16LE>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	809a      	strh	r2, [r3, #4]

	pOutputData->latitude			= sbgStreamBufferReadDoubleLE(pInputStream);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff ffa5 	bl	8006ca4 <sbgStreamBufferReadDoubleLE>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pOutputData->longitude			= sbgStreamBufferReadDoubleLE(pInputStream);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff9d 	bl	8006ca4 <sbgStreamBufferReadDoubleLE>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	e9c1 2304 	strd	r2, r3, [r1, #16]

	pOutputData->depth				= sbgStreamBufferReadFloatLE(pInputStream);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff ff63 	bl	8006c40 <sbgStreamBufferReadFloatLE>
 8006d7a:	eef0 7a40 	vmov.f32	s15, s0
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	edc3 7a06 	vstr	s15, [r3, #24]

	pOutputData->latitudeAccuracy	= sbgStreamBufferReadFloatLE(pInputStream);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff ff5b 	bl	8006c40 <sbgStreamBufferReadFloatLE>
 8006d8a:	eef0 7a40 	vmov.f32	s15, s0
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	edc3 7a07 	vstr	s15, [r3, #28]
	pOutputData->longitudeAccuracy	= sbgStreamBufferReadFloatLE(pInputStream);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff ff53 	bl	8006c40 <sbgStreamBufferReadFloatLE>
 8006d9a:	eef0 7a40 	vmov.f32	s15, s0
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	edc3 7a08 	vstr	s15, [r3, #32]
	pOutputData->depthAccuracy		= sbgStreamBufferReadFloatLE(pInputStream);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff4b 	bl	8006c40 <sbgStreamBufferReadFloatLE>
 8006daa:	eef0 7a40 	vmov.f32	s15, s0
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff fdf3 	bl	80069a0 <sbgStreamBufferGetLastError>
 8006dba:	4603      	mov	r3, r0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	0800b724 	.word	0x0800b724
 8006dc8:	0800d8a4 	.word	0x0800d8a4
 8006dcc:	0800b734 	.word	0x0800b734
 8006dd0:	0800b76c 	.word	0x0800b76c

08006dd4 <sbgStreamBufferGetLastError>:
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <sbgStreamBufferGetLastError+0x1c>
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <sbgStreamBufferGetLastError+0x28>)
 8006de4:	4a06      	ldr	r2, [pc, #24]	; (8006e00 <sbgStreamBufferGetLastError+0x2c>)
 8006de6:	f240 111d 	movw	r1, #285	; 0x11d
 8006dea:	4806      	ldr	r0, [pc, #24]	; (8006e04 <sbgStreamBufferGetLastError+0x30>)
 8006dec:	f002 f830 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7c1b      	ldrb	r3, [r3, #16]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	0800b794 	.word	0x0800b794
 8006e00:	0800da90 	.word	0x0800da90
 8006e04:	0800b79c 	.word	0x0800b79c

08006e08 <sbgStreamBufferGetSize>:
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <sbgStreamBufferGetSize+0x1c>
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <sbgStreamBufferGetSize+0x28>)
 8006e18:	4a06      	ldr	r2, [pc, #24]	; (8006e34 <sbgStreamBufferGetSize+0x2c>)
 8006e1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e1e:	4806      	ldr	r0, [pc, #24]	; (8006e38 <sbgStreamBufferGetSize+0x30>)
 8006e20:	f002 f816 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	0800b794 	.word	0x0800b794
 8006e34:	0800da0c 	.word	0x0800da0c
 8006e38:	0800b79c 	.word	0x0800b79c

08006e3c <sbgStreamBufferGetLength>:
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <sbgStreamBufferGetLength+0x1c>
 8006e4a:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <sbgStreamBufferGetLength+0x30>)
 8006e4c:	4a08      	ldr	r2, [pc, #32]	; (8006e70 <sbgStreamBufferGetLength+0x34>)
 8006e4e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8006e52:	4808      	ldr	r0, [pc, #32]	; (8006e74 <sbgStreamBufferGetLength+0x38>)
 8006e54:	f001 fffc 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	1ad3      	subs	r3, r2, r3
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	0800b794 	.word	0x0800b794
 8006e70:	0800da24 	.word	0x0800da24
 8006e74:	0800b79c 	.word	0x0800b79c

08006e78 <sbgStreamBufferGetSpace>:
{
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <sbgStreamBufferGetSpace+0x1c>
 8006e86:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <sbgStreamBufferGetSpace+0x38>)
 8006e88:	4a0a      	ldr	r2, [pc, #40]	; (8006eb4 <sbgStreamBufferGetSpace+0x3c>)
 8006e8a:	f240 1167 	movw	r1, #359	; 0x167
 8006e8e:	480a      	ldr	r0, [pc, #40]	; (8006eb8 <sbgStreamBufferGetSpace+0x40>)
 8006e90:	f001 ffde 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ffb7 	bl	8006e08 <sbgStreamBufferGetSize>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ffcd 	bl	8006e3c <sbgStreamBufferGetLength>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	1ae3      	subs	r3, r4, r3
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd90      	pop	{r4, r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	0800b794 	.word	0x0800b794
 8006eb4:	0800d9f4 	.word	0x0800d9f4
 8006eb8:	0800b79c 	.word	0x0800b79c

08006ebc <sbgStreamBufferReadInt8>:
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <sbgStreamBufferReadInt8+0x1c>
 8006eca:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <sbgStreamBufferReadInt8+0x50>)
 8006ecc:	4a10      	ldr	r2, [pc, #64]	; (8006f10 <sbgStreamBufferReadInt8+0x54>)
 8006ece:	f240 11f1 	movw	r1, #497	; 0x1f1
 8006ed2:	4810      	ldr	r0, [pc, #64]	; (8006f14 <sbgStreamBufferReadInt8+0x58>)
 8006ed4:	f001 ffbc 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7c1b      	ldrb	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <sbgStreamBufferReadInt8+0x46>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(int8_t))
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ffc9 	bl	8006e78 <sbgStreamBufferGetSpace>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <sbgStreamBufferReadInt8+0x40>
			return *((int8_t*)(pHandle->pCurrentPtr++));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	1c59      	adds	r1, r3, #1
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	60d1      	str	r1, [r2, #12]
 8006ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8006efa:	e003      	b.n	8006f04 <sbgStreamBufferReadInt8+0x48>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2208      	movs	r2, #8
 8006f00:	741a      	strb	r2, [r3, #16]
	return 0;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	0800b794 	.word	0x0800b794
 8006f10:	0800da40 	.word	0x0800da40
 8006f14:	0800b79c 	.word	0x0800b79c

08006f18 <sbgStreamBufferReadUint16LE>:
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d105      	bne.n	8006f32 <sbgStreamBufferReadUint16LE+0x1a>
 8006f26:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <sbgStreamBufferReadUint16LE+0x70>)
 8006f28:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <sbgStreamBufferReadUint16LE+0x74>)
 8006f2a:	2179      	movs	r1, #121	; 0x79
 8006f2c:	4818      	ldr	r0, [pc, #96]	; (8006f90 <sbgStreamBufferReadUint16LE+0x78>)
 8006f2e:	f001 ff8f 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7c1b      	ldrb	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d121      	bne.n	8006f7e <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff ff9c 	bl	8006e78 <sbgStreamBufferGetSpace>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d918      	bls.n	8006f78 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	1c59      	adds	r1, r3, #1
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	60d1      	str	r1, [r2, #12]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	1c59      	adds	r1, r3, #1
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	60d1      	str	r1, [r2, #12]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 8006f66:	89bb      	ldrh	r3, [r7, #12]
 8006f68:	b21a      	sxth	r2, r3
 8006f6a:	89fb      	ldrh	r3, [r7, #14]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	b21b      	sxth	r3, r3
 8006f70:	4313      	orrs	r3, r2
 8006f72:	b21b      	sxth	r3, r3
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	e003      	b.n	8006f80 <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	741a      	strb	r2, [r3, #16]
	return 0;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	0800b794 	.word	0x0800b794
 8006f8c:	0800d9d8 	.word	0x0800d9d8
 8006f90:	0800b7d8 	.word	0x0800b7d8

08006f94 <sbgStreamBufferReadInt32LE>:
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <sbgStreamBufferReadInt32LE+0x1c>
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <sbgStreamBufferReadInt32LE+0x90>)
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <sbgStreamBufferReadInt32LE+0x94>)
 8006fa6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006faa:	4820      	ldr	r0, [pc, #128]	; (800702c <sbgStreamBufferReadInt32LE+0x98>)
 8006fac:	f001 ff50 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7c1b      	ldrb	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d12f      	bne.n	8007018 <sbgStreamBufferReadInt32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(int32_t))
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff ff5d 	bl	8006e78 <sbgStreamBufferGetSpace>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d926      	bls.n	8007012 <sbgStreamBufferReadInt32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	1c59      	adds	r1, r3, #1
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	60d1      	str	r1, [r2, #12]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	1c59      	adds	r1, r3, #1
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	60d1      	str	r1, [r2, #12]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	1c59      	adds	r1, r3, #1
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	60d1      	str	r1, [r2, #12]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	60d1      	str	r1, [r2, #12]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	431a      	orrs	r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	041b      	lsls	r3, r3, #16
 8007008:	431a      	orrs	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	061b      	lsls	r3, r3, #24
 800700e:	4313      	orrs	r3, r2
 8007010:	e003      	b.n	800701a <sbgStreamBufferReadInt32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2208      	movs	r2, #8
 8007016:	741a      	strb	r2, [r3, #16]
	return 0;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0800b794 	.word	0x0800b794
 8007028:	0800da58 	.word	0x0800da58
 800702c:	0800b7d8 	.word	0x0800b7d8

08007030 <sbgStreamBufferReadUint32LE>:
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <sbgStreamBufferReadUint32LE+0x1c>
 800703e:	4b20      	ldr	r3, [pc, #128]	; (80070c0 <sbgStreamBufferReadUint32LE+0x90>)
 8007040:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <sbgStreamBufferReadUint32LE+0x94>)
 8007042:	f240 1189 	movw	r1, #393	; 0x189
 8007046:	4820      	ldr	r0, [pc, #128]	; (80070c8 <sbgStreamBufferReadUint32LE+0x98>)
 8007048:	f001 ff02 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	7c1b      	ldrb	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d12f      	bne.n	80070b4 <sbgStreamBufferReadUint32LE+0x84>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint32_t))
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ff0f 	bl	8006e78 <sbgStreamBufferGetSpace>
 800705a:	4603      	mov	r3, r0
 800705c:	2b03      	cmp	r3, #3
 800705e:	d926      	bls.n	80070ae <sbgStreamBufferReadUint32LE+0x7e>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	1c59      	adds	r1, r3, #1
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	60d1      	str	r1, [r2, #12]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	60bb      	str	r3, [r7, #8]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	60d1      	str	r1, [r2, #12]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]
				bytesValues[2] = *(pHandle->pCurrentPtr++);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	60d1      	str	r1, [r2, #12]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	613b      	str	r3, [r7, #16]
				bytesValues[3] = *(pHandle->pCurrentPtr++);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	1c59      	adds	r1, r3, #1
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	60d1      	str	r1, [r2, #12]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	617b      	str	r3, [r7, #20]
					return bytesValues[0] | (bytesValues[1] << 8) | (bytesValues[2] << 16) | (bytesValues[3] << 24);
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	431a      	orrs	r2, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	431a      	orrs	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	061b      	lsls	r3, r3, #24
 80070aa:	4313      	orrs	r3, r2
 80070ac:	e003      	b.n	80070b6 <sbgStreamBufferReadUint32LE+0x86>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2208      	movs	r2, #8
 80070b2:	741a      	strb	r2, [r3, #16]
	return 0;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	0800b794 	.word	0x0800b794
 80070c4:	0800da74 	.word	0x0800da74
 80070c8:	0800b7d8 	.word	0x0800b7d8

080070cc <sbgEComBinaryLogParseUtcData>:

	return gUtcStatusStr[utcStatus];
}

SbgErrorCode sbgEComBinaryLogParseUtcData(SbgStreamBuffer *pInputStream, SbgLogUtcData *pOutputData)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	assert(pInputStream);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <sbgEComBinaryLogParseUtcData+0x1c>
 80070dc:	4b2c      	ldr	r3, [pc, #176]	; (8007190 <sbgEComBinaryLogParseUtcData+0xc4>)
 80070de:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <sbgEComBinaryLogParseUtcData+0xc8>)
 80070e0:	2136      	movs	r1, #54	; 0x36
 80070e2:	482d      	ldr	r0, [pc, #180]	; (8007198 <sbgEComBinaryLogParseUtcData+0xcc>)
 80070e4:	f001 feb4 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d105      	bne.n	80070fa <sbgEComBinaryLogParseUtcData+0x2e>
 80070ee:	4b2b      	ldr	r3, [pc, #172]	; (800719c <sbgEComBinaryLogParseUtcData+0xd0>)
 80070f0:	4a28      	ldr	r2, [pc, #160]	; (8007194 <sbgEComBinaryLogParseUtcData+0xc8>)
 80070f2:	2137      	movs	r1, #55	; 0x37
 80070f4:	4828      	ldr	r0, [pc, #160]	; (8007198 <sbgEComBinaryLogParseUtcData+0xcc>)
 80070f6:	f001 feab 	bl	8008e50 <__assert_func>

	//
	// Read the frame payload
	//
	pOutputData->timeStamp		= sbgStreamBufferReadUint32LE(pInputStream);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff98 	bl	8007030 <sbgStreamBufferReadUint32LE>
 8007100:	4602      	mov	r2, r0
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	601a      	str	r2, [r3, #0]
	pOutputData->status			= sbgStreamBufferReadUint16LE(pInputStream);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff ff06 	bl	8006f18 <sbgStreamBufferReadUint16LE>
 800710c:	4603      	mov	r3, r0
 800710e:	461a      	mov	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	809a      	strh	r2, [r3, #4]
	pOutputData->year			= sbgStreamBufferReadUint16LE(pInputStream);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff feff 	bl	8006f18 <sbgStreamBufferReadUint16LE>
 800711a:	4603      	mov	r3, r0
 800711c:	461a      	mov	r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	80da      	strh	r2, [r3, #6]
	pOutputData->month			= sbgStreamBufferReadInt8LE(pInputStream);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff feca 	bl	8006ebc <sbgStreamBufferReadInt8>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	721a      	strb	r2, [r3, #8]
	pOutputData->day			= sbgStreamBufferReadInt8LE(pInputStream);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff fec3 	bl	8006ebc <sbgStreamBufferReadInt8>
 8007136:	4603      	mov	r3, r0
 8007138:	461a      	mov	r2, r3
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	725a      	strb	r2, [r3, #9]
	pOutputData->hour			= sbgStreamBufferReadInt8LE(pInputStream);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff febc 	bl	8006ebc <sbgStreamBufferReadInt8>
 8007144:	4603      	mov	r3, r0
 8007146:	461a      	mov	r2, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	729a      	strb	r2, [r3, #10]
	pOutputData->minute			= sbgStreamBufferReadInt8LE(pInputStream);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff feb5 	bl	8006ebc <sbgStreamBufferReadInt8>
 8007152:	4603      	mov	r3, r0
 8007154:	461a      	mov	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	72da      	strb	r2, [r3, #11]
	pOutputData->second			= sbgStreamBufferReadInt8LE(pInputStream);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff feae 	bl	8006ebc <sbgStreamBufferReadInt8>
 8007160:	4603      	mov	r3, r0
 8007162:	461a      	mov	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	731a      	strb	r2, [r3, #12]
	pOutputData->nanoSecond		= sbgStreamBufferReadInt32LE(pInputStream);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff13 	bl	8006f94 <sbgStreamBufferReadInt32LE>
 800716e:	4602      	mov	r2, r0
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	611a      	str	r2, [r3, #16]
	pOutputData->gpsTimeOfWeek	= sbgStreamBufferReadUint32LE(pInputStream);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff ff5b 	bl	8007030 <sbgStreamBufferReadUint32LE>
 800717a:	4602      	mov	r2, r0
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	615a      	str	r2, [r3, #20]

	//
	// Return if any error has occurred while parsing the frame
	//
	return sbgStreamBufferGetLastError(pInputStream);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fe27 	bl	8006dd4 <sbgStreamBufferGetLastError>
 8007186:	4603      	mov	r3, r0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	0800b954 	.word	0x0800b954
 8007194:	0800d9b8 	.word	0x0800d9b8
 8007198:	0800b8c4 	.word	0x0800b8c4
 800719c:	0800b964 	.word	0x0800b964

080071a0 <sbgStreamBufferInitForRead>:
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
	assert(pHandle);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d105      	bne.n	80071be <sbgStreamBufferInitForRead+0x1e>
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <sbgStreamBufferInitForRead+0x5c>)
 80071b4:	4a12      	ldr	r2, [pc, #72]	; (8007200 <sbgStreamBufferInitForRead+0x60>)
 80071b6:	21ff      	movs	r1, #255	; 0xff
 80071b8:	4812      	ldr	r0, [pc, #72]	; (8007204 <sbgStreamBufferInitForRead+0x64>)
 80071ba:	f001 fe49 	bl	8008e50 <__assert_func>
	assert(pLinkedBuffer);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <sbgStreamBufferInitForRead+0x32>
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <sbgStreamBufferInitForRead+0x68>)
 80071c6:	4a0e      	ldr	r2, [pc, #56]	; (8007200 <sbgStreamBufferInitForRead+0x60>)
 80071c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071cc:	480d      	ldr	r0, [pc, #52]	; (8007204 <sbgStreamBufferInitForRead+0x64>)
 80071ce:	f001 fe3f 	bl	8008e50 <__assert_func>
	pHandle->modes = SB_MODE_READ;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
	pHandle->bufferSize = bufferSize;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	605a      	str	r2, [r3, #4]
	pHandle->errorCode = SBG_NO_ERROR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	741a      	strb	r2, [r3, #16]
	pHandle->pBufferPtr = (uint8_t*)pLinkedBuffer;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	609a      	str	r2, [r3, #8]
	pHandle->pCurrentPtr = (uint8_t*)pLinkedBuffer;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	60da      	str	r2, [r3, #12]
	return SBG_NO_ERROR;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	0800b98c 	.word	0x0800b98c
 8007200:	0800dac4 	.word	0x0800dac4
 8007204:	0800b994 	.word	0x0800b994
 8007208:	0800b9d0 	.word	0x0800b9d0

0800720c <sbgEComBinaryLogParse>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComBinaryLogParse(SbgEComClass msgClass, SbgEComMsgId msg, const void *pPayload, size_t payloadSize, SbgBinaryLogData *pOutputData)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	; 0x28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60ba      	str	r2, [r7, #8]
 8007214:	607b      	str	r3, [r7, #4]
 8007216:	4603      	mov	r3, r0
 8007218:	73fb      	strb	r3, [r7, #15]
 800721a:	460b      	mov	r3, r1
 800721c:	73bb      	strb	r3, [r7, #14]
	SbgErrorCode		errorCode = SBG_NO_ERROR;
 800721e:	2300      	movs	r3, #0
 8007220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	SbgStreamBuffer		inputStream;

	assert(pPayload);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <sbgEComBinaryLogParse+0x2a>
 800722a:	4bce      	ldr	r3, [pc, #824]	; (8007564 <sbgEComBinaryLogParse+0x358>)
 800722c:	4ace      	ldr	r2, [pc, #824]	; (8007568 <sbgEComBinaryLogParse+0x35c>)
 800722e:	2124      	movs	r1, #36	; 0x24
 8007230:	48ce      	ldr	r0, [pc, #824]	; (800756c <sbgEComBinaryLogParse+0x360>)
 8007232:	f001 fe0d 	bl	8008e50 <__assert_func>
	assert(payloadSize > 0);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <sbgEComBinaryLogParse+0x3c>
 800723c:	4bcc      	ldr	r3, [pc, #816]	; (8007570 <sbgEComBinaryLogParse+0x364>)
 800723e:	4aca      	ldr	r2, [pc, #808]	; (8007568 <sbgEComBinaryLogParse+0x35c>)
 8007240:	2125      	movs	r1, #37	; 0x25
 8007242:	48ca      	ldr	r0, [pc, #808]	; (800756c <sbgEComBinaryLogParse+0x360>)
 8007244:	f001 fe04 	bl	8008e50 <__assert_func>
	assert(pOutputData);
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	2b00      	cmp	r3, #0
 800724c:	d105      	bne.n	800725a <sbgEComBinaryLogParse+0x4e>
 800724e:	4bc9      	ldr	r3, [pc, #804]	; (8007574 <sbgEComBinaryLogParse+0x368>)
 8007250:	4ac5      	ldr	r2, [pc, #788]	; (8007568 <sbgEComBinaryLogParse+0x35c>)
 8007252:	2126      	movs	r1, #38	; 0x26
 8007254:	48c5      	ldr	r0, [pc, #788]	; (800756c <sbgEComBinaryLogParse+0x360>)
 8007256:	f001 fdfb 	bl	8008e50 <__assert_func>

	//
	// Create an input stream buffer that points to the frame payload so we can easily parse it's content
	//
	sbgStreamBufferInitForRead(&inputStream, pPayload, payloadSize);
 800725a:	f107 0310 	add.w	r3, r7, #16
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff9c 	bl	80071a0 <sbgStreamBufferInitForRead>

	//
	// Handle the different classes of messages differently
	//
	if (msgClass == SBG_ECOM_CLASS_LOG_ECOM_0)
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f040 8184 	bne.w	8007578 <sbgEComBinaryLogParse+0x36c>
	{
		//
		// Parse the incoming log according to its type
		//
		switch (msg)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	3b01      	subs	r3, #1
 8007274:	2b32      	cmp	r3, #50	; 0x32
 8007276:	f200 8171 	bhi.w	800755c <sbgEComBinaryLogParse+0x350>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <sbgEComBinaryLogParse+0x74>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	0800734d 	.word	0x0800734d
 8007284:	080073fd 	.word	0x080073fd
 8007288:	08007363 	.word	0x08007363
 800728c:	08007497 	.word	0x08007497
 8007290:	080074ad 	.word	0x080074ad
 8007294:	0800738f 	.word	0x0800738f
 8007298:	080073a5 	.word	0x080073a5
 800729c:	080073bb 	.word	0x080073bb
 80072a0:	080073d1 	.word	0x080073d1
 80072a4:	0800755d 	.word	0x0800755d
 80072a8:	0800755d 	.word	0x0800755d
 80072ac:	0800755d 	.word	0x0800755d
 80072b0:	08007413 	.word	0x08007413
 80072b4:	08007429 	.word	0x08007429
 80072b8:	0800743f 	.word	0x0800743f
 80072bc:	08007413 	.word	0x08007413
 80072c0:	08007429 	.word	0x08007429
 80072c4:	0800743f 	.word	0x0800743f
 80072c8:	080073e7 	.word	0x080073e7
 80072cc:	0800755d 	.word	0x0800755d
 80072d0:	0800755d 	.word	0x0800755d
 80072d4:	0800755d 	.word	0x0800755d
 80072d8:	0800755d 	.word	0x0800755d
 80072dc:	08007531 	.word	0x08007531
 80072e0:	08007531 	.word	0x08007531
 80072e4:	08007531 	.word	0x08007531
 80072e8:	08007531 	.word	0x08007531
 80072ec:	08007531 	.word	0x08007531
 80072f0:	080074c3 	.word	0x080074c3
 80072f4:	080074d9 	.word	0x080074d9
 80072f8:	08007455 	.word	0x08007455
 80072fc:	080073d1 	.word	0x080073d1
 8007300:	0800755d 	.word	0x0800755d
 8007304:	0800755d 	.word	0x0800755d
 8007308:	0800755d 	.word	0x0800755d
 800730c:	080074ef 	.word	0x080074ef
 8007310:	08007505 	.word	0x08007505
 8007314:	08007455 	.word	0x08007455
 8007318:	0800755d 	.word	0x0800755d
 800731c:	0800755d 	.word	0x0800755d
 8007320:	0800755d 	.word	0x0800755d
 8007324:	0800755d 	.word	0x0800755d
 8007328:	0800755d 	.word	0x0800755d
 800732c:	08007379 	.word	0x08007379
 8007330:	08007531 	.word	0x08007531
 8007334:	08007531 	.word	0x08007531
 8007338:	0800751b 	.word	0x0800751b
 800733c:	08007547 	.word	0x08007547
 8007340:	08007481 	.word	0x08007481
 8007344:	0800746b 	.word	0x0800746b
 8007348:	0800746b 	.word	0x0800746b
		{
		case SBG_ECOM_LOG_STATUS:
			errorCode = sbgEComBinaryLogParseStatusData(&inputStream, &pOutputData->statusData);
 800734c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734e:	f107 0310 	add.w	r3, r7, #16
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fabf 	bl	80068d8 <sbgEComBinaryLogParseStatusData>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007360:	e122      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_IMU_DATA:
			errorCode = sbgEComBinaryLogParseImuData(&inputStream, &pOutputData->imuData);
 8007362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007364:	f107 0310 	add.w	r3, r7, #16
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f7fd fd8e 	bl	8004e8c <sbgEComBinaryLogParseImuData>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007376:	e117      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_IMU_SHORT:
			errorCode = sbgEComBinaryLogParseImuShort(&inputStream, &pOutputData->imuShort);
 8007378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737a:	f107 0310 	add.w	r3, r7, #16
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd fe1f 	bl	8004fc4 <sbgEComBinaryLogParseImuShort>
 8007386:	4603      	mov	r3, r0
 8007388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800738c:	e10c      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_EKF_EULER:
			errorCode = sbgEComBinaryLogParseEkfEulerData(&inputStream, &pOutputData->ekfEulerData);
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	f107 0310 	add.w	r3, r7, #16
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f7fc fd8a 	bl	8003eb0 <sbgEComBinaryLogParseEkfEulerData>
 800739c:	4603      	mov	r3, r0
 800739e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80073a2:	e101      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_EKF_QUAT:
			errorCode = sbgEComBinaryLogParseEkfQuatData(&inputStream, &pOutputData->ekfQuatData);
 80073a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a6:	f107 0310 	add.w	r3, r7, #16
 80073aa:	4611      	mov	r1, r2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fc fde3 	bl	8003f78 <sbgEComBinaryLogParseEkfQuatData>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80073b8:	e0f6      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_EKF_NAV:
			errorCode = sbgEComBinaryLogParseEkfNavData(&inputStream, &pOutputData->ekfNavData);
 80073ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073bc:	f107 0310 	add.w	r3, r7, #16
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fc fe44 	bl	8004050 <sbgEComBinaryLogParseEkfNavData>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80073ce:	e0eb      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_SHIP_MOTION:
		case SBG_ECOM_LOG_SHIP_MOTION_HP:
			errorCode = sbgEComBinaryLogParseShipMotionData(&inputStream, &pOutputData->shipMotionData);
 80073d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d2:	f107 0310 	add.w	r3, r7, #16
 80073d6:	4611      	mov	r1, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff f8e3 	bl	80065a4 <sbgEComBinaryLogParseShipMotionData>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80073e4:	e0e0      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_ODO_VEL:
			errorCode = sbgEComBinaryLogParseOdometerData(&inputStream, &pOutputData->odometerData);
 80073e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e8:	f107 0310 	add.w	r3, r7, #16
 80073ec:	4611      	mov	r1, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fa22 	bl	8005838 <sbgEComBinaryLogParseOdometerData>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80073fa:	e0d5      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_UTC_TIME:
			errorCode = sbgEComBinaryLogParseUtcData(&inputStream, &pOutputData->utcData);
 80073fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fe:	f107 0310 	add.w	r3, r7, #16
 8007402:	4611      	mov	r1, r2
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fe61 	bl	80070cc <sbgEComBinaryLogParseUtcData>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007410:	e0ca      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_GPS1_VEL:
		case SBG_ECOM_LOG_GPS2_VEL:
			errorCode = sbgEComBinaryLogParseGpsVelData(&inputStream, &pOutputData->gpsVelData);
 8007412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007414:	f107 0310 	add.w	r3, r7, #16
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f7fd f9e8 	bl	80047f0 <sbgEComBinaryLogParseGpsVelData>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007426:	e0bf      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_GPS1_POS:
		case SBG_ECOM_LOG_GPS2_POS:
			errorCode = sbgEComBinaryLogParseGpsPosData(&inputStream, &pOutputData->gpsPosData);
 8007428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742a:	f107 0310 	add.w	r3, r7, #16
 800742e:	4611      	mov	r1, r2
 8007430:	4618      	mov	r0, r3
 8007432:	f7fd fa57 	bl	80048e4 <sbgEComBinaryLogParseGpsPosData>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800743c:	e0b4      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_GPS1_HDT:
		case SBG_ECOM_LOG_GPS2_HDT:
			errorCode = sbgEComBinaryLogParseGpsHdtData(&inputStream, &pOutputData->gpsHdtData);
 800743e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007440:	f107 0310 	add.w	r3, r7, #16
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fd fae6 	bl	8004a18 <sbgEComBinaryLogParseGpsHdtData>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007452:	e0a9      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_GPS1_RAW:
		case SBG_ECOM_LOG_GPS2_RAW:
			errorCode = sbgEComBinaryLogParseGpsRawData(&inputStream, &pOutputData->gpsRawData);
 8007454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007456:	f107 0310 	add.w	r3, r7, #16
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f7fd fb49 	bl	8004af4 <sbgEComBinaryLogParseGpsRawData>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007468:	e09e      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_GPS1_SAT:
		case SBG_ECOM_LOG_GPS2_SAT:
			errorCode = sbgEComBinaryLogParseSatGroupData(&inputStream, &pOutputData->satGroupData);
 800746a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746c:	f107 0310 	add.w	r3, r7, #16
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fe80 	bl	8006178 <sbgEComBinaryLogParseSatGroupData>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800747e:	e093      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_RTCM_RAW:
			errorCode = sbgEComBinaryLogParseRtcmRawData(&inputStream, &pOutputData->rtcmRawData);
 8007480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007482:	f107 0310 	add.w	r3, r7, #16
 8007486:	4611      	mov	r1, r2
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe faf1 	bl	8005a70 <sbgEComBinaryLogParseRtcmRawData>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007494:	e088      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_MAG:
			errorCode = sbgEComBinaryLogParseMagData(&inputStream, &pOutputData->magData);
 8007496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007498:	f107 0310 	add.w	r3, r7, #16
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fd fffc 	bl	800549c <sbgEComBinaryLogParseMagData>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80074aa:	e07d      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_MAG_CALIB:
			errorCode = sbgEComBinaryLogParseMagCalibData(&inputStream, &pOutputData->magCalibData);
 80074ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe f855 	bl	8005564 <sbgEComBinaryLogParseMagCalibData>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80074c0:	e072      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_DVL_BOTTOM_TRACK:
			errorCode = sbgEComBinaryLogParseDvlData(&inputStream, &pOutputData->dvlData);
 80074c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c4:	f107 0310 	add.w	r3, r7, #16
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fc fb14 	bl	8003af8 <sbgEComBinaryLogParseDvlData>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80074d6:	e067      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_DVL_WATER_TRACK:
			errorCode = sbgEComBinaryLogParseDvlData(&inputStream, &pOutputData->dvlData);
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	f107 0310 	add.w	r3, r7, #16
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fc fb09 	bl	8003af8 <sbgEComBinaryLogParseDvlData>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80074ec:	e05c      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_AIR_DATA:
			errorCode = sbgEComBinaryLogParseAirData(&inputStream, &pOutputData->airData);
 80074ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f0:	f107 0310 	add.w	r3, r7, #16
 80074f4:	4611      	mov	r1, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fb fe64 	bl	80031c4 <sbgEComBinaryLogParseAirData>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007502:	e051      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_USBL:
			errorCode = sbgEComBinaryLogParseUsblData(&inputStream, &pOutputData->usblData);
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	f107 0310 	add.w	r3, r7, #16
 800750a:	4611      	mov	r1, r2
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fbfd 	bl	8006d0c <sbgEComBinaryLogParseUsblData>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007518:	e046      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_DEPTH:
			errorCode = sbgEComBinaryLogParseDepth(&inputStream, &pOutputData->depthData);
 800751a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751c:	f107 0310 	add.w	r3, r7, #16
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f7fb fff0 	bl	8003508 <sbgEComBinaryLogParseDepth>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800752e:	e03b      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_EVENT_C:
		case SBG_ECOM_LOG_EVENT_D:
		case SBG_ECOM_LOG_EVENT_E:
		case SBG_ECOM_LOG_EVENT_OUT_A:
		case SBG_ECOM_LOG_EVENT_OUT_B:
			errorCode = sbgEComBinaryLogParseEvent(&inputStream, &pOutputData->eventMarker);
 8007530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007532:	f107 0310 	add.w	r3, r7, #16
 8007536:	4611      	mov	r1, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f7fc ff25 	bl	8004388 <sbgEComBinaryLogParseEvent>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007544:	e030      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		case SBG_ECOM_LOG_DIAG:
			errorCode = sbgEComBinaryLogParseDiagData(&inputStream, &pOutputData->diagData);
 8007546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007548:	f107 0310 	add.w	r3, r7, #16
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f7fc f956 	bl	8003800 <sbgEComBinaryLogParseDiagData>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800755a:	e025      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>

		default:
			errorCode = SBG_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007562:	e021      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
 8007564:	0800b9e0 	.word	0x0800b9e0
 8007568:	0800daac 	.word	0x0800daac
 800756c:	0800b9ec 	.word	0x0800b9ec
 8007570:	0800ba20 	.word	0x0800ba20
 8007574:	0800ba30 	.word	0x0800ba30
		}
	}
	else if (msgClass == SBG_ECOM_CLASS_LOG_ECOM_1)
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d111      	bne.n	80075a2 <sbgEComBinaryLogParse+0x396>
	{
		//
		// Parse the message depending on the message ID
		//
		switch ((SbgEComLog1)msg)
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <sbgEComBinaryLogParse+0x38e>
		{
		case SBG_ECOM_LOG_FAST_IMU_DATA:
			errorCode = sbgEComBinaryLogParseFastImuData(&inputStream, &pOutputData->fastImuData);
 8007584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007586:	f107 0310 	add.w	r3, r7, #16
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f7fd fd79 	bl	8005084 <sbgEComBinaryLogParseFastImuData>
 8007592:	4603      	mov	r3, r0
 8007594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8007598:	e006      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
		default:
			errorCode = SBG_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075a0:	e002      	b.n	80075a8 <sbgEComBinaryLogParse+0x39c>
	else
	{
		//
		// Un-handled message class
		//
		errorCode = SBG_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return errorCode;
 80075a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3728      	adds	r7, #40	; 0x28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <sbgEComBinaryLogCleanup>:

void sbgEComBinaryLogCleanup(SbgBinaryLogData *pLogData, SbgEComClass msgClass, SbgEComMsgId msgId)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
 80075c0:	4613      	mov	r3, r2
 80075c2:	70bb      	strb	r3, [r7, #2]
	assert(pLogData);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <sbgEComBinaryLogCleanup+0x22>
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <sbgEComBinaryLogCleanup+0x44>)
 80075cc:	4a0b      	ldr	r2, [pc, #44]	; (80075fc <sbgEComBinaryLogCleanup+0x48>)
 80075ce:	21ab      	movs	r1, #171	; 0xab
 80075d0:	480b      	ldr	r0, [pc, #44]	; (8007600 <sbgEComBinaryLogCleanup+0x4c>)
 80075d2:	f001 fc3d 	bl	8008e50 <__assert_func>

	if (msgClass == SBG_ECOM_CLASS_LOG_ECOM_0)
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <sbgEComBinaryLogCleanup+0x3a>
	{
		switch (msgId)
 80075dc:	78bb      	ldrb	r3, [r7, #2]
 80075de:	3b32      	subs	r3, #50	; 0x32
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d805      	bhi.n	80075f0 <sbgEComBinaryLogCleanup+0x3c>
		{
		case SBG_ECOM_LOG_GPS1_SAT:
		case SBG_ECOM_LOG_GPS2_SAT:
			sbgLogSatGroupDataDestroy(&pLogData->satGroupData);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fe74 	bl	80062d4 <sbgLogSatGroupDataDestroy>
			break;
 80075ec:	e000      	b.n	80075f0 <sbgEComBinaryLogCleanup+0x3c>
		}
	}
 80075ee:	bf00      	nop
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	0800ba3c 	.word	0x0800ba3c
 80075fc:	0800dae0 	.word	0x0800dae0
 8007600:	0800b9ec 	.word	0x0800b9ec

08007604 <sbgEComGetConstellationFromSignalId>:
//----------------------------------------------------------------------//
//- Public functions                                                   -//
//----------------------------------------------------------------------//

SbgEComConstellationId sbgEComGetConstellationFromSignalId(SbgEComSignalId signalId)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
	SbgEComConstellationId	constellationId = SBG_ECOM_CONSTELLATION_ID_UNKNOWN;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]

	//
	// Don't use a default catch to explicitly handle ALL enum values
	//
	switch (signalId)
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	2bdc      	cmp	r3, #220	; 0xdc
 8007616:	d039      	beq.n	800768c <sbgEComGetConstellationFromSignalId+0x88>
 8007618:	2bdc      	cmp	r3, #220	; 0xdc
 800761a:	dc3a      	bgt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 800761c:	2bcf      	cmp	r3, #207	; 0xcf
 800761e:	dc38      	bgt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 8007620:	2bc8      	cmp	r3, #200	; 0xc8
 8007622:	da30      	bge.n	8007686 <sbgEComGetConstellationFromSignalId+0x82>
 8007624:	2bb7      	cmp	r3, #183	; 0xb7
 8007626:	dc34      	bgt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 8007628:	2bb4      	cmp	r3, #180	; 0xb4
 800762a:	da29      	bge.n	8007680 <sbgEComGetConstellationFromSignalId+0x7c>
 800762c:	2ba9      	cmp	r3, #169	; 0xa9
 800762e:	dc30      	bgt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 8007630:	2b96      	cmp	r3, #150	; 0x96
 8007632:	da22      	bge.n	800767a <sbgEComGetConstellationFromSignalId+0x76>
 8007634:	2b7e      	cmp	r3, #126	; 0x7e
 8007636:	dc2c      	bgt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 8007638:	2b64      	cmp	r3, #100	; 0x64
 800763a:	da1b      	bge.n	8007674 <sbgEComGetConstellationFromSignalId+0x70>
 800763c:	2b4e      	cmp	r3, #78	; 0x4e
 800763e:	dc28      	bgt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 8007640:	2b3c      	cmp	r3, #60	; 0x3c
 8007642:	da14      	bge.n	800766e <sbgEComGetConstellationFromSignalId+0x6a>
 8007644:	2b2e      	cmp	r3, #46	; 0x2e
 8007646:	dc24      	bgt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 8007648:	2b28      	cmp	r3, #40	; 0x28
 800764a:	da0d      	bge.n	8007668 <sbgEComGetConstellationFromSignalId+0x64>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <sbgEComGetConstellationFromSignalId+0x58>
 8007650:	2b00      	cmp	r3, #0
 8007652:	db1e      	blt.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 8007654:	3b0a      	subs	r3, #10
 8007656:	2b13      	cmp	r3, #19
 8007658:	d81b      	bhi.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
 800765a:	e002      	b.n	8007662 <sbgEComGetConstellationFromSignalId+0x5e>
	{
	case SBG_ECOM_SIGNAL_ID_UNKNOWN:
		constellationId = SBG_ECOM_CONSTELLATION_ID_UNKNOWN;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
		break;
 8007660:	e017      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
	case SBG_ECOM_SIGNAL_ID_GPS_L2M:
	case SBG_ECOM_SIGNAL_ID_GPS_L2P:
	case SBG_ECOM_SIGNAL_ID_GPS_L5_IQ:
	case SBG_ECOM_SIGNAL_ID_GPS_L5_I:
	case SBG_ECOM_SIGNAL_ID_GPS_L5_Q:
		constellationId = SBG_ECOM_CONSTELLATION_ID_GPS;
 8007662:	2301      	movs	r3, #1
 8007664:	73fb      	strb	r3, [r7, #15]
		break;
 8007666:	e014      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
	case SBG_ECOM_SIGNAL_ID_GLONASS_G2_P:
	case SBG_ECOM_SIGNAL_ID_GLONASS_G2_CA:
	case SBG_ECOM_SIGNAL_ID_GLONASS_G3_I:
	case SBG_ECOM_SIGNAL_ID_GLONASS_G3_Q:
	case SBG_ECOM_SIGNAL_ID_GLONASS_G3_IQ:
		constellationId = SBG_ECOM_CONSTELLATION_ID_GLONASS;
 8007668:	2302      	movs	r3, #2
 800766a:	73fb      	strb	r3, [r7, #15]
		break;
 800766c:	e011      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
	case SBG_ECOM_SIGNAL_ID_GALILEO_E6_BC:
	case SBG_ECOM_SIGNAL_ID_GALILEO_E6_C:
	case SBG_ECOM_SIGNAL_ID_GALILEO_E6_B:
	case SBG_ECOM_SIGNAL_ID_GALILEO_E6_ABC:
	case SBG_ECOM_SIGNAL_ID_GALILEO_E6_A:
		constellationId = SBG_ECOM_CONSTELLATION_ID_GALILEO;
 800766e:	2303      	movs	r3, #3
 8007670:	73fb      	strb	r3, [r7, #15]
		break;
 8007672:	e00e      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
	case SBG_ECOM_SIGNAL_ID_BEIDOU_B3I:
	case SBG_ECOM_SIGNAL_ID_BEIDOU_B3Q:
	case SBG_ECOM_SIGNAL_ID_BEIDOU_B3A_D:
	case SBG_ECOM_SIGNAL_ID_BEIDOU_B3A_P:
	case SBG_ECOM_SIGNAL_ID_BEIDOU_B3A_DP:
		constellationId = SBG_ECOM_CONSTELLATION_ID_BEIDOU;
 8007674:	2304      	movs	r3, #4
 8007676:	73fb      	strb	r3, [r7, #15]
		break;
 8007678:	e00b      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
	case SBG_ECOM_SIGNAL_ID_QZSS_L6_P:
	case SBG_ECOM_SIGNAL_ID_QZSS_L6_DP:
	case SBG_ECOM_SIGNAL_ID_QZSS_L6_D:
	case SBG_ECOM_SIGNAL_ID_QZSS_L6_E:
	case SBG_ECOM_SIGNAL_ID_QZSS_L6_DE:
		constellationId = SBG_ECOM_CONSTELLATION_ID_QZSS;
 800767a:	2305      	movs	r3, #5
 800767c:	73fb      	strb	r3, [r7, #15]
		break;
 800767e:	e008      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
	//
	case SBG_ECOM_SIGNAL_ID_SBAS_L1_CA:
	case SBG_ECOM_SIGNAL_ID_SBAS_L5_I:
	case SBG_ECOM_SIGNAL_ID_SBAS_L5_Q:
	case SBG_ECOM_SIGNAL_ID_SBAS_L5_IQ:
		constellationId = SBG_ECOM_CONSTELLATION_ID_SBAS;
 8007680:	2306      	movs	r3, #6
 8007682:	73fb      	strb	r3, [r7, #15]
		break;
 8007684:	e005      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>
	case SBG_ECOM_SIGNAL_ID_IRNSS_L5_BC:
	case SBG_ECOM_SIGNAL_ID_IRNSS_S9_A:
	case SBG_ECOM_SIGNAL_ID_IRNSS_S9_B:
	case SBG_ECOM_SIGNAL_ID_IRNSS_S9_C:
	case SBG_ECOM_SIGNAL_ID_IRNSS_S9_BC:
		constellationId = SBG_ECOM_CONSTELLATION_ID_IRNSS;
 8007686:	2307      	movs	r3, #7
 8007688:	73fb      	strb	r3, [r7, #15]
		break;
 800768a:	e002      	b.n	8007692 <sbgEComGetConstellationFromSignalId+0x8e>

	//
	// L-Band system
	//
	case SBG_ECOM_SIGNAL_ID_LBAND:
		constellationId = SBG_ECOM_CONSTELLATION_ID_LBAND;
 800768c:	2308      	movs	r3, #8
 800768e:	73fb      	strb	r3, [r7, #15]
		break;
 8007690:	bf00      	nop
	}

	return constellationId;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <sbgEComSignalIdIsValid>:

bool sbgEComSignalIdIsValid(uint8_t signalId)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	71fb      	strb	r3, [r7, #7]
	if (	(signalId == SBG_ECOM_SIGNAL_ID_UNKNOWN) ||
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d006      	beq.n	80076be <sbgEComSignalIdIsValid+0x1e>
			(sbgEComGetConstellationFromSignalId(signalId) != SBG_ECOM_CONSTELLATION_ID_UNKNOWN))
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ffa6 	bl	8007604 <sbgEComGetConstellationFromSignalId>
 80076b8:	4603      	mov	r3, r0
	if (	(signalId == SBG_ECOM_SIGNAL_ID_UNKNOWN) ||
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <sbgEComSignalIdIsValid+0x22>
	{
		return true;
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <sbgEComSignalIdIsValid+0x24>
	}
	else 
	{
		return false;
 80076c2:	2300      	movs	r3, #0
	}
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <sbgEComConstellationIdIsValid>:
	assert(signalIdDesc[0].id == SBG_ECOM_SIGNAL_ID_UNKNOWN);
	return signalIdDesc[0].pName;
}

bool sbgEComConstellationIdIsValid(uint8_t constellationId)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	71fb      	strb	r3, [r7, #7]
	bool	constellationIdIsValid = false;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]

	switch (constellationId)
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d802      	bhi.n	80076e6 <sbgEComConstellationIdIsValid+0x1a>
	case SBG_ECOM_CONSTELLATION_ID_GALILEO:
	case SBG_ECOM_CONSTELLATION_ID_BEIDOU:
	case SBG_ECOM_CONSTELLATION_ID_SBAS:
	case SBG_ECOM_CONSTELLATION_ID_IRNSS:
	case SBG_ECOM_CONSTELLATION_ID_LBAND:
		constellationIdIsValid = true;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
		break;
 80076e4:	bf00      	nop
	}

	return constellationIdIsValid;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <sbgInterfaceRead>:
 * \param[in]	bytesToRead								Maximum number of bytes to try to read on the interface.
 * \return												SBG_NO_ERROR if zero or some bytes have been read successfully.
 *														SBG_INVALID_PARAMETER if the interface doesn't support read operations.
 */
SBG_INLINE SbgErrorCode sbgInterfaceRead(SbgInterface *pInterface, void *pBuffer, size_t *pReadBytes, size_t bytesToRead)
{
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
	SbgErrorCode	errorCode;

	assert(pInterface);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <sbgInterfaceRead+0x22>
 8007708:	4b19      	ldr	r3, [pc, #100]	; (8007770 <sbgInterfaceRead+0x7c>)
 800770a:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <sbgInterfaceRead+0x80>)
 800770c:	f240 1145 	movw	r1, #325	; 0x145
 8007710:	4819      	ldr	r0, [pc, #100]	; (8007778 <sbgInterfaceRead+0x84>)
 8007712:	f001 fb9d 	bl	8008e50 <__assert_func>
	assert(pBuffer);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <sbgInterfaceRead+0x36>
 800771c:	4b17      	ldr	r3, [pc, #92]	; (800777c <sbgInterfaceRead+0x88>)
 800771e:	4a15      	ldr	r2, [pc, #84]	; (8007774 <sbgInterfaceRead+0x80>)
 8007720:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007724:	4814      	ldr	r0, [pc, #80]	; (8007778 <sbgInterfaceRead+0x84>)
 8007726:	f001 fb93 	bl	8008e50 <__assert_func>
	assert(pReadBytes);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <sbgInterfaceRead+0x4a>
 8007730:	4b13      	ldr	r3, [pc, #76]	; (8007780 <sbgInterfaceRead+0x8c>)
 8007732:	4a10      	ldr	r2, [pc, #64]	; (8007774 <sbgInterfaceRead+0x80>)
 8007734:	f240 1147 	movw	r1, #327	; 0x147
 8007738:	480f      	ldr	r0, [pc, #60]	; (8007778 <sbgInterfaceRead+0x84>)
 800773a:	f001 fb89 	bl	8008e50 <__assert_func>

	if (pInterface->pReadFunc)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <sbgInterfaceRead+0x66>
	{
		errorCode = pInterface->pReadFunc(pInterface, pBuffer, pReadBytes, bytesToRead);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	47a0      	blx	r4
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]
 8007758:	e004      	b.n	8007764 <sbgInterfaceRead+0x70>
	}
	else
	{
		*pReadBytes	= 0;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
		errorCode	= SBG_INVALID_PARAMETER;
 8007760:	2309      	movs	r3, #9
 8007762:	75fb      	strb	r3, [r7, #23]
	}

	return errorCode;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
}
 8007766:	4618      	mov	r0, r3
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd90      	pop	{r4, r7, pc}
 800776e:	bf00      	nop
 8007770:	0800ba48 	.word	0x0800ba48
 8007774:	0800db68 	.word	0x0800db68
 8007778:	0800ba54 	.word	0x0800ba54
 800777c:	0800ba84 	.word	0x0800ba84
 8007780:	0800ba8c 	.word	0x0800ba8c

08007784 <sbgStreamBufferInitForRead>:
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
	assert(pHandle);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <sbgStreamBufferInitForRead+0x1e>
 8007796:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <sbgStreamBufferInitForRead+0x5c>)
 8007798:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <sbgStreamBufferInitForRead+0x60>)
 800779a:	21ff      	movs	r1, #255	; 0xff
 800779c:	4812      	ldr	r0, [pc, #72]	; (80077e8 <sbgStreamBufferInitForRead+0x64>)
 800779e:	f001 fb57 	bl	8008e50 <__assert_func>
	assert(pLinkedBuffer);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d106      	bne.n	80077b6 <sbgStreamBufferInitForRead+0x32>
 80077a8:	4b10      	ldr	r3, [pc, #64]	; (80077ec <sbgStreamBufferInitForRead+0x68>)
 80077aa:	4a0e      	ldr	r2, [pc, #56]	; (80077e4 <sbgStreamBufferInitForRead+0x60>)
 80077ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077b0:	480d      	ldr	r0, [pc, #52]	; (80077e8 <sbgStreamBufferInitForRead+0x64>)
 80077b2:	f001 fb4d 	bl	8008e50 <__assert_func>
	pHandle->modes = SB_MODE_READ;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
	pHandle->bufferSize = bufferSize;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]
	pHandle->errorCode = SBG_NO_ERROR;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	741a      	strb	r2, [r3, #16]
	pHandle->pBufferPtr = (uint8_t*)pLinkedBuffer;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	609a      	str	r2, [r3, #8]
	pHandle->pCurrentPtr = (uint8_t*)pLinkedBuffer;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	60da      	str	r2, [r3, #12]
	return SBG_NO_ERROR;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	0800ba98 	.word	0x0800ba98
 80077e4:	0800dbd4 	.word	0x0800dbd4
 80077e8:	0800baa0 	.word	0x0800baa0
 80077ec:	0800badc 	.word	0x0800badc

080077f0 <sbgStreamBufferGetLastError>:
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <sbgStreamBufferGetLastError+0x1c>
 80077fe:	4b06      	ldr	r3, [pc, #24]	; (8007818 <sbgStreamBufferGetLastError+0x28>)
 8007800:	4a06      	ldr	r2, [pc, #24]	; (800781c <sbgStreamBufferGetLastError+0x2c>)
 8007802:	f240 111d 	movw	r1, #285	; 0x11d
 8007806:	4806      	ldr	r0, [pc, #24]	; (8007820 <sbgStreamBufferGetLastError+0x30>)
 8007808:	f001 fb22 	bl	8008e50 <__assert_func>
	return pHandle->errorCode;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7c1b      	ldrb	r3, [r3, #16]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	0800ba98 	.word	0x0800ba98
 800781c:	0800dc74 	.word	0x0800dc74
 8007820:	0800baa0 	.word	0x0800baa0

08007824 <sbgStreamBufferGetSize>:
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <sbgStreamBufferGetSize+0x1c>
 8007832:	4b06      	ldr	r3, [pc, #24]	; (800784c <sbgStreamBufferGetSize+0x28>)
 8007834:	4a06      	ldr	r2, [pc, #24]	; (8007850 <sbgStreamBufferGetSize+0x2c>)
 8007836:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800783a:	4806      	ldr	r0, [pc, #24]	; (8007854 <sbgStreamBufferGetSize+0x30>)
 800783c:	f001 fb08 	bl	8008e50 <__assert_func>
	return pHandle->bufferSize;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	0800ba98 	.word	0x0800ba98
 8007850:	0800dbf0 	.word	0x0800dbf0
 8007854:	0800baa0 	.word	0x0800baa0

08007858 <sbgStreamBufferGetLength>:
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <sbgStreamBufferGetLength+0x1c>
 8007866:	4b08      	ldr	r3, [pc, #32]	; (8007888 <sbgStreamBufferGetLength+0x30>)
 8007868:	4a08      	ldr	r2, [pc, #32]	; (800788c <sbgStreamBufferGetLength+0x34>)
 800786a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800786e:	4808      	ldr	r0, [pc, #32]	; (8007890 <sbgStreamBufferGetLength+0x38>)
 8007870:	f001 faee 	bl	8008e50 <__assert_func>
	return ((size_t)pHandle->pCurrentPtr - (size_t)pHandle->pBufferPtr);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	461a      	mov	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	1ad3      	subs	r3, r2, r3
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	0800ba98 	.word	0x0800ba98
 800788c:	0800dc3c 	.word	0x0800dc3c
 8007890:	0800baa0 	.word	0x0800baa0

08007894 <sbgStreamBufferGetSpace>:
{
 8007894:	b590      	push	{r4, r7, lr}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <sbgStreamBufferGetSpace+0x1c>
 80078a2:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <sbgStreamBufferGetSpace+0x38>)
 80078a4:	4a0a      	ldr	r2, [pc, #40]	; (80078d0 <sbgStreamBufferGetSpace+0x3c>)
 80078a6:	f240 1167 	movw	r1, #359	; 0x167
 80078aa:	480a      	ldr	r0, [pc, #40]	; (80078d4 <sbgStreamBufferGetSpace+0x40>)
 80078ac:	f001 fad0 	bl	8008e50 <__assert_func>
	return sbgStreamBufferGetSize(pHandle) - sbgStreamBufferGetLength(pHandle);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff ffb7 	bl	8007824 <sbgStreamBufferGetSize>
 80078b6:	4604      	mov	r4, r0
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ffcd 	bl	8007858 <sbgStreamBufferGetLength>
 80078be:	4603      	mov	r3, r0
 80078c0:	1ae3      	subs	r3, r4, r3
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd90      	pop	{r4, r7, pc}
 80078ca:	bf00      	nop
 80078cc:	0800ba98 	.word	0x0800ba98
 80078d0:	0800dc24 	.word	0x0800dc24
 80078d4:	0800baa0 	.word	0x0800baa0

080078d8 <sbgStreamBufferSeek>:
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af04      	add	r7, sp, #16
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	71fb      	strb	r3, [r7, #7]
	assert(pHandle);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d106      	bne.n	80078fa <sbgStreamBufferSeek+0x22>
 80078ec:	4b48      	ldr	r3, [pc, #288]	; (8007a10 <sbgStreamBufferSeek+0x138>)
 80078ee:	4a49      	ldr	r2, [pc, #292]	; (8007a14 <sbgStreamBufferSeek+0x13c>)
 80078f0:	f240 1179 	movw	r1, #377	; 0x179
 80078f4:	4848      	ldr	r0, [pc, #288]	; (8007a18 <sbgStreamBufferSeek+0x140>)
 80078f6:	f001 faab 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	7c1b      	ldrb	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 8080 	bne.w	8007a04 <sbgStreamBufferSeek+0x12c>
		switch (origin)
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d82a      	bhi.n	8007960 <sbgStreamBufferSeek+0x88>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <sbgStreamBufferSeek+0x38>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007921 	.word	0x08007921
 8007914:	0800792f 	.word	0x0800792f
 8007918:	0800793d 	.word	0x0800793d
 800791c:	0800794d 	.word	0x0800794d
			pHandle->pCurrentPtr = pHandle->pBufferPtr + offset;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	441a      	add	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	60da      	str	r2, [r3, #12]
			break;
 800792c:	e029      	b.n	8007982 <sbgStreamBufferSeek+0xaa>
			pHandle->pCurrentPtr += offset;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	441a      	add	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60da      	str	r2, [r3, #12]
			break;
 800793a:	e022      	b.n	8007982 <sbgStreamBufferSeek+0xaa>
			pHandle->pCurrentPtr -= offset;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	425b      	negs	r3, r3
 8007944:	441a      	add	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	60da      	str	r2, [r3, #12]
			break;
 800794a:	e01a      	b.n	8007982 <sbgStreamBufferSeek+0xaa>
			pHandle->pCurrentPtr = pHandle->pBufferPtr + (pHandle->bufferSize - offset);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6859      	ldr	r1, [r3, #4]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	1acb      	subs	r3, r1, r3
 8007958:	441a      	add	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	60da      	str	r2, [r3, #12]
			break;
 800795e:	e010      	b.n	8007982 <sbgStreamBufferSeek+0xaa>
			pHandle->errorCode = SBG_INVALID_PARAMETER;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2209      	movs	r2, #9
 8007964:	741a      	strb	r2, [r3, #16]
			SBG_LOG_ERROR(pHandle->errorCode, "Invalid origin parameter");
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	7c1b      	ldrb	r3, [r3, #16]
 800796a:	4a2c      	ldr	r2, [pc, #176]	; (8007a1c <sbgStreamBufferSeek+0x144>)
 800796c:	9202      	str	r2, [sp, #8]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	2300      	movs	r3, #0
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4b2a      	ldr	r3, [pc, #168]	; (8007a20 <sbgStreamBufferSeek+0x148>)
 8007976:	f240 1293 	movw	r2, #403	; 0x193
 800797a:	492a      	ldr	r1, [pc, #168]	; (8007a24 <sbgStreamBufferSeek+0x14c>)
 800797c:	482a      	ldr	r0, [pc, #168]	; (8007a28 <sbgStreamBufferSeek+0x150>)
 800797e:	f7fb f9cb 	bl	8002d18 <sbgPlatformDebugLogMsg>
		if (pHandle->errorCode == SBG_NO_ERROR)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	7c1b      	ldrb	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d13c      	bne.n	8007a04 <sbgStreamBufferSeek+0x12c>
			if (pHandle->pCurrentPtr < pHandle->pBufferPtr)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	429a      	cmp	r2, r3
 8007994:	d215      	bcs.n	80079c2 <sbgStreamBufferSeek+0xea>
				pHandle->pCurrentPtr = pHandle->pBufferPtr;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	60da      	str	r2, [r3, #12]
				pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2208      	movs	r2, #8
 80079a2:	741a      	strb	r2, [r3, #16]
				SBG_LOG_ERROR(pHandle->errorCode, "Trying to seek before the buffer");
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	7c1b      	ldrb	r3, [r3, #16]
 80079a8:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <sbgStreamBufferSeek+0x154>)
 80079aa:	9202      	str	r2, [sp, #8]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <sbgStreamBufferSeek+0x148>)
 80079b4:	f240 12a9 	movw	r2, #425	; 0x1a9
 80079b8:	491a      	ldr	r1, [pc, #104]	; (8007a24 <sbgStreamBufferSeek+0x14c>)
 80079ba:	481b      	ldr	r0, [pc, #108]	; (8007a28 <sbgStreamBufferSeek+0x150>)
 80079bc:	f7fb f9ac 	bl	8002d18 <sbgPlatformDebugLogMsg>
 80079c0:	e020      	b.n	8007a04 <sbgStreamBufferSeek+0x12c>
			else if (pHandle->pCurrentPtr > pHandle->pBufferPtr + pHandle->bufferSize)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6899      	ldr	r1, [r3, #8]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	440b      	add	r3, r1
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d917      	bls.n	8007a04 <sbgStreamBufferSeek+0x12c>
				pHandle->pCurrentPtr = pHandle->pBufferPtr + pHandle->bufferSize;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	441a      	add	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	60da      	str	r2, [r3, #12]
				pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2208      	movs	r2, #8
 80079e6:	741a      	strb	r2, [r3, #16]
				SBG_LOG_ERROR(pHandle->errorCode, "Trying to seek after the buffer");
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	7c1b      	ldrb	r3, [r3, #16]
 80079ec:	4a10      	ldr	r2, [pc, #64]	; (8007a30 <sbgStreamBufferSeek+0x158>)
 80079ee:	9202      	str	r2, [sp, #8]
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	2300      	movs	r3, #0
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <sbgStreamBufferSeek+0x148>)
 80079f8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80079fc:	4909      	ldr	r1, [pc, #36]	; (8007a24 <sbgStreamBufferSeek+0x14c>)
 80079fe:	480a      	ldr	r0, [pc, #40]	; (8007a28 <sbgStreamBufferSeek+0x150>)
 8007a00:	f7fb f98a 	bl	8002d18 <sbgPlatformDebugLogMsg>
	return pHandle->errorCode;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	7c1b      	ldrb	r3, [r3, #16]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	0800ba98 	.word	0x0800ba98
 8007a14:	0800dc90 	.word	0x0800dc90
 8007a18:	0800baa0 	.word	0x0800baa0
 8007a1c:	0800bb24 	.word	0x0800bb24
 8007a20:	0800baec 	.word	0x0800baec
 8007a24:	0800dca4 	.word	0x0800dca4
 8007a28:	0800baf4 	.word	0x0800baf4
 8007a2c:	0800bb40 	.word	0x0800bb40
 8007a30:	0800bb64 	.word	0x0800bb64

08007a34 <sbgStreamBufferGetCursor>:
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <sbgStreamBufferGetCursor+0x1c>
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <sbgStreamBufferGetCursor+0x28>)
 8007a44:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <sbgStreamBufferGetCursor+0x2c>)
 8007a46:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007a4a:	4806      	ldr	r0, [pc, #24]	; (8007a64 <sbgStreamBufferGetCursor+0x30>)
 8007a4c:	f001 fa00 	bl	8008e50 <__assert_func>
	return pHandle->pCurrentPtr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	0800ba98 	.word	0x0800ba98
 8007a60:	0800dcb8 	.word	0x0800dcb8
 8007a64:	0800baa0 	.word	0x0800baa0

08007a68 <sbgStreamBufferReadUint8>:
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <sbgStreamBufferReadUint8+0x1c>
 8007a76:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <sbgStreamBufferReadUint8+0x50>)
 8007a78:	4a10      	ldr	r2, [pc, #64]	; (8007abc <sbgStreamBufferReadUint8+0x54>)
 8007a7a:	f240 2119 	movw	r1, #537	; 0x219
 8007a7e:	4810      	ldr	r0, [pc, #64]	; (8007ac0 <sbgStreamBufferReadUint8+0x58>)
 8007a80:	f001 f9e6 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	7c1b      	ldrb	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10f      	bne.n	8007aac <sbgStreamBufferReadUint8+0x44>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint8_t))
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ff01 	bl	8007894 <sbgStreamBufferGetSpace>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d006      	beq.n	8007aa6 <sbgStreamBufferReadUint8+0x3e>
			return *((uint8_t*)(pHandle->pCurrentPtr++));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	1c59      	adds	r1, r3, #1
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	60d1      	str	r1, [r2, #12]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	e003      	b.n	8007aae <sbgStreamBufferReadUint8+0x46>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	741a      	strb	r2, [r3, #16]
	return 0;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	0800ba98 	.word	0x0800ba98
 8007abc:	0800dc58 	.word	0x0800dc58
 8007ac0:	0800baa0 	.word	0x0800baa0

08007ac4 <sbgStreamBufferReadUint16LE>:
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	assert(pHandle);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <sbgStreamBufferReadUint16LE+0x1a>
 8007ad2:	4b18      	ldr	r3, [pc, #96]	; (8007b34 <sbgStreamBufferReadUint16LE+0x70>)
 8007ad4:	4a18      	ldr	r2, [pc, #96]	; (8007b38 <sbgStreamBufferReadUint16LE+0x74>)
 8007ad6:	2179      	movs	r1, #121	; 0x79
 8007ad8:	4818      	ldr	r0, [pc, #96]	; (8007b3c <sbgStreamBufferReadUint16LE+0x78>)
 8007ada:	f001 f9b9 	bl	8008e50 <__assert_func>
	if (pHandle->errorCode == SBG_NO_ERROR)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7c1b      	ldrb	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d121      	bne.n	8007b2a <sbgStreamBufferReadUint16LE+0x66>
		if (sbgStreamBufferGetSpace(pHandle) >= sizeof(uint16_t))
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fed4 	bl	8007894 <sbgStreamBufferGetSpace>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d918      	bls.n	8007b24 <sbgStreamBufferReadUint16LE+0x60>
				bytesValues[0] = *(pHandle->pCurrentPtr++);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	1c59      	adds	r1, r3, #1
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	60d1      	str	r1, [r2, #12]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	81bb      	strh	r3, [r7, #12]
				bytesValues[1] = *(pHandle->pCurrentPtr++);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	1c59      	adds	r1, r3, #1
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	60d1      	str	r1, [r2, #12]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	81fb      	strh	r3, [r7, #14]
					return bytesValues[0] | (bytesValues[1] << 8);
 8007b12:	89bb      	ldrh	r3, [r7, #12]
 8007b14:	b21a      	sxth	r2, r3
 8007b16:	89fb      	ldrh	r3, [r7, #14]
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	b21b      	sxth	r3, r3
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	e003      	b.n	8007b2c <sbgStreamBufferReadUint16LE+0x68>
			pHandle->errorCode = SBG_BUFFER_OVERFLOW;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2208      	movs	r2, #8
 8007b28:	741a      	strb	r2, [r3, #16]
	return 0;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	0800ba98 	.word	0x0800ba98
 8007b38:	0800dc08 	.word	0x0800dc08
 8007b3c:	0800bba8 	.word	0x0800bba8

08007b40 <sbgEComProtocolPayloadClear>:
 * Any allocated resource is released, and the payload returns to its constructed state.
 *
 * \param[in]	pPayload					Payload.
 */
static void sbgEComProtocolPayloadClear(SbgEComProtocolPayload *pPayload)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	assert(pPayload);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <sbgEComProtocolPayloadClear+0x1a>
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <sbgEComProtocolPayloadClear+0x48>)
 8007b50:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <sbgEComProtocolPayloadClear+0x4c>)
 8007b52:	2120      	movs	r1, #32
 8007b54:	480e      	ldr	r0, [pc, #56]	; (8007b90 <sbgEComProtocolPayloadClear+0x50>)
 8007b56:	f001 f97b 	bl	8008e50 <__assert_func>

	if (pPayload->allocated)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <sbgEComProtocolPayloadClear+0x32>
	{
		free(pPayload->pBuffer);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fbf4 	bl	8009354 <free>

		pPayload->allocated = false;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]
	}

	pPayload->pBuffer	= NULL;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	605a      	str	r2, [r3, #4]
	pPayload->size		= 0;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	609a      	str	r2, [r3, #8]
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	0800bbe0 	.word	0x0800bbe0
 8007b8c:	0800daf8 	.word	0x0800daf8
 8007b90:	0800baf4 	.word	0x0800baf4

08007b94 <sbgEComProtocolPayloadSet>:
 * \param[in]	allocated					True if the given buffer is allocated with malloc().
 * \param[in]	pBuffer						Buffer.
 * \param[in]	size						Buffer size, in bytes.
 */
static void sbgEComProtocolPayloadSet(SbgEComProtocolPayload *pPayload, bool allocated, void *pBuffer, size_t size)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	72fb      	strb	r3, [r7, #11]
	assert(pPayload);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <sbgEComProtocolPayloadSet+0x22>
 8007baa:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <sbgEComProtocolPayloadSet+0x50>)
 8007bac:	4a0e      	ldr	r2, [pc, #56]	; (8007be8 <sbgEComProtocolPayloadSet+0x54>)
 8007bae:	2137      	movs	r1, #55	; 0x37
 8007bb0:	480e      	ldr	r0, [pc, #56]	; (8007bec <sbgEComProtocolPayloadSet+0x58>)
 8007bb2:	f001 f94d 	bl	8008e50 <__assert_func>
	assert(pBuffer);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d105      	bne.n	8007bc8 <sbgEComProtocolPayloadSet+0x34>
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <sbgEComProtocolPayloadSet+0x5c>)
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <sbgEComProtocolPayloadSet+0x54>)
 8007bc0:	2138      	movs	r1, #56	; 0x38
 8007bc2:	480a      	ldr	r0, [pc, #40]	; (8007bec <sbgEComProtocolPayloadSet+0x58>)
 8007bc4:	f001 f944 	bl	8008e50 <__assert_func>

	pPayload->allocated	= allocated;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	7afa      	ldrb	r2, [r7, #11]
 8007bcc:	701a      	strb	r2, [r3, #0]
	pPayload->pBuffer	= pBuffer;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	605a      	str	r2, [r3, #4]
	pPayload->size		= size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	609a      	str	r2, [r3, #8]
}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	0800bbe0 	.word	0x0800bbe0
 8007be8:	0800db14 	.word	0x0800db14
 8007bec:	0800baf4 	.word	0x0800baf4
 8007bf0:	0800ba84 	.word	0x0800ba84

08007bf4 <sbgEComProtocolDiscardUnusedBytes>:
 * Discard unused bytes from the work buffer of a protocol.
 *
 * \param[in]	pProtocol					Protocol.
 */
static void sbgEComProtocolDiscardUnusedBytes(SbgEComProtocol *pProtocol)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	assert(pProtocol);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <sbgEComProtocolDiscardUnusedBytes+0x1a>
 8007c02:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <sbgEComProtocolDiscardUnusedBytes+0xa0>)
 8007c04:	4a24      	ldr	r2, [pc, #144]	; (8007c98 <sbgEComProtocolDiscardUnusedBytes+0xa4>)
 8007c06:	2146      	movs	r1, #70	; 0x46
 8007c08:	4824      	ldr	r0, [pc, #144]	; (8007c9c <sbgEComProtocolDiscardUnusedBytes+0xa8>)
 8007c0a:	f001 f921 	bl	8008e50 <__assert_func>

	if (pProtocol->discardSize != 0)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d037      	beq.n	8007c8a <sbgEComProtocolDiscardUnusedBytes+0x96>
	{
		assert(pProtocol->discardSize <= pProtocol->rxBufferSize);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d905      	bls.n	8007c3a <sbgEComProtocolDiscardUnusedBytes+0x46>
 8007c2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ca0 <sbgEComProtocolDiscardUnusedBytes+0xac>)
 8007c30:	4a19      	ldr	r2, [pc, #100]	; (8007c98 <sbgEComProtocolDiscardUnusedBytes+0xa4>)
 8007c32:	214a      	movs	r1, #74	; 0x4a
 8007c34:	4819      	ldr	r0, [pc, #100]	; (8007c9c <sbgEComProtocolDiscardUnusedBytes+0xa8>)
 8007c36:	f001 f90b 	bl	8008e50 <__assert_func>

		memmove(pProtocol->rxBuffer, &pProtocol->rxBuffer[pProtocol->discardSize], pProtocol->rxBufferSize - pProtocol->discardSize);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	1d18      	adds	r0, r3, #4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	1d19      	adds	r1, r3, #4
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f001 fb8e 	bl	8009380 <memmove>

		pProtocol->rxBufferSize	-= pProtocol->discardSize;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c7c:	6053      	str	r3, [r2, #4]
		pProtocol->discardSize	= 0;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	461a      	mov	r2, r3
 8007c86:	2300      	movs	r3, #0
 8007c88:	6093      	str	r3, [r2, #8]
	}
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	0800bbec 	.word	0x0800bbec
 8007c98:	0800db30 	.word	0x0800db30
 8007c9c:	0800baf4 	.word	0x0800baf4
 8007ca0:	0800bbf8 	.word	0x0800bbf8

08007ca4 <sbgEComProtocolRead>:
 * Read data from the underlying interface into the work buffer of a protocol.
 *
 * \param[in]	pProtocol					Protocol.
 */
static void sbgEComProtocolRead(SbgEComProtocol *pProtocol)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	SbgErrorCode						 errorCode;

	assert(pProtocol);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <sbgEComProtocolRead+0x1a>
 8007cb2:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <sbgEComProtocolRead+0x74>)
 8007cb4:	4a19      	ldr	r2, [pc, #100]	; (8007d1c <sbgEComProtocolRead+0x78>)
 8007cb6:	215c      	movs	r1, #92	; 0x5c
 8007cb8:	4819      	ldr	r0, [pc, #100]	; (8007d20 <sbgEComProtocolRead+0x7c>)
 8007cba:	f001 f8c9 	bl	8008e50 <__assert_func>

	if (pProtocol->rxBufferSize < sizeof(pProtocol->rxBuffer))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cca:	d221      	bcs.n	8007d10 <sbgEComProtocolRead+0x6c>
	{
		size_t							 nrBytesRead;

		errorCode = sbgInterfaceRead(pProtocol->pLinkedInterface, &pProtocol->rxBuffer[pProtocol->rxBufferSize], &nrBytesRead, sizeof(pProtocol->rxBuffer) - pProtocol->rxBufferSize);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	1d19      	adds	r1, r3, #4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8007cea:	f107 0208 	add.w	r2, r7, #8
 8007cee:	f7ff fd01 	bl	80076f4 <sbgInterfaceRead>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]

		if (errorCode == SBG_NO_ERROR)
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d109      	bne.n	8007d10 <sbgEComProtocolRead+0x6c>
		{
			pProtocol->rxBufferSize += nrBytesRead;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4413      	add	r3, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d0e:	6053      	str	r3, [r2, #4]
		}
	}
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	0800bbec 	.word	0x0800bbec
 8007d1c:	0800db54 	.word	0x0800db54
 8007d20:	0800baf4 	.word	0x0800baf4

08007d24 <sbgEComProtocolFindSyncBytes>:
 * \return									SBG_NO_ERROR if successful,
 *											SBG_NOT_CONTINUOUS_FRAME if only the first SYNC byte was found,
 *											SBG_NOT_READY otherwise.
 */
static SbgErrorCode sbgEComProtocolFindSyncBytes(SbgEComProtocol *pProtocol, size_t startOffset, size_t *pOffset)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
	SbgErrorCode						 errorCode;

	assert(pProtocol);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <sbgEComProtocolFindSyncBytes+0x1e>
 8007d36:	4b22      	ldr	r3, [pc, #136]	; (8007dc0 <sbgEComProtocolFindSyncBytes+0x9c>)
 8007d38:	4a22      	ldr	r2, [pc, #136]	; (8007dc4 <sbgEComProtocolFindSyncBytes+0xa0>)
 8007d3a:	217b      	movs	r1, #123	; 0x7b
 8007d3c:	4822      	ldr	r0, [pc, #136]	; (8007dc8 <sbgEComProtocolFindSyncBytes+0xa4>)
 8007d3e:	f001 f887 	bl	8008e50 <__assert_func>

	errorCode = SBG_NOT_READY;
 8007d42:	230a      	movs	r3, #10
 8007d44:	75fb      	strb	r3, [r7, #23]

	for (size_t i = startOffset; i < (pProtocol->rxBufferSize - 1); i++)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	e016      	b.n	8007d7a <sbgEComProtocolFindSyncBytes+0x56>
	{
		if ((pProtocol->rxBuffer[i] == SBG_ECOM_SYNC_1) && (pProtocol->rxBuffer[i + 1] == SBG_ECOM_SYNC_2))
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4413      	add	r3, r2
 8007d52:	3304      	adds	r3, #4
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2bff      	cmp	r3, #255	; 0xff
 8007d58:	d10c      	bne.n	8007d74 <sbgEComProtocolFindSyncBytes+0x50>
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	791b      	ldrb	r3, [r3, #4]
 8007d64:	2b5a      	cmp	r3, #90	; 0x5a
 8007d66:	d105      	bne.n	8007d74 <sbgEComProtocolFindSyncBytes+0x50>
		{
			*pOffset	= i;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	601a      	str	r2, [r3, #0]
			errorCode	= SBG_NO_ERROR;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]
			break;
 8007d72:	e00a      	b.n	8007d8a <sbgEComProtocolFindSyncBytes+0x66>
	for (size_t i = startOffset; i < (pProtocol->rxBufferSize - 1); i++)
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3301      	adds	r3, #1
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d3e0      	bcc.n	8007d4c <sbgEComProtocolFindSyncBytes+0x28>

	//
	// The SYNC bytes were not found, but check if the last byte in the work buffer is the first SYNC byte,
	// as it could result from receiving a partial frame.
	//
	if ((errorCode != SBG_NO_ERROR) && (pProtocol->rxBuffer[pProtocol->rxBufferSize - 1] == SBG_ECOM_SYNC_1))
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d012      	beq.n	8007db6 <sbgEComProtocolFindSyncBytes+0x92>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	791b      	ldrb	r3, [r3, #4]
 8007da0:	2bff      	cmp	r3, #255	; 0xff
 8007da2:	d108      	bne.n	8007db6 <sbgEComProtocolFindSyncBytes+0x92>
	{
		*pOffset	= pProtocol->rxBufferSize - 1;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	1e5a      	subs	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
		errorCode	= SBG_NOT_CONTINUOUS_FRAME;
 8007db2:	2312      	movs	r3, #18
 8007db4:	75fb      	strb	r3, [r7, #23]
	}

	return errorCode;
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	0800bbec 	.word	0x0800bbec
 8007dc4:	0800db7c 	.word	0x0800db7c
 8007dc8:	0800baf4 	.word	0x0800baf4

08007dcc <sbgEComProtocolParseFrame>:
 *											SBG_NOT_READY if the frame is incomplete,
 *											SBG_INVALID_FRAME if the frame is invalid,
 *											SBG_INVALID_CRC if the frame CRC is invalid.
 */
static SbgErrorCode sbgEComProtocolParseFrame(SbgEComProtocol *pProtocol, size_t offset, size_t *pEndOffset, uint8_t *pMsgClass, uint8_t *pMsgId, uint8_t *pTransferId, uint16_t *pPageIndex, uint16_t *pNrPages, void **pBuffer, size_t *pSize)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b098      	sub	sp, #96	; 0x60
 8007dd0:	af06      	add	r7, sp, #24
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
	SbgStreamBuffer						 streamBuffer;
	uint8_t								 msgId;
	uint8_t								 msgClass;
	size_t								 standardPayloadSize;

	assert(pProtocol);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d105      	bne.n	8007dec <sbgEComProtocolParseFrame+0x20>
 8007de0:	4b9c      	ldr	r3, [pc, #624]	; (8008054 <sbgEComProtocolParseFrame+0x288>)
 8007de2:	4a9d      	ldr	r2, [pc, #628]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007de4:	21b2      	movs	r1, #178	; 0xb2
 8007de6:	489d      	ldr	r0, [pc, #628]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007de8:	f001 f832 	bl	8008e50 <__assert_func>
	assert(offset < pProtocol->rxBufferSize);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d305      	bcc.n	8007e06 <sbgEComProtocolParseFrame+0x3a>
 8007dfa:	4b99      	ldr	r3, [pc, #612]	; (8008060 <sbgEComProtocolParseFrame+0x294>)
 8007dfc:	4a96      	ldr	r2, [pc, #600]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007dfe:	21b3      	movs	r1, #179	; 0xb3
 8007e00:	4896      	ldr	r0, [pc, #600]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e02:	f001 f825 	bl	8008e50 <__assert_func>
	assert(pEndOffset);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d105      	bne.n	8007e18 <sbgEComProtocolParseFrame+0x4c>
 8007e0c:	4b95      	ldr	r3, [pc, #596]	; (8008064 <sbgEComProtocolParseFrame+0x298>)
 8007e0e:	4a92      	ldr	r2, [pc, #584]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e10:	21b4      	movs	r1, #180	; 0xb4
 8007e12:	4892      	ldr	r0, [pc, #584]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e14:	f001 f81c 	bl	8008e50 <__assert_func>
	assert(pMsgClass);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <sbgEComProtocolParseFrame+0x5e>
 8007e1e:	4b92      	ldr	r3, [pc, #584]	; (8008068 <sbgEComProtocolParseFrame+0x29c>)
 8007e20:	4a8d      	ldr	r2, [pc, #564]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e22:	21b5      	movs	r1, #181	; 0xb5
 8007e24:	488d      	ldr	r0, [pc, #564]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e26:	f001 f813 	bl	8008e50 <__assert_func>
	assert(pMsgId);
 8007e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <sbgEComProtocolParseFrame+0x70>
 8007e30:	4b8e      	ldr	r3, [pc, #568]	; (800806c <sbgEComProtocolParseFrame+0x2a0>)
 8007e32:	4a89      	ldr	r2, [pc, #548]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e34:	21b6      	movs	r1, #182	; 0xb6
 8007e36:	4889      	ldr	r0, [pc, #548]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e38:	f001 f80a 	bl	8008e50 <__assert_func>
	assert(pTransferId);
 8007e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <sbgEComProtocolParseFrame+0x82>
 8007e42:	4b8b      	ldr	r3, [pc, #556]	; (8008070 <sbgEComProtocolParseFrame+0x2a4>)
 8007e44:	4a84      	ldr	r2, [pc, #528]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e46:	21b7      	movs	r1, #183	; 0xb7
 8007e48:	4884      	ldr	r0, [pc, #528]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e4a:	f001 f801 	bl	8008e50 <__assert_func>
	assert(pPageIndex);
 8007e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <sbgEComProtocolParseFrame+0x94>
 8007e54:	4b87      	ldr	r3, [pc, #540]	; (8008074 <sbgEComProtocolParseFrame+0x2a8>)
 8007e56:	4a80      	ldr	r2, [pc, #512]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e58:	21b8      	movs	r1, #184	; 0xb8
 8007e5a:	4880      	ldr	r0, [pc, #512]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e5c:	f000 fff8 	bl	8008e50 <__assert_func>
	assert(pNrPages);
 8007e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d105      	bne.n	8007e72 <sbgEComProtocolParseFrame+0xa6>
 8007e66:	4b84      	ldr	r3, [pc, #528]	; (8008078 <sbgEComProtocolParseFrame+0x2ac>)
 8007e68:	4a7b      	ldr	r2, [pc, #492]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e6a:	21b9      	movs	r1, #185	; 0xb9
 8007e6c:	487b      	ldr	r0, [pc, #492]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e6e:	f000 ffef 	bl	8008e50 <__assert_func>
	assert(pBuffer);
 8007e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d105      	bne.n	8007e84 <sbgEComProtocolParseFrame+0xb8>
 8007e78:	4b80      	ldr	r3, [pc, #512]	; (800807c <sbgEComProtocolParseFrame+0x2b0>)
 8007e7a:	4a77      	ldr	r2, [pc, #476]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e7c:	21ba      	movs	r1, #186	; 0xba
 8007e7e:	4877      	ldr	r0, [pc, #476]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e80:	f000 ffe6 	bl	8008e50 <__assert_func>
	assert(pSize);
 8007e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <sbgEComProtocolParseFrame+0xca>
 8007e8a:	4b7d      	ldr	r3, [pc, #500]	; (8008080 <sbgEComProtocolParseFrame+0x2b4>)
 8007e8c:	4a72      	ldr	r2, [pc, #456]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 8007e8e:	21bb      	movs	r1, #187	; 0xbb
 8007e90:	4872      	ldr	r0, [pc, #456]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007e92:	f000 ffdd 	bl	8008e50 <__assert_func>

	sbgStreamBufferInitForRead(&streamBuffer, &pProtocol->rxBuffer[offset], pProtocol->rxBufferSize - offset);
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	1d19      	adds	r1, r3, #4
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	1ad2      	subs	r2, r2, r3
 8007eaa:	f107 0314 	add.w	r3, r7, #20
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fc68 	bl	8007784 <sbgStreamBufferInitForRead>

	//
	// Skip SYNC bytes.
	//
	sbgStreamBufferSeek(&streamBuffer, 2, SB_SEEK_CUR_INC);
 8007eb4:	f107 0314 	add.w	r3, r7, #20
 8007eb8:	2201      	movs	r2, #1
 8007eba:	2102      	movs	r1, #2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff fd0b 	bl	80078d8 <sbgStreamBufferSeek>

	msgId				= sbgStreamBufferReadUint8(&streamBuffer);
 8007ec2:	f107 0314 	add.w	r3, r7, #20
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff fdce 	bl	8007a68 <sbgStreamBufferReadUint8>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	msgClass			= sbgStreamBufferReadUint8(&streamBuffer);
 8007ed2:	f107 0314 	add.w	r3, r7, #20
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fdc6 	bl	8007a68 <sbgStreamBufferReadUint8>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	standardPayloadSize	= sbgStreamBufferReadUint16LE(&streamBuffer);
 8007ee2:	f107 0314 	add.w	r3, r7, #20
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fdec 	bl	8007ac4 <sbgStreamBufferReadUint16LE>
 8007eec:	4603      	mov	r3, r0
 8007eee:	637b      	str	r3, [r7, #52]	; 0x34

	errorCode = sbgStreamBufferGetLastError(&streamBuffer);
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff fc7b 	bl	80077f0 <sbgStreamBufferGetLastError>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (errorCode == SBG_NO_ERROR)
 8007f00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 814a 	bne.w	800819e <sbgEComProtocolParseFrame+0x3d2>
	{
		if (standardPayloadSize <= SBG_ECOM_MAX_PAYLOAD_SIZE)
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0c:	f640 72f6 	movw	r2, #4086	; 0xff6
 8007f10:	4293      	cmp	r3, r2
 8007f12:	f200 8130 	bhi.w	8008176 <sbgEComProtocolParseFrame+0x3aa>
		{
			if (sbgStreamBufferGetSize(&streamBuffer) >= (standardPayloadSize + 9))
 8007f16:	f107 0314 	add.w	r3, r7, #20
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff fc82 	bl	8007824 <sbgStreamBufferGetSize>
 8007f20:	4602      	mov	r2, r0
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	3309      	adds	r3, #9
 8007f26:	429a      	cmp	r2, r3
 8007f28:	f0c0 8121 	bcc.w	800816e <sbgEComProtocolParseFrame+0x3a2>
				size_t					 payloadSize;
				uint8_t					 transferId;
				uint16_t				 pageIndex;
				uint16_t				 nrPages;

				if ((msgClass & 0x80) == 0)
 8007f2c:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db0c      	blt.n	8007f4e <sbgEComProtocolParseFrame+0x182>
				{
					payloadSize = standardPayloadSize;
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	643b      	str	r3, [r7, #64]	; 0x40

					transferId	= 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pageIndex	= 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	87bb      	strh	r3, [r7, #60]	; 0x3c
					nrPages		= 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	877b      	strh	r3, [r7, #58]	; 0x3a

					errorCode = SBG_NO_ERROR;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f4c:	e052      	b.n	8007ff4 <sbgEComProtocolParseFrame+0x228>
				}
				else
				{
					msgClass &= 0x7f;
 8007f4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f56:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					//
					// In extended frames, the payload size includes the extended headers.
					//
					payloadSize = standardPayloadSize - 5;
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	3b05      	subs	r3, #5
 8007f5e:	643b      	str	r3, [r7, #64]	; 0x40

					transferId	= sbgStreamBufferReadUint8(&streamBuffer);
 8007f60:	f107 0314 	add.w	r3, r7, #20
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff fd7f 	bl	8007a68 <sbgStreamBufferReadUint8>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pageIndex	= sbgStreamBufferReadUint16LE(&streamBuffer);
 8007f70:	f107 0314 	add.w	r3, r7, #20
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff fda5 	bl	8007ac4 <sbgStreamBufferReadUint16LE>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
					nrPages		= sbgStreamBufferReadUint16LE(&streamBuffer);
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff fd9e 	bl	8007ac4 <sbgStreamBufferReadUint16LE>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	877b      	strh	r3, [r7, #58]	; 0x3a

					if ((transferId & 0xf0) != 0)
 8007f8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d011      	beq.n	8007fbc <sbgEComProtocolParseFrame+0x1f0>
					{
						SBG_LOG_WARNING(SBG_INVALID_FRAME, "reserved bits set in extended headers");
 8007f98:	4b3a      	ldr	r3, [pc, #232]	; (8008084 <sbgEComProtocolParseFrame+0x2b8>)
 8007f9a:	9302      	str	r3, [sp, #8]
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	4b38      	ldr	r3, [pc, #224]	; (8008088 <sbgEComProtocolParseFrame+0x2bc>)
 8007fa6:	22ee      	movs	r2, #238	; 0xee
 8007fa8:	4938      	ldr	r1, [pc, #224]	; (800808c <sbgEComProtocolParseFrame+0x2c0>)
 8007faa:	482c      	ldr	r0, [pc, #176]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007fac:	f7fa feb4 	bl	8002d18 <sbgPlatformDebugLogMsg>
						transferId &= 0xf;
 8007fb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fb4:	f003 030f 	and.w	r3, r3, #15
 8007fb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					}

					if (pageIndex < nrPages)
 8007fbc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007fbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d203      	bcs.n	8007fcc <sbgEComProtocolParseFrame+0x200>
					{
						errorCode = SBG_NO_ERROR;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007fca:	e013      	b.n	8007ff4 <sbgEComProtocolParseFrame+0x228>
					}
					else
					{
						errorCode = SBG_INVALID_FRAME;
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						SBG_LOG_ERROR(errorCode, "invalid page information : %" PRIu16 "/%" PRIu16, pageIndex, nrPages);
 8007fd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007fd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007fd6:	9204      	str	r2, [sp, #16]
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	4b2d      	ldr	r3, [pc, #180]	; (8008090 <sbgEComProtocolParseFrame+0x2c4>)
 8007fdc:	9302      	str	r3, [sp, #8]
 8007fde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	4b27      	ldr	r3, [pc, #156]	; (8008088 <sbgEComProtocolParseFrame+0x2bc>)
 8007fea:	22f9      	movs	r2, #249	; 0xf9
 8007fec:	4927      	ldr	r1, [pc, #156]	; (800808c <sbgEComProtocolParseFrame+0x2c0>)
 8007fee:	481b      	ldr	r0, [pc, #108]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8007ff0:	f7fa fe92 	bl	8002d18 <sbgPlatformDebugLogMsg>
					}
				}

				if (errorCode == SBG_NO_ERROR)
 8007ff4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f040 80d3 	bne.w	80081a4 <sbgEComProtocolParseFrame+0x3d8>
				{
					void				*pPayloadAddr;
					uint16_t			 frameCrc;
					uint8_t				 lastByte;

					pPayloadAddr = sbgStreamBufferGetCursor(&streamBuffer);
 8007ffe:	f107 0314 	add.w	r3, r7, #20
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff fd16 	bl	8007a34 <sbgStreamBufferGetCursor>
 8008008:	6338      	str	r0, [r7, #48]	; 0x30

					sbgStreamBufferSeek(&streamBuffer, payloadSize, SB_SEEK_CUR_INC);
 800800a:	f107 0314 	add.w	r3, r7, #20
 800800e:	2201      	movs	r2, #1
 8008010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fc60 	bl	80078d8 <sbgStreamBufferSeek>

					frameCrc	= sbgStreamBufferReadUint16LE(&streamBuffer);
 8008018:	f107 0314 	add.w	r3, r7, #20
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff fd51 	bl	8007ac4 <sbgStreamBufferReadUint16LE>
 8008022:	4603      	mov	r3, r0
 8008024:	85fb      	strh	r3, [r7, #46]	; 0x2e
					lastByte	= sbgStreamBufferReadUint8(&streamBuffer);
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fd1c 	bl	8007a68 <sbgStreamBufferReadUint8>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

					assert(sbgStreamBufferGetLastError(&streamBuffer) == SBG_NO_ERROR);
 8008036:	f107 0314 	add.w	r3, r7, #20
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fbd8 	bl	80077f0 <sbgStreamBufferGetLastError>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d028      	beq.n	8008098 <sbgEComProtocolParseFrame+0x2cc>
 8008046:	4b13      	ldr	r3, [pc, #76]	; (8008094 <sbgEComProtocolParseFrame+0x2c8>)
 8008048:	4a03      	ldr	r2, [pc, #12]	; (8008058 <sbgEComProtocolParseFrame+0x28c>)
 800804a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800804e:	4803      	ldr	r0, [pc, #12]	; (800805c <sbgEComProtocolParseFrame+0x290>)
 8008050:	f000 fefe 	bl	8008e50 <__assert_func>
 8008054:	0800bbec 	.word	0x0800bbec
 8008058:	0800db9c 	.word	0x0800db9c
 800805c:	0800baf4 	.word	0x0800baf4
 8008060:	0800bc2c 	.word	0x0800bc2c
 8008064:	0800bc50 	.word	0x0800bc50
 8008068:	0800bc5c 	.word	0x0800bc5c
 800806c:	0800bc68 	.word	0x0800bc68
 8008070:	0800bc70 	.word	0x0800bc70
 8008074:	0800bc7c 	.word	0x0800bc7c
 8008078:	0800bc88 	.word	0x0800bc88
 800807c:	0800ba84 	.word	0x0800ba84
 8008080:	0800bc94 	.word	0x0800bc94
 8008084:	0800bc9c 	.word	0x0800bc9c
 8008088:	0800baec 	.word	0x0800baec
 800808c:	0800dbb8 	.word	0x0800dbb8
 8008090:	0800bcc4 	.word	0x0800bcc4
 8008094:	0800bce8 	.word	0x0800bce8

					if (lastByte == SBG_ECOM_ETX)
 8008098:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800809c:	2b33      	cmp	r3, #51	; 0x33
 800809e:	d151      	bne.n	8008144 <sbgEComProtocolParseFrame+0x378>
						uint16_t		 computedCrc;

						//
						// The CRC spans from the header (excluding the SYNC bytes) up to the CRC bytes.
						//
						sbgStreamBufferSeek(&streamBuffer, 2, SB_SEEK_SET);
 80080a0:	f107 0314 	add.w	r3, r7, #20
 80080a4:	2200      	movs	r2, #0
 80080a6:	2102      	movs	r1, #2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fc15 	bl	80078d8 <sbgStreamBufferSeek>
						computedCrc = sbgCrc16Compute(sbgStreamBufferGetCursor(&streamBuffer), standardPayloadSize + 4);
 80080ae:	f107 0314 	add.w	r3, r7, #20
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fcbe 	bl	8007a34 <sbgStreamBufferGetCursor>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080bc:	3304      	adds	r3, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	4610      	mov	r0, r2
 80080c2:	f7fa fdb3 	bl	8002c2c <sbgCrc16Compute>
 80080c6:	4603      	mov	r3, r0
 80080c8:	857b      	strh	r3, [r7, #42]	; 0x2a

						if (frameCrc == computedCrc)
 80080ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d122      	bne.n	8008118 <sbgEComProtocolParseFrame+0x34c>
						{
							*pEndOffset		= offset + standardPayloadSize + 9;
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	4413      	add	r3, r2
 80080d8:	f103 0209 	add.w	r2, r3, #9
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	601a      	str	r2, [r3, #0]
							*pMsgClass		= msgClass;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80080e6:	701a      	strb	r2, [r3, #0]
							*pMsgId			= msgId;
 80080e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ea:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80080ee:	701a      	strb	r2, [r3, #0]
							*pTransferId	= transferId;
 80080f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80080f6:	701a      	strb	r2, [r3, #0]
							*pPageIndex		= pageIndex;
 80080f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080fa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80080fc:	801a      	strh	r2, [r3, #0]
							*pNrPages		= nrPages;
 80080fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008100:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008102:	801a      	strh	r2, [r3, #0]
							*pBuffer		= pPayloadAddr;
 8008104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008108:	601a      	str	r2, [r3, #0]
							*pSize			= payloadSize;
 800810a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800810e:	601a      	str	r2, [r3, #0]

							errorCode = SBG_NO_ERROR;
 8008110:	2300      	movs	r3, #0
 8008112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008116:	e045      	b.n	80081a4 <sbgEComProtocolParseFrame+0x3d8>
						}
						else
						{
							errorCode = SBG_INVALID_CRC;
 8008118:	2303      	movs	r3, #3
 800811a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							SBG_LOG_ERROR(errorCode, "invalid CRC, frame:%#" PRIx16 " computed:%#" PRIx16, frameCrc, computedCrc);
 800811e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008120:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008122:	9204      	str	r2, [sp, #16]
 8008124:	9303      	str	r3, [sp, #12]
 8008126:	4b22      	ldr	r3, [pc, #136]	; (80081b0 <sbgEComProtocolParseFrame+0x3e4>)
 8008128:	9302      	str	r3, [sp, #8]
 800812a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	2300      	movs	r3, #0
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4b1f      	ldr	r3, [pc, #124]	; (80081b4 <sbgEComProtocolParseFrame+0x3e8>)
 8008136:	f44f 7293 	mov.w	r2, #294	; 0x126
 800813a:	491f      	ldr	r1, [pc, #124]	; (80081b8 <sbgEComProtocolParseFrame+0x3ec>)
 800813c:	481f      	ldr	r0, [pc, #124]	; (80081bc <sbgEComProtocolParseFrame+0x3f0>)
 800813e:	f7fa fdeb 	bl	8002d18 <sbgPlatformDebugLogMsg>
 8008142:	e02f      	b.n	80081a4 <sbgEComProtocolParseFrame+0x3d8>
						}
					}
					else
					{
						errorCode = SBG_INVALID_FRAME;
 8008144:	2304      	movs	r3, #4
 8008146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						SBG_LOG_ERROR(errorCode, "invalid end-of-frame: byte:%#" PRIx8, lastByte);
 800814a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800814e:	9303      	str	r3, [sp, #12]
 8008150:	4b1b      	ldr	r3, [pc, #108]	; (80081c0 <sbgEComProtocolParseFrame+0x3f4>)
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	2300      	movs	r3, #0
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <sbgEComProtocolParseFrame+0x3e8>)
 8008160:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008164:	4914      	ldr	r1, [pc, #80]	; (80081b8 <sbgEComProtocolParseFrame+0x3ec>)
 8008166:	4815      	ldr	r0, [pc, #84]	; (80081bc <sbgEComProtocolParseFrame+0x3f0>)
 8008168:	f7fa fdd6 	bl	8002d18 <sbgPlatformDebugLogMsg>
 800816c:	e01a      	b.n	80081a4 <sbgEComProtocolParseFrame+0x3d8>
					}
				}
			}
			else
			{
				errorCode = SBG_NOT_READY;
 800816e:	230a      	movs	r3, #10
 8008170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008174:	e016      	b.n	80081a4 <sbgEComProtocolParseFrame+0x3d8>
			}
		}
		else
		{
			errorCode = SBG_INVALID_FRAME;
 8008176:	2304      	movs	r3, #4
 8008178:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			SBG_LOG_ERROR(errorCode, "invalid payload size %zu", standardPayloadSize);
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	4b10      	ldr	r3, [pc, #64]	; (80081c4 <sbgEComProtocolParseFrame+0x3f8>)
 8008182:	9302      	str	r3, [sp, #8]
 8008184:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	2300      	movs	r3, #0
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <sbgEComProtocolParseFrame+0x3e8>)
 8008190:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008194:	4908      	ldr	r1, [pc, #32]	; (80081b8 <sbgEComProtocolParseFrame+0x3ec>)
 8008196:	4809      	ldr	r0, [pc, #36]	; (80081bc <sbgEComProtocolParseFrame+0x3f0>)
 8008198:	f7fa fdbe 	bl	8002d18 <sbgPlatformDebugLogMsg>
 800819c:	e002      	b.n	80081a4 <sbgEComProtocolParseFrame+0x3d8>
		}
	}
	else
	{
		errorCode = SBG_NOT_READY;
 800819e:	230a      	movs	r3, #10
 80081a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	return errorCode;
 80081a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3748      	adds	r7, #72	; 0x48
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	0800bd24 	.word	0x0800bd24
 80081b4:	0800baec 	.word	0x0800baec
 80081b8:	0800dbb8 	.word	0x0800dbb8
 80081bc:	0800baf4 	.word	0x0800baf4
 80081c0:	0800bd4c 	.word	0x0800bd4c
 80081c4:	0800bd70 	.word	0x0800bd70

080081c8 <sbgEComProtocolFindFrame>:
 * \param[out]	pSize						Payload buffer size, in bytes.
 * \return									SBG_NO_ERROR if successful,
 *											SBG_NOT_READY if no frame was found.
 */
static SbgErrorCode sbgEComProtocolFindFrame(SbgEComProtocol *pProtocol, uint8_t *pMsgClass, uint8_t *pMsgId, uint8_t *pTransferId, uint16_t *pPageIndex, uint16_t *pNrPages, void **pBuffer, size_t *pSize)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af06      	add	r7, sp, #24
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
	SbgErrorCode						 errorCode;
	size_t								 startOffset;

	assert(pProtocol);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <sbgEComProtocolFindFrame+0x22>
 80081dc:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <sbgEComProtocolFindFrame+0x100>)
 80081de:	4a3b      	ldr	r2, [pc, #236]	; (80082cc <sbgEComProtocolFindFrame+0x104>)
 80081e0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80081e4:	483a      	ldr	r0, [pc, #232]	; (80082d0 <sbgEComProtocolFindFrame+0x108>)
 80081e6:	f000 fe33 	bl	8008e50 <__assert_func>

	errorCode	= SBG_NOT_READY;
 80081ea:	230a      	movs	r3, #10
 80081ec:	77fb      	strb	r3, [r7, #31]
	startOffset	= 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61bb      	str	r3, [r7, #24]

	while (startOffset < pProtocol->rxBufferSize)
 80081f2:	e04c      	b.n	800828e <sbgEComProtocolFindFrame+0xc6>
	{
		size_t							 offset;

		errorCode = sbgEComProtocolFindSyncBytes(pProtocol, startOffset, &offset);
 80081f4:	f107 0314 	add.w	r3, r7, #20
 80081f8:	461a      	mov	r2, r3
 80081fa:	69b9      	ldr	r1, [r7, #24]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff fd91 	bl	8007d24 <sbgEComProtocolFindSyncBytes>
 8008202:	4603      	mov	r3, r0
 8008204:	77fb      	strb	r3, [r7, #31]

		if (errorCode == SBG_NO_ERROR)
 8008206:	7ffb      	ldrb	r3, [r7, #31]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d12c      	bne.n	8008266 <sbgEComProtocolFindFrame+0x9e>
		{
			size_t						 endOffset;

			errorCode = sbgEComProtocolParseFrame(pProtocol, offset, &endOffset, pMsgClass, pMsgId, pTransferId, pPageIndex, pNrPages, pBuffer, pSize);
 800820c:	6979      	ldr	r1, [r7, #20]
 800820e:	f107 0210 	add.w	r2, r7, #16
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f7ff fdcd 	bl	8007dcc <sbgEComProtocolParseFrame>
 8008232:	4603      	mov	r3, r0
 8008234:	77fb      	strb	r3, [r7, #31]

			if (errorCode == SBG_NO_ERROR)
 8008236:	7ffb      	ldrb	r3, [r7, #31]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d105      	bne.n	8008248 <sbgEComProtocolFindFrame+0x80>
			{
				//
				// Valid frame found, discard all data up to and including that frame
				// on the next read.
				//
				pProtocol->discardSize = endOffset;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008244:	6093      	str	r3, [r2, #8]
				break;
 8008246:	e029      	b.n	800829c <sbgEComProtocolFindFrame+0xd4>
			}
			else if (errorCode == SBG_NOT_READY)
 8008248:	7ffb      	ldrb	r3, [r7, #31]
 800824a:	2b0a      	cmp	r3, #10
 800824c:	d105      	bne.n	800825a <sbgEComProtocolFindFrame+0x92>
			{
				//
				// There may be a valid frame at the parse offset, but it's not complete.
				// Have all preceding bytes discarded on the next read.
				//
				pProtocol->discardSize = offset;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008256:	6093      	str	r3, [r2, #8]
				break;
 8008258:	e020      	b.n	800829c <sbgEComProtocolFindFrame+0xd4>
			else
			{
				//
				// Not a valid frame, skip SYNC bytes and try again.
				//
				startOffset = offset + 2;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	3302      	adds	r3, #2
 800825e:	61bb      	str	r3, [r7, #24]
				errorCode = SBG_NOT_READY;
 8008260:	230a      	movs	r3, #10
 8008262:	77fb      	strb	r3, [r7, #31]
 8008264:	e013      	b.n	800828e <sbgEComProtocolFindFrame+0xc6>
			}
		}
		else if (errorCode == SBG_NOT_CONTINUOUS_FRAME)
 8008266:	7ffb      	ldrb	r3, [r7, #31]
 8008268:	2b12      	cmp	r3, #18
 800826a:	d107      	bne.n	800827c <sbgEComProtocolFindFrame+0xb4>
			//
			// The first SYNC byte was found, but not the second. It may be a valid
			// frame, so keep the SYNC byte but have all preceding bytes discarded
			// on the next read.
			//
			pProtocol->discardSize = offset;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008274:	6093      	str	r3, [r2, #8]
			errorCode = SBG_NOT_READY;
 8008276:	230a      	movs	r3, #10
 8008278:	77fb      	strb	r3, [r7, #31]
			break;
 800827a:	e00f      	b.n	800829c <sbgEComProtocolFindFrame+0xd4>
		else
		{
			//
			// No SYNC byte found, discard all data.
			//
			pProtocol->rxBufferSize = 0;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008282:	461a      	mov	r2, r3
 8008284:	2300      	movs	r3, #0
 8008286:	6053      	str	r3, [r2, #4]
			errorCode = SBG_NOT_READY;
 8008288:	230a      	movs	r3, #10
 800828a:	77fb      	strb	r3, [r7, #31]
			break;
 800828c:	e006      	b.n	800829c <sbgEComProtocolFindFrame+0xd4>
	while (startOffset < pProtocol->rxBufferSize)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	429a      	cmp	r2, r3
 800829a:	d3ab      	bcc.n	80081f4 <sbgEComProtocolFindFrame+0x2c>
		}
	}

	assert(pProtocol->discardSize <= pProtocol->rxBufferSize);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d906      	bls.n	80082be <sbgEComProtocolFindFrame+0xf6>
 80082b0:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <sbgEComProtocolFindFrame+0x10c>)
 80082b2:	4a06      	ldr	r2, [pc, #24]	; (80082cc <sbgEComProtocolFindFrame+0x104>)
 80082b4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80082b8:	4805      	ldr	r0, [pc, #20]	; (80082d0 <sbgEComProtocolFindFrame+0x108>)
 80082ba:	f000 fdc9 	bl	8008e50 <__assert_func>

	return errorCode;
 80082be:	7ffb      	ldrb	r3, [r7, #31]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	0800bbec 	.word	0x0800bbec
 80082cc:	0800dcd4 	.word	0x0800dcd4
 80082d0:	0800baf4 	.word	0x0800baf4
 80082d4:	0800bbf8 	.word	0x0800bbf8

080082d8 <sbgEComProtocolLargeTransferInProgress>:
 *
 * \param[in]	pProtocol					Protocol.
 * \return									True if a large transfer is in progress.
 */
static bool sbgEComProtocolLargeTransferInProgress(const SbgEComProtocol *pProtocol)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	assert(pProtocol);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <sbgEComProtocolLargeTransferInProgress+0x1c>
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <sbgEComProtocolLargeTransferInProgress+0x38>)
 80082e8:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <sbgEComProtocolLargeTransferInProgress+0x3c>)
 80082ea:	f240 213b 	movw	r1, #571	; 0x23b
 80082ee:	480a      	ldr	r0, [pc, #40]	; (8008318 <sbgEComProtocolLargeTransferInProgress+0x40>)
 80082f0:	f000 fdae 	bl	8008e50 <__assert_func>

	return pProtocol->pLargeBuffer;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bf14      	ite	ne
 8008300:	2301      	movne	r3, #1
 8008302:	2300      	moveq	r3, #0
 8008304:	b2db      	uxtb	r3, r3
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	0800bbec 	.word	0x0800bbec
 8008314:	0800dcf0 	.word	0x0800dcf0
 8008318:	0800baf4 	.word	0x0800baf4

0800831c <sbgEComProtocolResetLargeTransfer>:
 * Reset The large transfer member variables of a protocol.
 *
 * \param[in]	pProtocol					Protocol.
 */
static void sbgEComProtocolResetLargeTransfer(SbgEComProtocol *pProtocol)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	assert(pProtocol);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <sbgEComProtocolResetLargeTransfer+0x1c>
 800832a:	4b13      	ldr	r3, [pc, #76]	; (8008378 <sbgEComProtocolResetLargeTransfer+0x5c>)
 800832c:	4a13      	ldr	r2, [pc, #76]	; (800837c <sbgEComProtocolResetLargeTransfer+0x60>)
 800832e:	f240 2147 	movw	r1, #583	; 0x247
 8008332:	4813      	ldr	r0, [pc, #76]	; (8008380 <sbgEComProtocolResetLargeTransfer+0x64>)
 8008334:	f000 fd8c 	bl	8008e50 <__assert_func>

	pProtocol->pLargeBuffer		= NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833e:	461a      	mov	r2, r3
 8008340:	2300      	movs	r3, #0
 8008342:	6113      	str	r3, [r2, #16]
	pProtocol->largeBufferSize	= 0;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834a:	461a      	mov	r2, r3
 800834c:	2300      	movs	r3, #0
 800834e:	6153      	str	r3, [r2, #20]
	pProtocol->transferId		= 0;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008356:	2200      	movs	r2, #0
 8008358:	769a      	strb	r2, [r3, #26]
	pProtocol->pageIndex		= 0;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008360:	2200      	movs	r2, #0
 8008362:	839a      	strh	r2, [r3, #28]
	pProtocol->nrPages			= 0;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836a:	2200      	movs	r2, #0
 800836c:	83da      	strh	r2, [r3, #30]
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	0800bbec 	.word	0x0800bbec
 800837c:	0800dd18 	.word	0x0800dd18
 8008380:	0800baf4 	.word	0x0800baf4

08008384 <sbgEComProtocolClearLargeTransfer>:
 * Clear any large transfer in progress.
 *
 * \param[in]	pProtocol					Protocol.
 */
static void sbgEComProtocolClearLargeTransfer(SbgEComProtocol *pProtocol)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	assert(pProtocol);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <sbgEComProtocolClearLargeTransfer+0x1c>
 8008392:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <sbgEComProtocolClearLargeTransfer+0x38>)
 8008394:	4a0a      	ldr	r2, [pc, #40]	; (80083c0 <sbgEComProtocolClearLargeTransfer+0x3c>)
 8008396:	f240 2157 	movw	r1, #599	; 0x257
 800839a:	480a      	ldr	r0, [pc, #40]	; (80083c4 <sbgEComProtocolClearLargeTransfer+0x40>)
 800839c:	f000 fd58 	bl	8008e50 <__assert_func>

	free(pProtocol->pLargeBuffer);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 ffd3 	bl	8009354 <free>

	sbgEComProtocolResetLargeTransfer(pProtocol);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff ffb4 	bl	800831c <sbgEComProtocolResetLargeTransfer>
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	0800bbec 	.word	0x0800bbec
 80083c0:	0800dd3c 	.word	0x0800dd3c
 80083c4:	0800baf4 	.word	0x0800baf4

080083c8 <sbgEComProtocolProcessExtendedFrame>:
 * \param[in]	size						Buffer size, in bytes.
 * \return									SBG_NO_ERROR if a large transfer is complete,
 *											SBG_NOT_READY otherwise.
 */
static SbgErrorCode sbgEComProtocolProcessExtendedFrame(SbgEComProtocol *pProtocol, uint8_t msgClass, uint8_t msgId, uint8_t transferId, uint16_t pageIndex, uint16_t nrPages, const void *pBuffer, size_t size)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	; 0x28
 80083cc:	af04      	add	r7, sp, #16
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	4608      	mov	r0, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	461a      	mov	r2, r3
 80083d6:	4603      	mov	r3, r0
 80083d8:	70fb      	strb	r3, [r7, #3]
 80083da:	460b      	mov	r3, r1
 80083dc:	70bb      	strb	r3, [r7, #2]
 80083de:	4613      	mov	r3, r2
 80083e0:	707b      	strb	r3, [r7, #1]
	SbgErrorCode						 errorCode;

	assert(pProtocol);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <sbgEComProtocolProcessExtendedFrame+0x2e>
 80083e8:	4b91      	ldr	r3, [pc, #580]	; (8008630 <sbgEComProtocolProcessExtendedFrame+0x268>)
 80083ea:	4a92      	ldr	r2, [pc, #584]	; (8008634 <sbgEComProtocolProcessExtendedFrame+0x26c>)
 80083ec:	f44f 711c 	mov.w	r1, #624	; 0x270
 80083f0:	4891      	ldr	r0, [pc, #580]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 80083f2:	f000 fd2d 	bl	8008e50 <__assert_func>
	assert((transferId & 0xf0) == 0);
 80083f6:	787b      	ldrb	r3, [r7, #1]
 80083f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d006      	beq.n	800840e <sbgEComProtocolProcessExtendedFrame+0x46>
 8008400:	4b8e      	ldr	r3, [pc, #568]	; (800863c <sbgEComProtocolProcessExtendedFrame+0x274>)
 8008402:	4a8c      	ldr	r2, [pc, #560]	; (8008634 <sbgEComProtocolProcessExtendedFrame+0x26c>)
 8008404:	f240 2171 	movw	r1, #625	; 0x271
 8008408:	488b      	ldr	r0, [pc, #556]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 800840a:	f000 fd21 	bl	8008e50 <__assert_func>
	assert(pageIndex < nrPages);
 800840e:	8c3a      	ldrh	r2, [r7, #32]
 8008410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008412:	429a      	cmp	r2, r3
 8008414:	d306      	bcc.n	8008424 <sbgEComProtocolProcessExtendedFrame+0x5c>
 8008416:	4b8a      	ldr	r3, [pc, #552]	; (8008640 <sbgEComProtocolProcessExtendedFrame+0x278>)
 8008418:	4a86      	ldr	r2, [pc, #536]	; (8008634 <sbgEComProtocolProcessExtendedFrame+0x26c>)
 800841a:	f240 2172 	movw	r1, #626	; 0x272
 800841e:	4886      	ldr	r0, [pc, #536]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 8008420:	f000 fd16 	bl	8008e50 <__assert_func>
	assert(pBuffer || (size == 0));
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	2b00      	cmp	r3, #0
 8008428:	d109      	bne.n	800843e <sbgEComProtocolProcessExtendedFrame+0x76>
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d006      	beq.n	800843e <sbgEComProtocolProcessExtendedFrame+0x76>
 8008430:	4b84      	ldr	r3, [pc, #528]	; (8008644 <sbgEComProtocolProcessExtendedFrame+0x27c>)
 8008432:	4a80      	ldr	r2, [pc, #512]	; (8008634 <sbgEComProtocolProcessExtendedFrame+0x26c>)
 8008434:	f240 2173 	movw	r1, #627	; 0x273
 8008438:	487f      	ldr	r0, [pc, #508]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 800843a:	f000 fd09 	bl	8008e50 <__assert_func>
	assert(size <= SBG_ECOM_MAX_EXTENDED_PAYLOAD_SIZE);
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	f640 72f1 	movw	r2, #4081	; 0xff1
 8008444:	4293      	cmp	r3, r2
 8008446:	d906      	bls.n	8008456 <sbgEComProtocolProcessExtendedFrame+0x8e>
 8008448:	4b7f      	ldr	r3, [pc, #508]	; (8008648 <sbgEComProtocolProcessExtendedFrame+0x280>)
 800844a:	4a7a      	ldr	r2, [pc, #488]	; (8008634 <sbgEComProtocolProcessExtendedFrame+0x26c>)
 800844c:	f44f 711d 	mov.w	r1, #628	; 0x274
 8008450:	4879      	ldr	r0, [pc, #484]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 8008452:	f000 fcfd 	bl	8008e50 <__assert_func>

	if (pageIndex == 0)
 8008456:	8c3b      	ldrh	r3, [r7, #32]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d171      	bne.n	8008540 <sbgEComProtocolProcessExtendedFrame+0x178>
	{
		size_t							 capacity;

		if (sbgEComProtocolLargeTransferInProgress(pProtocol))
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7ff ff3b 	bl	80082d8 <sbgEComProtocolLargeTransferInProgress>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01c      	beq.n	80084a2 <sbgEComProtocolProcessExtendedFrame+0xda>
		{
			SBG_LOG_ERROR(SBG_ERROR, "large transfer started while a large transfer is in progress");
 8008468:	4b78      	ldr	r3, [pc, #480]	; (800864c <sbgEComProtocolProcessExtendedFrame+0x284>)
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	2301      	movs	r3, #1
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	2300      	movs	r3, #0
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	4b76      	ldr	r3, [pc, #472]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 8008476:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800847a:	4976      	ldr	r1, [pc, #472]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 800847c:	486e      	ldr	r0, [pc, #440]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 800847e:	f7fa fc4b 	bl	8002d18 <sbgPlatformDebugLogMsg>
			SBG_LOG_ERROR(SBG_ERROR, "terminating large transfer");
 8008482:	4b75      	ldr	r3, [pc, #468]	; (8008658 <sbgEComProtocolProcessExtendedFrame+0x290>)
 8008484:	9302      	str	r3, [sp, #8]
 8008486:	2301      	movs	r3, #1
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	2300      	movs	r3, #0
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	4b70      	ldr	r3, [pc, #448]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 8008490:	f240 227d 	movw	r2, #637	; 0x27d
 8008494:	496f      	ldr	r1, [pc, #444]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 8008496:	4868      	ldr	r0, [pc, #416]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 8008498:	f7fa fc3e 	bl	8002d18 <sbgPlatformDebugLogMsg>

			sbgEComProtocolClearLargeTransfer(pProtocol);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ff71 	bl	8008384 <sbgEComProtocolClearLargeTransfer>
		}

		capacity = nrPages * SBG_ECOM_MAX_EXTENDED_PAYLOAD_SIZE;
 80084a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084a4:	4613      	mov	r3, r2
 80084a6:	021b      	lsls	r3, r3, #8
 80084a8:	1a9b      	subs	r3, r3, r2
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

		pProtocol->pLargeBuffer = malloc(capacity);
 80084b0:	6938      	ldr	r0, [r7, #16]
 80084b2:	f000 ff47 	bl	8009344 <malloc>
 80084b6:	4603      	mov	r3, r0
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c0:	611a      	str	r2, [r3, #16]

		if (pProtocol->pLargeBuffer)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d025      	beq.n	800851a <sbgEComProtocolProcessExtendedFrame+0x152>
		{
			pProtocol->largeBufferSize	= 0;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d4:	461a      	mov	r2, r3
 80084d6:	2300      	movs	r3, #0
 80084d8:	6153      	str	r3, [r2, #20]
			pProtocol->msgClass			= msgClass;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e0:	461a      	mov	r2, r3
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	7613      	strb	r3, [r2, #24]
			pProtocol->msgId			= msgId;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ec:	461a      	mov	r2, r3
 80084ee:	78bb      	ldrb	r3, [r7, #2]
 80084f0:	7653      	strb	r3, [r2, #25]
			pProtocol->transferId		= transferId;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f8:	461a      	mov	r2, r3
 80084fa:	787b      	ldrb	r3, [r7, #1]
 80084fc:	7693      	strb	r3, [r2, #26]
			pProtocol->pageIndex		= 0;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	2200      	movs	r2, #0
 8008506:	839a      	strh	r2, [r3, #28]
			pProtocol->nrPages			= nrPages;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850e:	461a      	mov	r2, r3
 8008510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008512:	83d3      	strh	r3, [r2, #30]

			errorCode = SBG_NO_ERROR;
 8008514:	2300      	movs	r3, #0
 8008516:	75fb      	strb	r3, [r7, #23]
 8008518:	e02a      	b.n	8008570 <sbgEComProtocolProcessExtendedFrame+0x1a8>
		}
		else
		{
			SBG_LOG_ERROR(SBG_MALLOC_FAILED, "unable to allocate buffer");
 800851a:	4b50      	ldr	r3, [pc, #320]	; (800865c <sbgEComProtocolProcessExtendedFrame+0x294>)
 800851c:	9302      	str	r3, [sp, #8]
 800851e:	230b      	movs	r3, #11
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	2300      	movs	r3, #0
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	4b4a      	ldr	r3, [pc, #296]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 8008528:	f240 2293 	movw	r2, #659	; 0x293
 800852c:	4949      	ldr	r1, [pc, #292]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 800852e:	4842      	ldr	r0, [pc, #264]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 8008530:	f7fa fbf2 	bl	8002d18 <sbgPlatformDebugLogMsg>

			sbgEComProtocolResetLargeTransfer(pProtocol);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7ff fef1 	bl	800831c <sbgEComProtocolResetLargeTransfer>

			errorCode = SBG_NOT_READY;
 800853a:	230a      	movs	r3, #10
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e017      	b.n	8008570 <sbgEComProtocolProcessExtendedFrame+0x1a8>
		}
	}
	else
	{
		if (sbgEComProtocolLargeTransferInProgress(pProtocol))
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff fec9 	bl	80082d8 <sbgEComProtocolLargeTransferInProgress>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <sbgEComProtocolProcessExtendedFrame+0x18a>
		{
			errorCode = SBG_NO_ERROR;
 800854c:	2300      	movs	r3, #0
 800854e:	75fb      	strb	r3, [r7, #23]
 8008550:	e00e      	b.n	8008570 <sbgEComProtocolProcessExtendedFrame+0x1a8>
		}
		else
		{
			SBG_LOG_ERROR(SBG_ERROR, "extended frame received while no large transfer in progress");
 8008552:	4b43      	ldr	r3, [pc, #268]	; (8008660 <sbgEComProtocolProcessExtendedFrame+0x298>)
 8008554:	9302      	str	r3, [sp, #8]
 8008556:	2301      	movs	r3, #1
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	2300      	movs	r3, #0
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	4b3c      	ldr	r3, [pc, #240]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 8008560:	f240 22a2 	movw	r2, #674	; 0x2a2
 8008564:	493b      	ldr	r1, [pc, #236]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 8008566:	4834      	ldr	r0, [pc, #208]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 8008568:	f7fa fbd6 	bl	8002d18 <sbgPlatformDebugLogMsg>

			errorCode = SBG_NOT_READY;
 800856c:	230a      	movs	r3, #10
 800856e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (errorCode == SBG_NO_ERROR)
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f040 811c 	bne.w	80087b0 <sbgEComProtocolProcessExtendedFrame+0x3e8>
	{
		if (msgClass == pProtocol->msgClass)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800857e:	7e1b      	ldrb	r3, [r3, #24]
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	429a      	cmp	r2, r3
 8008584:	d102      	bne.n	800858c <sbgEComProtocolProcessExtendedFrame+0x1c4>
		{
			errorCode = SBG_NO_ERROR;
 8008586:	2300      	movs	r3, #0
 8008588:	75fb      	strb	r3, [r7, #23]
 800858a:	e01e      	b.n	80085ca <sbgEComProtocolProcessExtendedFrame+0x202>
		}
		else
		{
			SBG_LOG_ERROR(SBG_ERROR, "message class mismatch in extended frame");
 800858c:	4b35      	ldr	r3, [pc, #212]	; (8008664 <sbgEComProtocolProcessExtendedFrame+0x29c>)
 800858e:	9302      	str	r3, [sp, #8]
 8008590:	2301      	movs	r3, #1
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	2300      	movs	r3, #0
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 800859a:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 800859e:	492d      	ldr	r1, [pc, #180]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 80085a0:	4825      	ldr	r0, [pc, #148]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 80085a2:	f7fa fbb9 	bl	8002d18 <sbgPlatformDebugLogMsg>
			SBG_LOG_ERROR(SBG_ERROR, "terminating large transfer");
 80085a6:	4b2c      	ldr	r3, [pc, #176]	; (8008658 <sbgEComProtocolProcessExtendedFrame+0x290>)
 80085a8:	9302      	str	r3, [sp, #8]
 80085aa:	2301      	movs	r3, #1
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	2300      	movs	r3, #0
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4b27      	ldr	r3, [pc, #156]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 80085b4:	f240 22b1 	movw	r2, #689	; 0x2b1
 80085b8:	4926      	ldr	r1, [pc, #152]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 80085ba:	481f      	ldr	r0, [pc, #124]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 80085bc:	f7fa fbac 	bl	8002d18 <sbgPlatformDebugLogMsg>

			sbgEComProtocolClearLargeTransfer(pProtocol);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fedf 	bl	8008384 <sbgEComProtocolClearLargeTransfer>

			errorCode = SBG_NOT_READY;
 80085c6:	230a      	movs	r3, #10
 80085c8:	75fb      	strb	r3, [r7, #23]
		}

		if (msgId == pProtocol->msgId)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d0:	7e5b      	ldrb	r3, [r3, #25]
 80085d2:	78ba      	ldrb	r2, [r7, #2]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d102      	bne.n	80085de <sbgEComProtocolProcessExtendedFrame+0x216>
		{
			errorCode = SBG_NO_ERROR;
 80085d8:	2300      	movs	r3, #0
 80085da:	75fb      	strb	r3, [r7, #23]
 80085dc:	e01e      	b.n	800861c <sbgEComProtocolProcessExtendedFrame+0x254>
		}
		else
		{
			SBG_LOG_ERROR(SBG_ERROR, "message ID mismatch in extended frame");
 80085de:	4b22      	ldr	r3, [pc, #136]	; (8008668 <sbgEComProtocolProcessExtendedFrame+0x2a0>)
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	2301      	movs	r3, #1
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	2300      	movs	r3, #0
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	4b19      	ldr	r3, [pc, #100]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 80085ec:	f240 22be 	movw	r2, #702	; 0x2be
 80085f0:	4918      	ldr	r1, [pc, #96]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 80085f2:	4811      	ldr	r0, [pc, #68]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 80085f4:	f7fa fb90 	bl	8002d18 <sbgPlatformDebugLogMsg>
			SBG_LOG_ERROR(SBG_ERROR, "terminating large transfer");
 80085f8:	4b17      	ldr	r3, [pc, #92]	; (8008658 <sbgEComProtocolProcessExtendedFrame+0x290>)
 80085fa:	9302      	str	r3, [sp, #8]
 80085fc:	2301      	movs	r3, #1
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	2300      	movs	r3, #0
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	4b12      	ldr	r3, [pc, #72]	; (8008650 <sbgEComProtocolProcessExtendedFrame+0x288>)
 8008606:	f240 22bf 	movw	r2, #703	; 0x2bf
 800860a:	4912      	ldr	r1, [pc, #72]	; (8008654 <sbgEComProtocolProcessExtendedFrame+0x28c>)
 800860c:	480a      	ldr	r0, [pc, #40]	; (8008638 <sbgEComProtocolProcessExtendedFrame+0x270>)
 800860e:	f7fa fb83 	bl	8002d18 <sbgPlatformDebugLogMsg>

			sbgEComProtocolClearLargeTransfer(pProtocol);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff feb6 	bl	8008384 <sbgEComProtocolClearLargeTransfer>

			errorCode = SBG_NOT_READY;
 8008618:	230a      	movs	r3, #10
 800861a:	75fb      	strb	r3, [r7, #23]
		}

		if (transferId == pProtocol->transferId)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008622:	7e9b      	ldrb	r3, [r3, #26]
 8008624:	787a      	ldrb	r2, [r7, #1]
 8008626:	429a      	cmp	r2, r3
 8008628:	d120      	bne.n	800866c <sbgEComProtocolProcessExtendedFrame+0x2a4>
		{
			errorCode = SBG_NO_ERROR;
 800862a:	2300      	movs	r3, #0
 800862c:	75fb      	strb	r3, [r7, #23]
 800862e:	e03c      	b.n	80086aa <sbgEComProtocolProcessExtendedFrame+0x2e2>
 8008630:	0800bbec 	.word	0x0800bbec
 8008634:	0800dd60 	.word	0x0800dd60
 8008638:	0800baf4 	.word	0x0800baf4
 800863c:	0800bde0 	.word	0x0800bde0
 8008640:	0800be40 	.word	0x0800be40
 8008644:	0800bea8 	.word	0x0800bea8
 8008648:	0800be54 	.word	0x0800be54
 800864c:	0800bec0 	.word	0x0800bec0
 8008650:	0800baec 	.word	0x0800baec
 8008654:	0800dd84 	.word	0x0800dd84
 8008658:	0800bf00 	.word	0x0800bf00
 800865c:	0800bf1c 	.word	0x0800bf1c
 8008660:	0800bf38 	.word	0x0800bf38
 8008664:	0800bf74 	.word	0x0800bf74
 8008668:	0800bfa0 	.word	0x0800bfa0
		}
		else
		{
			SBG_LOG_ERROR(SBG_ERROR, "transfer ID mismatch in extended frame");
 800866c:	4b53      	ldr	r3, [pc, #332]	; (80087bc <sbgEComProtocolProcessExtendedFrame+0x3f4>)
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	2301      	movs	r3, #1
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	2300      	movs	r3, #0
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	4b51      	ldr	r3, [pc, #324]	; (80087c0 <sbgEComProtocolProcessExtendedFrame+0x3f8>)
 800867a:	f44f 7233 	mov.w	r2, #716	; 0x2cc
 800867e:	4951      	ldr	r1, [pc, #324]	; (80087c4 <sbgEComProtocolProcessExtendedFrame+0x3fc>)
 8008680:	4851      	ldr	r0, [pc, #324]	; (80087c8 <sbgEComProtocolProcessExtendedFrame+0x400>)
 8008682:	f7fa fb49 	bl	8002d18 <sbgPlatformDebugLogMsg>
			SBG_LOG_ERROR(SBG_ERROR, "terminating large transfer");
 8008686:	4b51      	ldr	r3, [pc, #324]	; (80087cc <sbgEComProtocolProcessExtendedFrame+0x404>)
 8008688:	9302      	str	r3, [sp, #8]
 800868a:	2301      	movs	r3, #1
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	2300      	movs	r3, #0
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4b4b      	ldr	r3, [pc, #300]	; (80087c0 <sbgEComProtocolProcessExtendedFrame+0x3f8>)
 8008694:	f240 22cd 	movw	r2, #717	; 0x2cd
 8008698:	494a      	ldr	r1, [pc, #296]	; (80087c4 <sbgEComProtocolProcessExtendedFrame+0x3fc>)
 800869a:	484b      	ldr	r0, [pc, #300]	; (80087c8 <sbgEComProtocolProcessExtendedFrame+0x400>)
 800869c:	f7fa fb3c 	bl	8002d18 <sbgPlatformDebugLogMsg>

			sbgEComProtocolClearLargeTransfer(pProtocol);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fe6f 	bl	8008384 <sbgEComProtocolClearLargeTransfer>

			errorCode = SBG_NOT_READY;
 80086a6:	230a      	movs	r3, #10
 80086a8:	75fb      	strb	r3, [r7, #23]
		}

		if (errorCode == SBG_NO_ERROR)
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d17f      	bne.n	80087b0 <sbgEComProtocolProcessExtendedFrame+0x3e8>
		{
			if (nrPages == pProtocol->nrPages)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b6:	8bdb      	ldrh	r3, [r3, #30]
 80086b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d159      	bne.n	8008772 <sbgEComProtocolProcessExtendedFrame+0x3aa>
			{
				if (pageIndex == pProtocol->pageIndex)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c4:	8b9b      	ldrh	r3, [r3, #28]
 80086c6:	8c3a      	ldrh	r2, [r7, #32]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d132      	bne.n	8008732 <sbgEComProtocolProcessExtendedFrame+0x36a>
				{
					size_t				 offset;

					offset = pageIndex * SBG_ECOM_MAX_EXTENDED_PAYLOAD_SIZE;
 80086cc:	8c3a      	ldrh	r2, [r7, #32]
 80086ce:	4613      	mov	r3, r2
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	4413      	add	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
					memcpy(&pProtocol->pLargeBuffer[offset], pBuffer, size);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fe3a 	bl	8009364 <memcpy>

					pProtocol->largeBufferSize += size;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	4413      	add	r3, r2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008702:	6153      	str	r3, [r2, #20]
					pProtocol->pageIndex++;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800870a:	8b9b      	ldrh	r3, [r3, #28]
 800870c:	3301      	adds	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	839a      	strh	r2, [r3, #28]

					if (pProtocol->pageIndex != pProtocol->nrPages)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871e:	8b9a      	ldrh	r2, [r3, #28]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008726:	8bdb      	ldrh	r3, [r3, #30]
 8008728:	429a      	cmp	r2, r3
 800872a:	d041      	beq.n	80087b0 <sbgEComProtocolProcessExtendedFrame+0x3e8>
					{
						errorCode = SBG_NOT_READY;
 800872c:	230a      	movs	r3, #10
 800872e:	75fb      	strb	r3, [r7, #23]
 8008730:	e03e      	b.n	80087b0 <sbgEComProtocolProcessExtendedFrame+0x3e8>
					}
				}
				else
				{
					SBG_LOG_ERROR(SBG_ERROR, "extended frame received out of sequence");
 8008732:	4b27      	ldr	r3, [pc, #156]	; (80087d0 <sbgEComProtocolProcessExtendedFrame+0x408>)
 8008734:	9302      	str	r3, [sp, #8]
 8008736:	2301      	movs	r3, #1
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	2300      	movs	r3, #0
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <sbgEComProtocolProcessExtendedFrame+0x3f8>)
 8008740:	f240 22e9 	movw	r2, #745	; 0x2e9
 8008744:	491f      	ldr	r1, [pc, #124]	; (80087c4 <sbgEComProtocolProcessExtendedFrame+0x3fc>)
 8008746:	4820      	ldr	r0, [pc, #128]	; (80087c8 <sbgEComProtocolProcessExtendedFrame+0x400>)
 8008748:	f7fa fae6 	bl	8002d18 <sbgPlatformDebugLogMsg>
					SBG_LOG_ERROR(SBG_ERROR, "terminating large transfer");
 800874c:	4b1f      	ldr	r3, [pc, #124]	; (80087cc <sbgEComProtocolProcessExtendedFrame+0x404>)
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	2301      	movs	r3, #1
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	2300      	movs	r3, #0
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4b19      	ldr	r3, [pc, #100]	; (80087c0 <sbgEComProtocolProcessExtendedFrame+0x3f8>)
 800875a:	f240 22ea 	movw	r2, #746	; 0x2ea
 800875e:	4919      	ldr	r1, [pc, #100]	; (80087c4 <sbgEComProtocolProcessExtendedFrame+0x3fc>)
 8008760:	4819      	ldr	r0, [pc, #100]	; (80087c8 <sbgEComProtocolProcessExtendedFrame+0x400>)
 8008762:	f7fa fad9 	bl	8002d18 <sbgPlatformDebugLogMsg>

					sbgEComProtocolClearLargeTransfer(pProtocol);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fe0c 	bl	8008384 <sbgEComProtocolClearLargeTransfer>

					errorCode = SBG_NOT_READY;
 800876c:	230a      	movs	r3, #10
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	e01e      	b.n	80087b0 <sbgEComProtocolProcessExtendedFrame+0x3e8>
				}
			}
			else
			{
				SBG_LOG_ERROR(SBG_ERROR, "page count mismatch in extended frame");
 8008772:	4b18      	ldr	r3, [pc, #96]	; (80087d4 <sbgEComProtocolProcessExtendedFrame+0x40c>)
 8008774:	9302      	str	r3, [sp, #8]
 8008776:	2301      	movs	r3, #1
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	2300      	movs	r3, #0
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	4b10      	ldr	r3, [pc, #64]	; (80087c0 <sbgEComProtocolProcessExtendedFrame+0x3f8>)
 8008780:	f240 22f3 	movw	r2, #755	; 0x2f3
 8008784:	490f      	ldr	r1, [pc, #60]	; (80087c4 <sbgEComProtocolProcessExtendedFrame+0x3fc>)
 8008786:	4810      	ldr	r0, [pc, #64]	; (80087c8 <sbgEComProtocolProcessExtendedFrame+0x400>)
 8008788:	f7fa fac6 	bl	8002d18 <sbgPlatformDebugLogMsg>
				SBG_LOG_ERROR(SBG_ERROR, "terminating large transfer");
 800878c:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <sbgEComProtocolProcessExtendedFrame+0x404>)
 800878e:	9302      	str	r3, [sp, #8]
 8008790:	2301      	movs	r3, #1
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	2300      	movs	r3, #0
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <sbgEComProtocolProcessExtendedFrame+0x3f8>)
 800879a:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 800879e:	4909      	ldr	r1, [pc, #36]	; (80087c4 <sbgEComProtocolProcessExtendedFrame+0x3fc>)
 80087a0:	4809      	ldr	r0, [pc, #36]	; (80087c8 <sbgEComProtocolProcessExtendedFrame+0x400>)
 80087a2:	f7fa fab9 	bl	8002d18 <sbgPlatformDebugLogMsg>

				sbgEComProtocolClearLargeTransfer(pProtocol);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fdec 	bl	8008384 <sbgEComProtocolClearLargeTransfer>

				errorCode = SBG_NOT_READY;
 80087ac:	230a      	movs	r3, #10
 80087ae:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	return errorCode;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	0800bfc8 	.word	0x0800bfc8
 80087c0:	0800baec 	.word	0x0800baec
 80087c4:	0800dd84 	.word	0x0800dd84
 80087c8:	0800baf4 	.word	0x0800baf4
 80087cc:	0800bf00 	.word	0x0800bf00
 80087d0:	0800bff0 	.word	0x0800bff0
 80087d4:	0800c018 	.word	0x0800c018

080087d8 <sbgEComProtocolPayloadConstruct>:
//----------------------------------------------------------------------//
//- Public methods (SbgEComProtocolPayload)                            -//
//----------------------------------------------------------------------//

void sbgEComProtocolPayloadConstruct(SbgEComProtocolPayload *pPayload)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	assert(pPayload);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <sbgEComProtocolPayloadConstruct+0x1c>
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <sbgEComProtocolPayloadConstruct+0x38>)
 80087e8:	4a0a      	ldr	r2, [pc, #40]	; (8008814 <sbgEComProtocolPayloadConstruct+0x3c>)
 80087ea:	f240 3106 	movw	r1, #774	; 0x306
 80087ee:	480a      	ldr	r0, [pc, #40]	; (8008818 <sbgEComProtocolPayloadConstruct+0x40>)
 80087f0:	f000 fb2e 	bl	8008e50 <__assert_func>

	pPayload->allocated	= false;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
	pPayload->pBuffer	= NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	605a      	str	r2, [r3, #4]
	pPayload->size		= 0;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	609a      	str	r2, [r3, #8]
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	0800bbe0 	.word	0x0800bbe0
 8008814:	0800dda8 	.word	0x0800dda8
 8008818:	0800baf4 	.word	0x0800baf4

0800881c <sbgEComProtocolPayloadDestroy>:

void sbgEComProtocolPayloadDestroy(SbgEComProtocolPayload *pPayload)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
	assert(pPayload);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <sbgEComProtocolPayloadDestroy+0x1c>
 800882a:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <sbgEComProtocolPayloadDestroy+0x38>)
 800882c:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <sbgEComProtocolPayloadDestroy+0x3c>)
 800882e:	f240 310f 	movw	r1, #783	; 0x30f
 8008832:	480a      	ldr	r0, [pc, #40]	; (800885c <sbgEComProtocolPayloadDestroy+0x40>)
 8008834:	f000 fb0c 	bl	8008e50 <__assert_func>

	if (pPayload->allocated)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d004      	beq.n	800884a <sbgEComProtocolPayloadDestroy+0x2e>
	{
		free(pPayload->pBuffer);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fd85 	bl	8009354 <free>
	}
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	0800bbe0 	.word	0x0800bbe0
 8008858:	0800ddc8 	.word	0x0800ddc8
 800885c:	0800baf4 	.word	0x0800baf4

08008860 <sbgEComProtocolPayloadGetBuffer>:

const void *sbgEComProtocolPayloadGetBuffer(const SbgEComProtocolPayload *pPayload)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
	assert(pPayload);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <sbgEComProtocolPayloadGetBuffer+0x1c>
 800886e:	4b06      	ldr	r3, [pc, #24]	; (8008888 <sbgEComProtocolPayloadGetBuffer+0x28>)
 8008870:	4a06      	ldr	r2, [pc, #24]	; (800888c <sbgEComProtocolPayloadGetBuffer+0x2c>)
 8008872:	f240 3119 	movw	r1, #793	; 0x319
 8008876:	4806      	ldr	r0, [pc, #24]	; (8008890 <sbgEComProtocolPayloadGetBuffer+0x30>)
 8008878:	f000 faea 	bl	8008e50 <__assert_func>

	return pPayload->pBuffer;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	0800bbe0 	.word	0x0800bbe0
 800888c:	0800dde8 	.word	0x0800dde8
 8008890:	0800baf4 	.word	0x0800baf4

08008894 <sbgEComProtocolPayloadGetSize>:

size_t sbgEComProtocolPayloadGetSize(const SbgEComProtocolPayload *pPayload)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
	assert(pPayload);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <sbgEComProtocolPayloadGetSize+0x1c>
 80088a2:	4b06      	ldr	r3, [pc, #24]	; (80088bc <sbgEComProtocolPayloadGetSize+0x28>)
 80088a4:	4a06      	ldr	r2, [pc, #24]	; (80088c0 <sbgEComProtocolPayloadGetSize+0x2c>)
 80088a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80088aa:	4806      	ldr	r0, [pc, #24]	; (80088c4 <sbgEComProtocolPayloadGetSize+0x30>)
 80088ac:	f000 fad0 	bl	8008e50 <__assert_func>

	return pPayload->size;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	0800bbe0 	.word	0x0800bbe0
 80088c0:	0800de08 	.word	0x0800de08
 80088c4:	0800baf4 	.word	0x0800baf4

080088c8 <sbgEComProtocolInit>:
//----------------------------------------------------------------------//
//- Public methods (SbgEComProtocol)                                   -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComProtocolInit(SbgEComProtocol *pProtocol, SbgInterface *pInterface)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	assert(pProtocol);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d106      	bne.n	80088e6 <sbgEComProtocolInit+0x1e>
 80088d8:	4b16      	ldr	r3, [pc, #88]	; (8008934 <sbgEComProtocolInit+0x6c>)
 80088da:	4a17      	ldr	r2, [pc, #92]	; (8008938 <sbgEComProtocolInit+0x70>)
 80088dc:	f240 3151 	movw	r1, #849	; 0x351
 80088e0:	4816      	ldr	r0, [pc, #88]	; (800893c <sbgEComProtocolInit+0x74>)
 80088e2:	f000 fab5 	bl	8008e50 <__assert_func>
	assert(pInterface);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d106      	bne.n	80088fa <sbgEComProtocolInit+0x32>
 80088ec:	4b14      	ldr	r3, [pc, #80]	; (8008940 <sbgEComProtocolInit+0x78>)
 80088ee:	4a12      	ldr	r2, [pc, #72]	; (8008938 <sbgEComProtocolInit+0x70>)
 80088f0:	f240 3152 	movw	r1, #850	; 0x352
 80088f4:	4811      	ldr	r0, [pc, #68]	; (800893c <sbgEComProtocolInit+0x74>)
 80088f6:	f000 faab 	bl	8008e50 <__assert_func>

	pProtocol->pLinkedInterface	= pInterface;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	601a      	str	r2, [r3, #0]
	pProtocol->rxBufferSize		= 0;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008906:	461a      	mov	r2, r3
 8008908:	2300      	movs	r3, #0
 800890a:	6053      	str	r3, [r2, #4]
	pProtocol->discardSize		= 0;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008912:	461a      	mov	r2, r3
 8008914:	2300      	movs	r3, #0
 8008916:	6093      	str	r3, [r2, #8]
	pProtocol->nextLargeTxId	= 0;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891e:	2200      	movs	r2, #0
 8008920:	731a      	strb	r2, [r3, #12]

	sbgEComProtocolResetLargeTransfer(pProtocol);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff fcfa 	bl	800831c <sbgEComProtocolResetLargeTransfer>

	return SBG_NO_ERROR;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	0800bbec 	.word	0x0800bbec
 8008938:	0800de28 	.word	0x0800de28
 800893c:	0800baf4 	.word	0x0800baf4
 8008940:	0800ba48 	.word	0x0800ba48

08008944 <sbgEComProtocolReceive>:

	return errorCode;
}

SbgErrorCode sbgEComProtocolReceive(SbgEComProtocol *pProtocol, uint8_t *pMsgClass, uint8_t *pMsgId, void *pData, size_t *pSize, size_t maxSize)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	603b      	str	r3, [r7, #0]
	SbgErrorCode						 errorCode;
	SbgEComProtocolPayload				 payload;

	sbgEComProtocolPayloadConstruct(&payload);
 8008952:	f107 0310 	add.w	r3, r7, #16
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff ff3e 	bl	80087d8 <sbgEComProtocolPayloadConstruct>

	errorCode = sbgEComProtocolReceive2(pProtocol, pMsgClass, pMsgId, &payload);
 800895c:	f107 0310 	add.w	r3, r7, #16
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f835 	bl	80089d4 <sbgEComProtocolReceive2>
 800896a:	4603      	mov	r3, r0
 800896c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (errorCode == SBG_NO_ERROR)
 8008970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008974:	2b00      	cmp	r3, #0
 8008976:	d121      	bne.n	80089bc <sbgEComProtocolReceive+0x78>
	{
		size_t							 size;

		size = sbgEComProtocolPayloadGetSize(&payload);
 8008978:	f107 0310 	add.w	r3, r7, #16
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff ff89 	bl	8008894 <sbgEComProtocolPayloadGetSize>
 8008982:	6238      	str	r0, [r7, #32]

		if (size <= maxSize)
 8008984:	6a3a      	ldr	r2, [r7, #32]
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	429a      	cmp	r2, r3
 800898a:	d814      	bhi.n	80089b6 <sbgEComProtocolReceive+0x72>
		{
			if (pData)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <sbgEComProtocolReceive+0x64>
			{
				const void				*pBuffer;

				pBuffer = sbgEComProtocolPayloadGetBuffer(&payload);
 8008992:	f107 0310 	add.w	r3, r7, #16
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff ff62 	bl	8008860 <sbgEComProtocolPayloadGetBuffer>
 800899c:	61f8      	str	r0, [r7, #28]

				memcpy(pData, pBuffer, size);
 800899e:	6a3a      	ldr	r2, [r7, #32]
 80089a0:	69f9      	ldr	r1, [r7, #28]
 80089a2:	6838      	ldr	r0, [r7, #0]
 80089a4:	f000 fcde 	bl	8009364 <memcpy>
			}

			if (pSize)
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d006      	beq.n	80089bc <sbgEComProtocolReceive+0x78>
			{
				*pSize = size;
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	6a3a      	ldr	r2, [r7, #32]
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	e002      	b.n	80089bc <sbgEComProtocolReceive+0x78>
			}
		}
		else
		{
			errorCode = SBG_BUFFER_OVERFLOW;
 80089b6:	2308      	movs	r3, #8
 80089b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	sbgEComProtocolPayloadDestroy(&payload);
 80089bc:	f107 0310 	add.w	r3, r7, #16
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff ff2b 	bl	800881c <sbgEComProtocolPayloadDestroy>

	return errorCode;
 80089c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3728      	adds	r7, #40	; 0x28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <sbgEComProtocolReceive2>:

SbgErrorCode sbgEComProtocolReceive2(SbgEComProtocol *pProtocol, uint8_t *pMsgClass, uint8_t *pMsgId, SbgEComProtocolPayload *pPayload)
{
 80089d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d6:	b08d      	sub	sp, #52	; 0x34
 80089d8:	af04      	add	r7, sp, #16
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
	uint16_t							 pageIndex;
	uint16_t							 nrPages;
	void								*pBuffer;
	size_t								 size;

	assert(pProtocol);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <sbgEComProtocolReceive2+0x22>
 80089e8:	4b55      	ldr	r3, [pc, #340]	; (8008b40 <sbgEComProtocolReceive2+0x16c>)
 80089ea:	4a56      	ldr	r2, [pc, #344]	; (8008b44 <sbgEComProtocolReceive2+0x170>)
 80089ec:	f240 4106 	movw	r1, #1030	; 0x406
 80089f0:	4855      	ldr	r0, [pc, #340]	; (8008b48 <sbgEComProtocolReceive2+0x174>)
 80089f2:	f000 fa2d 	bl	8008e50 <__assert_func>
	assert(pProtocol->discardSize <= pProtocol->rxBufferSize);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d906      	bls.n	8008a18 <sbgEComProtocolReceive2+0x44>
 8008a0a:	4b50      	ldr	r3, [pc, #320]	; (8008b4c <sbgEComProtocolReceive2+0x178>)
 8008a0c:	4a4d      	ldr	r2, [pc, #308]	; (8008b44 <sbgEComProtocolReceive2+0x170>)
 8008a0e:	f240 4107 	movw	r1, #1031	; 0x407
 8008a12:	484d      	ldr	r0, [pc, #308]	; (8008b48 <sbgEComProtocolReceive2+0x174>)
 8008a14:	f000 fa1c 	bl	8008e50 <__assert_func>

	sbgEComProtocolPayloadClear(pPayload);
 8008a18:	6838      	ldr	r0, [r7, #0]
 8008a1a:	f7ff f891 	bl	8007b40 <sbgEComProtocolPayloadClear>

	sbgEComProtocolDiscardUnusedBytes(pProtocol);
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff f8e8 	bl	8007bf4 <sbgEComProtocolDiscardUnusedBytes>

	sbgEComProtocolRead(pProtocol);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff f93d 	bl	8007ca4 <sbgEComProtocolRead>

	errorCode = sbgEComProtocolFindFrame(pProtocol, &msgClass, &msgId, &transferId, &pageIndex, &nrPages, &pBuffer, &size);
 8008a2a:	f107 001c 	add.w	r0, r7, #28
 8008a2e:	f107 021d 	add.w	r2, r7, #29
 8008a32:	f107 011e 	add.w	r1, r7, #30
 8008a36:	f107 0310 	add.w	r3, r7, #16
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	9302      	str	r3, [sp, #8]
 8008a42:	f107 0318 	add.w	r3, r7, #24
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	f107 031a 	add.w	r3, r7, #26
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	4603      	mov	r3, r0
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff fbb9 	bl	80081c8 <sbgEComProtocolFindFrame>
 8008a56:	4603      	mov	r3, r0
 8008a58:	77fb      	strb	r3, [r7, #31]

	if (errorCode == SBG_NO_ERROR)
 8008a5a:	7ffb      	ldrb	r3, [r7, #31]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d169      	bne.n	8008b34 <sbgEComProtocolReceive2+0x160>
	{
		if (nrPages == 0)
 8008a60:	8b3b      	ldrh	r3, [r7, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d135      	bne.n	8008ad2 <sbgEComProtocolReceive2+0xfe>
		{
			if (sbgEComProtocolLargeTransferInProgress(pProtocol))
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fc36 	bl	80082d8 <sbgEComProtocolLargeTransferInProgress>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01c      	beq.n	8008aac <sbgEComProtocolReceive2+0xd8>
			{
				SBG_LOG_ERROR(SBG_ERROR, "standard frame received while a large transfer is in progress");
 8008a72:	4b37      	ldr	r3, [pc, #220]	; (8008b50 <sbgEComProtocolReceive2+0x17c>)
 8008a74:	9302      	str	r3, [sp, #8]
 8008a76:	2301      	movs	r3, #1
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	4b35      	ldr	r3, [pc, #212]	; (8008b54 <sbgEComProtocolReceive2+0x180>)
 8008a80:	f240 4217 	movw	r2, #1047	; 0x417
 8008a84:	4934      	ldr	r1, [pc, #208]	; (8008b58 <sbgEComProtocolReceive2+0x184>)
 8008a86:	4830      	ldr	r0, [pc, #192]	; (8008b48 <sbgEComProtocolReceive2+0x174>)
 8008a88:	f7fa f946 	bl	8002d18 <sbgPlatformDebugLogMsg>
				SBG_LOG_ERROR(SBG_ERROR, "terminating large transfer");
 8008a8c:	4b33      	ldr	r3, [pc, #204]	; (8008b5c <sbgEComProtocolReceive2+0x188>)
 8008a8e:	9302      	str	r3, [sp, #8]
 8008a90:	2301      	movs	r3, #1
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	2300      	movs	r3, #0
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	4b2e      	ldr	r3, [pc, #184]	; (8008b54 <sbgEComProtocolReceive2+0x180>)
 8008a9a:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8008a9e:	492e      	ldr	r1, [pc, #184]	; (8008b58 <sbgEComProtocolReceive2+0x184>)
 8008aa0:	4829      	ldr	r0, [pc, #164]	; (8008b48 <sbgEComProtocolReceive2+0x174>)
 8008aa2:	f7fa f939 	bl	8002d18 <sbgPlatformDebugLogMsg>

				sbgEComProtocolClearLargeTransfer(pProtocol);
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7ff fc6c 	bl	8008384 <sbgEComProtocolClearLargeTransfer>
			}

			if (pMsgClass)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <sbgEComProtocolReceive2+0xe4>
			{
				*pMsgClass = msgClass;
 8008ab2:	7fba      	ldrb	r2, [r7, #30]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	701a      	strb	r2, [r3, #0]
			}

			if (pMsgId)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <sbgEComProtocolReceive2+0xf0>
			{
				*pMsgId = msgId;
 8008abe:	7f7a      	ldrb	r2, [r7, #29]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	701a      	strb	r2, [r3, #0]
			}

			sbgEComProtocolPayloadSet(pPayload, false, pBuffer, size);
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	6838      	ldr	r0, [r7, #0]
 8008acc:	f7ff f862 	bl	8007b94 <sbgEComProtocolPayloadSet>
 8008ad0:	e030      	b.n	8008b34 <sbgEComProtocolReceive2+0x160>
		}
		else
		{
			errorCode = sbgEComProtocolProcessExtendedFrame(pProtocol, msgClass, msgId, transferId, pageIndex, nrPages, pBuffer, size);
 8008ad2:	7fbc      	ldrb	r4, [r7, #30]
 8008ad4:	7f7d      	ldrb	r5, [r7, #29]
 8008ad6:	7f3e      	ldrb	r6, [r7, #28]
 8008ad8:	8b7b      	ldrh	r3, [r7, #26]
 8008ada:	8b3a      	ldrh	r2, [r7, #24]
 8008adc:	6979      	ldr	r1, [r7, #20]
 8008ade:	6938      	ldr	r0, [r7, #16]
 8008ae0:	9003      	str	r0, [sp, #12]
 8008ae2:	9102      	str	r1, [sp, #8]
 8008ae4:	9201      	str	r2, [sp, #4]
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	4633      	mov	r3, r6
 8008aea:	462a      	mov	r2, r5
 8008aec:	4621      	mov	r1, r4
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff fc6a 	bl	80083c8 <sbgEComProtocolProcessExtendedFrame>
 8008af4:	4603      	mov	r3, r0
 8008af6:	77fb      	strb	r3, [r7, #31]

			if (errorCode == SBG_NO_ERROR)
 8008af8:	7ffb      	ldrb	r3, [r7, #31]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d11a      	bne.n	8008b34 <sbgEComProtocolReceive2+0x160>
			{
				if (pMsgClass)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <sbgEComProtocolReceive2+0x136>
				{
					*pMsgClass = msgClass;
 8008b04:	7fba      	ldrb	r2, [r7, #30]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	701a      	strb	r2, [r3, #0]
				}

				if (pMsgId)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <sbgEComProtocolReceive2+0x142>
				{
					*pMsgId = msgId;
 8008b10:	7f7a      	ldrb	r2, [r7, #29]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	701a      	strb	r2, [r3, #0]
				}

				sbgEComProtocolPayloadSet(pPayload, true, pProtocol->pLargeBuffer, pProtocol->largeBufferSize);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	2101      	movs	r1, #1
 8008b28:	6838      	ldr	r0, [r7, #0]
 8008b2a:	f7ff f833 	bl	8007b94 <sbgEComProtocolPayloadSet>
				sbgEComProtocolResetLargeTransfer(pProtocol);
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f7ff fbf4 	bl	800831c <sbgEComProtocolResetLargeTransfer>
			}
		}
	}

	return errorCode;
 8008b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3724      	adds	r7, #36	; 0x24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	0800bbec 	.word	0x0800bbec
 8008b44:	0800de3c 	.word	0x0800de3c
 8008b48:	0800baf4 	.word	0x0800baf4
 8008b4c:	0800bbf8 	.word	0x0800bbf8
 8008b50:	0800c0b4 	.word	0x0800c0b4
 8008b54:	0800baec 	.word	0x0800baec
 8008b58:	0800de54 	.word	0x0800de54
 8008b5c:	0800bf00 	.word	0x0800bf00

08008b60 <sbgEComMsgClassIsALog>:
 *
 * \param[in]	msgClass				Message class.
 * \return								TRUE if the message class corresponds to a binary log.
 */
SBG_INLINE bool sbgEComMsgClassIsALog(SbgEComClass msgClass)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	71fb      	strb	r3, [r7, #7]
	//
	// Test if this class id is part of the enum
	//
	if ((msgClass == SBG_ECOM_CLASS_LOG_ECOM_0) || (msgClass == SBG_ECOM_CLASS_LOG_ECOM_1) )
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <sbgEComMsgClassIsALog+0x16>
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d101      	bne.n	8008b7a <sbgEComMsgClassIsALog+0x1a>
	{
		return true;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <sbgEComMsgClassIsALog+0x1c>
	}
	else
	{
		return false;
 8008b7a:	2300      	movs	r3, #0
	}
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <sbgEComInit>:
//----------------------------------------------------------------------//
//- Public methods                                                     -//
//----------------------------------------------------------------------//

SbgErrorCode sbgEComInit(SbgEComHandle *pHandle, SbgInterface *pInterface)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	SbgErrorCode errorCode = SBG_NO_ERROR;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
	
	assert(pHandle);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <sbgEComInit+0x20>
 8008b9c:	4b19      	ldr	r3, [pc, #100]	; (8008c04 <sbgEComInit+0x7c>)
 8008b9e:	4a1a      	ldr	r2, [pc, #104]	; (8008c08 <sbgEComInit+0x80>)
 8008ba0:	210d      	movs	r1, #13
 8008ba2:	481a      	ldr	r0, [pc, #104]	; (8008c0c <sbgEComInit+0x84>)
 8008ba4:	f000 f954 	bl	8008e50 <__assert_func>
	assert(pInterface);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d105      	bne.n	8008bba <sbgEComInit+0x32>
 8008bae:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <sbgEComInit+0x88>)
 8008bb0:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <sbgEComInit+0x80>)
 8008bb2:	210e      	movs	r1, #14
 8008bb4:	4815      	ldr	r0, [pc, #84]	; (8008c0c <sbgEComInit+0x84>)
 8008bb6:	f000 f94b 	bl	8008e50 <__assert_func>
	
	//
	// Initialize the sbgECom handle
	//
	pHandle->pReceiveLogCallback	= NULL;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6213      	str	r3, [r2, #32]
	pHandle->pUserArg				= NULL;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6253      	str	r3, [r2, #36]	; 0x24

	//
	// Initialize the default number of trials and time out
	//
	pHandle->numTrials			= 3;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2303      	movs	r3, #3
 8008bdc:	6293      	str	r3, [r2, #40]	; 0x28
	pHandle->cmdDefaultTimeOut	= SBG_ECOM_DEFAULT_CMD_TIME_OUT;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be4:	461a      	mov	r2, r3
 8008be6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008bea:	62d3      	str	r3, [r2, #44]	; 0x2c

	//
	// Initialize the protocol 
	//
	errorCode = sbgEComProtocolInit(&pHandle->protocolHandle, pInterface);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fe69 	bl	80088c8 <sbgEComProtocolInit>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73fb      	strb	r3, [r7, #15]
	
	return errorCode;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	0800c18c 	.word	0x0800c18c
 8008c08:	0800de6c 	.word	0x0800de6c
 8008c0c:	0800c194 	.word	0x0800c194
 8008c10:	0800c1b4 	.word	0x0800c1b4

08008c14 <sbgEComHandleOneLog>:
	
	return errorCode;
}

SbgErrorCode sbgEComHandleOneLog(SbgEComHandle *pHandle)
{
 8008c14:	b5b0      	push	{r4, r5, r7, lr}
 8008c16:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af04      	add	r7, sp, #16
 8008c1e:	f107 0310 	add.w	r3, r7, #16
 8008c22:	f843 0c0c 	str.w	r0, [r3, #-12]
	SbgErrorCode		errorCode = SBG_NO_ERROR;
 8008c26:	2300      	movs	r3, #0
 8008c28:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008c2c:	f102 020f 	add.w	r2, r2, #15
 8008c30:	7013      	strb	r3, [r2, #0]
	uint8_t				receivedMsg;
	uint8_t				receivedMsgClass;
	size_t				payloadSize;
	uint8_t				payloadData[SBG_ECOM_MAX_PAYLOAD_SIZE];

	assert(pHandle);
 8008c32:	f107 0310 	add.w	r3, r7, #16
 8008c36:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d105      	bne.n	8008c4a <sbgEComHandleOneLog+0x36>
 8008c3e:	4b6b      	ldr	r3, [pc, #428]	; (8008dec <sbgEComHandleOneLog+0x1d8>)
 8008c40:	4a6b      	ldr	r2, [pc, #428]	; (8008df0 <sbgEComHandleOneLog+0x1dc>)
 8008c42:	213b      	movs	r1, #59	; 0x3b
 8008c44:	486b      	ldr	r0, [pc, #428]	; (8008df4 <sbgEComHandleOneLog+0x1e0>)
 8008c46:	f000 f903 	bl	8008e50 <__assert_func>

	//
	// Try to read a received frame
	//
	errorCode = sbgEComProtocolReceive(&pHandle->protocolHandle, &receivedMsgClass, &receivedMsg, payloadData, &payloadSize, sizeof(payloadData));
 8008c4a:	f107 0310 	add.w	r3, r7, #16
 8008c4e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8008c52:	f107 0010 	add.w	r0, r7, #16
 8008c56:	3808      	subs	r0, #8
 8008c58:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8008c5c:	f102 0210 	add.w	r2, r2, #16
 8008c60:	3a09      	subs	r2, #9
 8008c62:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8008c66:	f101 0110 	add.w	r1, r1, #16
 8008c6a:	390a      	subs	r1, #10
 8008c6c:	f640 73f6 	movw	r3, #4086	; 0xff6
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008c76:	f103 0310 	add.w	r3, r3, #16
 8008c7a:	3b10      	subs	r3, #16
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4620      	mov	r0, r4
 8008c82:	f7ff fe5f 	bl	8008944 <sbgEComProtocolReceive>
 8008c86:	4603      	mov	r3, r0
 8008c88:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008c8c:	f102 020f 	add.w	r2, r2, #15
 8008c90:	7013      	strb	r3, [r2, #0]

	//
	// Test if we have received a valid frame
	//
	if (errorCode == SBG_NO_ERROR)
 8008c92:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008c96:	f103 030f 	add.w	r3, r3, #15
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f040 8082 	bne.w	8008da6 <sbgEComHandleOneLog+0x192>
	{
		//
		// Test if the received frame is a binary log
		//
		if (sbgEComMsgClassIsALog((SbgEComClass)receivedMsgClass))
 8008ca2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008ca6:	f103 0310 	add.w	r3, r3, #16
 8008caa:	f813 3c0a 	ldrb.w	r3, [r3, #-10]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff ff56 	bl	8008b60 <sbgEComMsgClassIsALog>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 808c 	beq.w	8008dd4 <sbgEComHandleOneLog+0x1c0>
		{
			//
			// The received frame is a binary log one
			//
			errorCode = sbgEComBinaryLogParse((SbgEComClass)receivedMsgClass, (SbgEComMsgId)receivedMsg, payloadData, payloadSize, &logData);
 8008cbc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008cc0:	f103 0310 	add.w	r3, r3, #16
 8008cc4:	f813 0c0a 	ldrb.w	r0, [r3, #-10]
 8008cc8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008ccc:	f103 0310 	add.w	r3, r3, #16
 8008cd0:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8008cd4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008cd8:	f103 0310 	add.w	r3, r3, #16
 8008cdc:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8008ce0:	f107 0210 	add.w	r2, r7, #16
 8008ce4:	3a08      	subs	r2, #8
 8008ce6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008cea:	f103 0310 	add.w	r3, r3, #16
 8008cee:	3b08      	subs	r3, #8
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	f7fe fa8a 	bl	800720c <sbgEComBinaryLogParse>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008cfe:	f102 020f 	add.w	r2, r2, #15
 8008d02:	7013      	strb	r3, [r2, #0]

			//
			// Test if the incoming log has been parsed successfully
			//
			if (errorCode == SBG_NO_ERROR)
 8008d04:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008d08:	f103 030f 	add.w	r3, r3, #15
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d160      	bne.n	8008dd4 <sbgEComHandleOneLog+0x1c0>
			{
				//
				// Test if we have a valid callback to handle received logs
				//
				if (pHandle->pReceiveLogCallback)
 8008d12:	f107 0310 	add.w	r3, r7, #16
 8008d16:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d02b      	beq.n	8008d7c <sbgEComHandleOneLog+0x168>
				{
					//
					// Call the binary log callback using the new method
					//
					errorCode = pHandle->pReceiveLogCallback(pHandle, (SbgEComClass)receivedMsgClass, receivedMsg, &logData, pHandle->pUserArg);
 8008d24:	f107 0310 	add.w	r3, r7, #16
 8008d28:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d30:	6a1c      	ldr	r4, [r3, #32]
 8008d32:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008d36:	f103 0310 	add.w	r3, r3, #16
 8008d3a:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8008d3e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008d42:	f103 0310 	add.w	r3, r3, #16
 8008d46:	f813 0c09 	ldrb.w	r0, [r3, #-9]
 8008d4a:	f107 0310 	add.w	r3, r7, #16
 8008d4e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d58:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008d5c:	f103 0310 	add.w	r3, r3, #16
 8008d60:	3b08      	subs	r3, #8
 8008d62:	f107 0510 	add.w	r5, r7, #16
 8008d66:	9200      	str	r2, [sp, #0]
 8008d68:	4602      	mov	r2, r0
 8008d6a:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8008d6e:	47a0      	blx	r4
 8008d70:	4603      	mov	r3, r0
 8008d72:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8008d76:	f102 020f 	add.w	r2, r2, #15
 8008d7a:	7013      	strb	r3, [r2, #0]
				}

				//
				// Clean up resources allocated during parsing, if any.
				//
				sbgEComBinaryLogCleanup(&logData, (SbgEComClass)receivedMsgClass, (SbgEComMsgId)receivedMsg);
 8008d7c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008d80:	f103 0310 	add.w	r3, r3, #16
 8008d84:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8008d88:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008d8c:	f103 0310 	add.w	r3, r3, #16
 8008d90:	f813 2c09 	ldrb.w	r2, [r3, #-9]
 8008d94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8008d98:	f103 0310 	add.w	r3, r3, #16
 8008d9c:	3b08      	subs	r3, #8
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fc08 	bl	80075b4 <sbgEComBinaryLogCleanup>
 8008da4:	e016      	b.n	8008dd4 <sbgEComHandleOneLog+0x1c0>
			//
			// We have received a command, it shouldn't happen
			//
		}
	}
	else if (errorCode != SBG_NOT_READY)
 8008da6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008daa:	f103 030f 	add.w	r3, r3, #15
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b0a      	cmp	r3, #10
 8008db2:	d00f      	beq.n	8008dd4 <sbgEComHandleOneLog+0x1c0>
	{
		//
		// We have received an invalid frame
		//
		SBG_LOG_WARNING(errorCode, "Invalid frame received");
 8008db4:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <sbgEComHandleOneLog+0x1e4>)
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008dbc:	f103 030f 	add.w	r3, r3, #15
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <sbgEComHandleOneLog+0x1e8>)
 8008dca:	2279      	movs	r2, #121	; 0x79
 8008dcc:	490c      	ldr	r1, [pc, #48]	; (8008e00 <sbgEComHandleOneLog+0x1ec>)
 8008dce:	4809      	ldr	r0, [pc, #36]	; (8008df4 <sbgEComHandleOneLog+0x1e0>)
 8008dd0:	f7f9 ffa2 	bl	8002d18 <sbgPlatformDebugLogMsg>
	}
	
	return errorCode;
 8008dd4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8008dd8:	f103 030f 	add.w	r3, r3, #15
 8008ddc:	781b      	ldrb	r3, [r3, #0]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bdb0      	pop	{r4, r5, r7, pc}
 8008dea:	bf00      	nop
 8008dec:	0800c18c 	.word	0x0800c18c
 8008df0:	0800de78 	.word	0x0800de78
 8008df4:	0800c194 	.word	0x0800c194
 8008df8:	0800c1c8 	.word	0x0800c1c8
 8008dfc:	0800c1c0 	.word	0x0800c1c0
 8008e00:	0800de8c 	.word	0x0800de8c

08008e04 <sbgEComSetReceiveLogCallback>:

	return errorCode;
}

void sbgEComSetReceiveLogCallback(SbgEComHandle *pHandle, SbgEComReceiveLogFunc pReceiveLogCallback, void *pUserArg)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
	assert(pHandle);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d105      	bne.n	8008e22 <sbgEComSetReceiveLogCallback+0x1e>
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <sbgEComSetReceiveLogCallback+0x40>)
 8008e18:	4a0b      	ldr	r2, [pc, #44]	; (8008e48 <sbgEComSetReceiveLogCallback+0x44>)
 8008e1a:	21a0      	movs	r1, #160	; 0xa0
 8008e1c:	480b      	ldr	r0, [pc, #44]	; (8008e4c <sbgEComSetReceiveLogCallback+0x48>)
 8008e1e:	f000 f817 	bl	8008e50 <__assert_func>

	//
	// Define the callback and the user argument
	//
	pHandle->pReceiveLogCallback	= pReceiveLogCallback;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	6213      	str	r3, [r2, #32]
	pHandle->pUserArg				= pUserArg;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e34:	461a      	mov	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	0800c18c 	.word	0x0800c18c
 8008e48:	0800dea0 	.word	0x0800dea0
 8008e4c:	0800c194 	.word	0x0800c194

08008e50 <__assert_func>:
 8008e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e52:	4614      	mov	r4, r2
 8008e54:	461a      	mov	r2, r3
 8008e56:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <__assert_func+0x2c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	68d8      	ldr	r0, [r3, #12]
 8008e5e:	b14c      	cbz	r4, 8008e74 <__assert_func+0x24>
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <__assert_func+0x30>)
 8008e62:	9100      	str	r1, [sp, #0]
 8008e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e68:	4906      	ldr	r1, [pc, #24]	; (8008e84 <__assert_func+0x34>)
 8008e6a:	462b      	mov	r3, r5
 8008e6c:	f000 f9ac 	bl	80091c8 <fiprintf>
 8008e70:	f000 ffdc 	bl	8009e2c <abort>
 8008e74:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <__assert_func+0x38>)
 8008e76:	461c      	mov	r4, r3
 8008e78:	e7f3      	b.n	8008e62 <__assert_func+0x12>
 8008e7a:	bf00      	nop
 8008e7c:	20000060 	.word	0x20000060
 8008e80:	0800debd 	.word	0x0800debd
 8008e84:	0800deca 	.word	0x0800deca
 8008e88:	0800def8 	.word	0x0800def8

08008e8c <__errno>:
 8008e8c:	4b01      	ldr	r3, [pc, #4]	; (8008e94 <__errno+0x8>)
 8008e8e:	6818      	ldr	r0, [r3, #0]
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20000060 	.word	0x20000060

08008e98 <__sflush_r>:
 8008e98:	898a      	ldrh	r2, [r1, #12]
 8008e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	0710      	lsls	r0, r2, #28
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	d458      	bmi.n	8008f58 <__sflush_r+0xc0>
 8008ea6:	684b      	ldr	r3, [r1, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dc05      	bgt.n	8008eb8 <__sflush_r+0x20>
 8008eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dc02      	bgt.n	8008eb8 <__sflush_r+0x20>
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eba:	2e00      	cmp	r6, #0
 8008ebc:	d0f9      	beq.n	8008eb2 <__sflush_r+0x1a>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ec4:	682f      	ldr	r7, [r5, #0]
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	d032      	beq.n	8008f30 <__sflush_r+0x98>
 8008eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	075a      	lsls	r2, r3, #29
 8008ed0:	d505      	bpl.n	8008ede <__sflush_r+0x46>
 8008ed2:	6863      	ldr	r3, [r4, #4]
 8008ed4:	1ac0      	subs	r0, r0, r3
 8008ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ed8:	b10b      	cbz	r3, 8008ede <__sflush_r+0x46>
 8008eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008edc:	1ac0      	subs	r0, r0, r3
 8008ede:	2300      	movs	r3, #0
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ee4:	6a21      	ldr	r1, [r4, #32]
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	47b0      	blx	r6
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	d106      	bne.n	8008efe <__sflush_r+0x66>
 8008ef0:	6829      	ldr	r1, [r5, #0]
 8008ef2:	291d      	cmp	r1, #29
 8008ef4:	d82c      	bhi.n	8008f50 <__sflush_r+0xb8>
 8008ef6:	4a2a      	ldr	r2, [pc, #168]	; (8008fa0 <__sflush_r+0x108>)
 8008ef8:	40ca      	lsrs	r2, r1
 8008efa:	07d6      	lsls	r6, r2, #31
 8008efc:	d528      	bpl.n	8008f50 <__sflush_r+0xb8>
 8008efe:	2200      	movs	r2, #0
 8008f00:	6062      	str	r2, [r4, #4]
 8008f02:	04d9      	lsls	r1, r3, #19
 8008f04:	6922      	ldr	r2, [r4, #16]
 8008f06:	6022      	str	r2, [r4, #0]
 8008f08:	d504      	bpl.n	8008f14 <__sflush_r+0x7c>
 8008f0a:	1c42      	adds	r2, r0, #1
 8008f0c:	d101      	bne.n	8008f12 <__sflush_r+0x7a>
 8008f0e:	682b      	ldr	r3, [r5, #0]
 8008f10:	b903      	cbnz	r3, 8008f14 <__sflush_r+0x7c>
 8008f12:	6560      	str	r0, [r4, #84]	; 0x54
 8008f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f16:	602f      	str	r7, [r5, #0]
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d0ca      	beq.n	8008eb2 <__sflush_r+0x1a>
 8008f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <__sflush_r+0x92>
 8008f24:	4628      	mov	r0, r5
 8008f26:	f000 fa4d 	bl	80093c4 <_free_r>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f2e:	e7c1      	b.n	8008eb4 <__sflush_r+0x1c>
 8008f30:	6a21      	ldr	r1, [r4, #32]
 8008f32:	2301      	movs	r3, #1
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b0      	blx	r6
 8008f38:	1c41      	adds	r1, r0, #1
 8008f3a:	d1c7      	bne.n	8008ecc <__sflush_r+0x34>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0c4      	beq.n	8008ecc <__sflush_r+0x34>
 8008f42:	2b1d      	cmp	r3, #29
 8008f44:	d001      	beq.n	8008f4a <__sflush_r+0xb2>
 8008f46:	2b16      	cmp	r3, #22
 8008f48:	d101      	bne.n	8008f4e <__sflush_r+0xb6>
 8008f4a:	602f      	str	r7, [r5, #0]
 8008f4c:	e7b1      	b.n	8008eb2 <__sflush_r+0x1a>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	e7ad      	b.n	8008eb4 <__sflush_r+0x1c>
 8008f58:	690f      	ldr	r7, [r1, #16]
 8008f5a:	2f00      	cmp	r7, #0
 8008f5c:	d0a9      	beq.n	8008eb2 <__sflush_r+0x1a>
 8008f5e:	0793      	lsls	r3, r2, #30
 8008f60:	680e      	ldr	r6, [r1, #0]
 8008f62:	bf08      	it	eq
 8008f64:	694b      	ldreq	r3, [r1, #20]
 8008f66:	600f      	str	r7, [r1, #0]
 8008f68:	bf18      	it	ne
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	eba6 0807 	sub.w	r8, r6, r7
 8008f70:	608b      	str	r3, [r1, #8]
 8008f72:	f1b8 0f00 	cmp.w	r8, #0
 8008f76:	dd9c      	ble.n	8008eb2 <__sflush_r+0x1a>
 8008f78:	6a21      	ldr	r1, [r4, #32]
 8008f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f7c:	4643      	mov	r3, r8
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b0      	blx	r6
 8008f84:	2800      	cmp	r0, #0
 8008f86:	dc06      	bgt.n	8008f96 <__sflush_r+0xfe>
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	e78e      	b.n	8008eb4 <__sflush_r+0x1c>
 8008f96:	4407      	add	r7, r0
 8008f98:	eba8 0800 	sub.w	r8, r8, r0
 8008f9c:	e7e9      	b.n	8008f72 <__sflush_r+0xda>
 8008f9e:	bf00      	nop
 8008fa0:	20400001 	.word	0x20400001

08008fa4 <_fflush_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	690b      	ldr	r3, [r1, #16]
 8008fa8:	4605      	mov	r5, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	b913      	cbnz	r3, 8008fb4 <_fflush_r+0x10>
 8008fae:	2500      	movs	r5, #0
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	b118      	cbz	r0, 8008fbe <_fflush_r+0x1a>
 8008fb6:	6983      	ldr	r3, [r0, #24]
 8008fb8:	b90b      	cbnz	r3, 8008fbe <_fflush_r+0x1a>
 8008fba:	f000 f887 	bl	80090cc <__sinit>
 8008fbe:	4b14      	ldr	r3, [pc, #80]	; (8009010 <_fflush_r+0x6c>)
 8008fc0:	429c      	cmp	r4, r3
 8008fc2:	d11b      	bne.n	8008ffc <_fflush_r+0x58>
 8008fc4:	686c      	ldr	r4, [r5, #4]
 8008fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0ef      	beq.n	8008fae <_fflush_r+0xa>
 8008fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fd0:	07d0      	lsls	r0, r2, #31
 8008fd2:	d404      	bmi.n	8008fde <_fflush_r+0x3a>
 8008fd4:	0599      	lsls	r1, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_fflush_r+0x3a>
 8008fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fda:	f000 f94c 	bl	8009276 <__retarget_lock_acquire_recursive>
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	f7ff ff59 	bl	8008e98 <__sflush_r>
 8008fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe8:	07da      	lsls	r2, r3, #31
 8008fea:	4605      	mov	r5, r0
 8008fec:	d4e0      	bmi.n	8008fb0 <_fflush_r+0xc>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	059b      	lsls	r3, r3, #22
 8008ff2:	d4dd      	bmi.n	8008fb0 <_fflush_r+0xc>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff6:	f000 f93f 	bl	8009278 <__retarget_lock_release_recursive>
 8008ffa:	e7d9      	b.n	8008fb0 <_fflush_r+0xc>
 8008ffc:	4b05      	ldr	r3, [pc, #20]	; (8009014 <_fflush_r+0x70>)
 8008ffe:	429c      	cmp	r4, r3
 8009000:	d101      	bne.n	8009006 <_fflush_r+0x62>
 8009002:	68ac      	ldr	r4, [r5, #8]
 8009004:	e7df      	b.n	8008fc6 <_fflush_r+0x22>
 8009006:	4b04      	ldr	r3, [pc, #16]	; (8009018 <_fflush_r+0x74>)
 8009008:	429c      	cmp	r4, r3
 800900a:	bf08      	it	eq
 800900c:	68ec      	ldreq	r4, [r5, #12]
 800900e:	e7da      	b.n	8008fc6 <_fflush_r+0x22>
 8009010:	0800df1c 	.word	0x0800df1c
 8009014:	0800df3c 	.word	0x0800df3c
 8009018:	0800defc 	.word	0x0800defc

0800901c <std>:
 800901c:	2300      	movs	r3, #0
 800901e:	b510      	push	{r4, lr}
 8009020:	4604      	mov	r4, r0
 8009022:	e9c0 3300 	strd	r3, r3, [r0]
 8009026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800902a:	6083      	str	r3, [r0, #8]
 800902c:	8181      	strh	r1, [r0, #12]
 800902e:	6643      	str	r3, [r0, #100]	; 0x64
 8009030:	81c2      	strh	r2, [r0, #14]
 8009032:	6183      	str	r3, [r0, #24]
 8009034:	4619      	mov	r1, r3
 8009036:	2208      	movs	r2, #8
 8009038:	305c      	adds	r0, #92	; 0x5c
 800903a:	f000 f9bb 	bl	80093b4 <memset>
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <std+0x38>)
 8009040:	6263      	str	r3, [r4, #36]	; 0x24
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x3c>)
 8009044:	62a3      	str	r3, [r4, #40]	; 0x28
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <std+0x40>)
 8009048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <std+0x44>)
 800904c:	6224      	str	r4, [r4, #32]
 800904e:	6323      	str	r3, [r4, #48]	; 0x30
 8009050:	bd10      	pop	{r4, pc}
 8009052:	bf00      	nop
 8009054:	08009b81 	.word	0x08009b81
 8009058:	08009ba3 	.word	0x08009ba3
 800905c:	08009bdb 	.word	0x08009bdb
 8009060:	08009bff 	.word	0x08009bff

08009064 <_cleanup_r>:
 8009064:	4901      	ldr	r1, [pc, #4]	; (800906c <_cleanup_r+0x8>)
 8009066:	f000 b8c1 	b.w	80091ec <_fwalk_reent>
 800906a:	bf00      	nop
 800906c:	08008fa5 	.word	0x08008fa5

08009070 <__sfmoreglue>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	2268      	movs	r2, #104	; 0x68
 8009074:	1e4d      	subs	r5, r1, #1
 8009076:	4355      	muls	r5, r2
 8009078:	460e      	mov	r6, r1
 800907a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800907e:	f000 fa0d 	bl	800949c <_malloc_r>
 8009082:	4604      	mov	r4, r0
 8009084:	b140      	cbz	r0, 8009098 <__sfmoreglue+0x28>
 8009086:	2100      	movs	r1, #0
 8009088:	e9c0 1600 	strd	r1, r6, [r0]
 800908c:	300c      	adds	r0, #12
 800908e:	60a0      	str	r0, [r4, #8]
 8009090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009094:	f000 f98e 	bl	80093b4 <memset>
 8009098:	4620      	mov	r0, r4
 800909a:	bd70      	pop	{r4, r5, r6, pc}

0800909c <__sfp_lock_acquire>:
 800909c:	4801      	ldr	r0, [pc, #4]	; (80090a4 <__sfp_lock_acquire+0x8>)
 800909e:	f000 b8ea 	b.w	8009276 <__retarget_lock_acquire_recursive>
 80090a2:	bf00      	nop
 80090a4:	200001f5 	.word	0x200001f5

080090a8 <__sfp_lock_release>:
 80090a8:	4801      	ldr	r0, [pc, #4]	; (80090b0 <__sfp_lock_release+0x8>)
 80090aa:	f000 b8e5 	b.w	8009278 <__retarget_lock_release_recursive>
 80090ae:	bf00      	nop
 80090b0:	200001f5 	.word	0x200001f5

080090b4 <__sinit_lock_acquire>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__sinit_lock_acquire+0x8>)
 80090b6:	f000 b8de 	b.w	8009276 <__retarget_lock_acquire_recursive>
 80090ba:	bf00      	nop
 80090bc:	200001f6 	.word	0x200001f6

080090c0 <__sinit_lock_release>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__sinit_lock_release+0x8>)
 80090c2:	f000 b8d9 	b.w	8009278 <__retarget_lock_release_recursive>
 80090c6:	bf00      	nop
 80090c8:	200001f6 	.word	0x200001f6

080090cc <__sinit>:
 80090cc:	b510      	push	{r4, lr}
 80090ce:	4604      	mov	r4, r0
 80090d0:	f7ff fff0 	bl	80090b4 <__sinit_lock_acquire>
 80090d4:	69a3      	ldr	r3, [r4, #24]
 80090d6:	b11b      	cbz	r3, 80090e0 <__sinit+0x14>
 80090d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090dc:	f7ff bff0 	b.w	80090c0 <__sinit_lock_release>
 80090e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090e4:	6523      	str	r3, [r4, #80]	; 0x50
 80090e6:	4b13      	ldr	r3, [pc, #76]	; (8009134 <__sinit+0x68>)
 80090e8:	4a13      	ldr	r2, [pc, #76]	; (8009138 <__sinit+0x6c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80090ee:	42a3      	cmp	r3, r4
 80090f0:	bf04      	itt	eq
 80090f2:	2301      	moveq	r3, #1
 80090f4:	61a3      	streq	r3, [r4, #24]
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f820 	bl	800913c <__sfp>
 80090fc:	6060      	str	r0, [r4, #4]
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f81c 	bl	800913c <__sfp>
 8009104:	60a0      	str	r0, [r4, #8]
 8009106:	4620      	mov	r0, r4
 8009108:	f000 f818 	bl	800913c <__sfp>
 800910c:	2200      	movs	r2, #0
 800910e:	60e0      	str	r0, [r4, #12]
 8009110:	2104      	movs	r1, #4
 8009112:	6860      	ldr	r0, [r4, #4]
 8009114:	f7ff ff82 	bl	800901c <std>
 8009118:	68a0      	ldr	r0, [r4, #8]
 800911a:	2201      	movs	r2, #1
 800911c:	2109      	movs	r1, #9
 800911e:	f7ff ff7d 	bl	800901c <std>
 8009122:	68e0      	ldr	r0, [r4, #12]
 8009124:	2202      	movs	r2, #2
 8009126:	2112      	movs	r1, #18
 8009128:	f7ff ff78 	bl	800901c <std>
 800912c:	2301      	movs	r3, #1
 800912e:	61a3      	str	r3, [r4, #24]
 8009130:	e7d2      	b.n	80090d8 <__sinit+0xc>
 8009132:	bf00      	nop
 8009134:	0800df5c 	.word	0x0800df5c
 8009138:	08009065 	.word	0x08009065

0800913c <__sfp>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	4607      	mov	r7, r0
 8009140:	f7ff ffac 	bl	800909c <__sfp_lock_acquire>
 8009144:	4b1e      	ldr	r3, [pc, #120]	; (80091c0 <__sfp+0x84>)
 8009146:	681e      	ldr	r6, [r3, #0]
 8009148:	69b3      	ldr	r3, [r6, #24]
 800914a:	b913      	cbnz	r3, 8009152 <__sfp+0x16>
 800914c:	4630      	mov	r0, r6
 800914e:	f7ff ffbd 	bl	80090cc <__sinit>
 8009152:	3648      	adds	r6, #72	; 0x48
 8009154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009158:	3b01      	subs	r3, #1
 800915a:	d503      	bpl.n	8009164 <__sfp+0x28>
 800915c:	6833      	ldr	r3, [r6, #0]
 800915e:	b30b      	cbz	r3, 80091a4 <__sfp+0x68>
 8009160:	6836      	ldr	r6, [r6, #0]
 8009162:	e7f7      	b.n	8009154 <__sfp+0x18>
 8009164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009168:	b9d5      	cbnz	r5, 80091a0 <__sfp+0x64>
 800916a:	4b16      	ldr	r3, [pc, #88]	; (80091c4 <__sfp+0x88>)
 800916c:	60e3      	str	r3, [r4, #12]
 800916e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009172:	6665      	str	r5, [r4, #100]	; 0x64
 8009174:	f000 f87e 	bl	8009274 <__retarget_lock_init_recursive>
 8009178:	f7ff ff96 	bl	80090a8 <__sfp_lock_release>
 800917c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009184:	6025      	str	r5, [r4, #0]
 8009186:	61a5      	str	r5, [r4, #24]
 8009188:	2208      	movs	r2, #8
 800918a:	4629      	mov	r1, r5
 800918c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009190:	f000 f910 	bl	80093b4 <memset>
 8009194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800919c:	4620      	mov	r0, r4
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a0:	3468      	adds	r4, #104	; 0x68
 80091a2:	e7d9      	b.n	8009158 <__sfp+0x1c>
 80091a4:	2104      	movs	r1, #4
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7ff ff62 	bl	8009070 <__sfmoreglue>
 80091ac:	4604      	mov	r4, r0
 80091ae:	6030      	str	r0, [r6, #0]
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d1d5      	bne.n	8009160 <__sfp+0x24>
 80091b4:	f7ff ff78 	bl	80090a8 <__sfp_lock_release>
 80091b8:	230c      	movs	r3, #12
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	e7ee      	b.n	800919c <__sfp+0x60>
 80091be:	bf00      	nop
 80091c0:	0800df5c 	.word	0x0800df5c
 80091c4:	ffff0001 	.word	0xffff0001

080091c8 <fiprintf>:
 80091c8:	b40e      	push	{r1, r2, r3}
 80091ca:	b503      	push	{r0, r1, lr}
 80091cc:	4601      	mov	r1, r0
 80091ce:	ab03      	add	r3, sp, #12
 80091d0:	4805      	ldr	r0, [pc, #20]	; (80091e8 <fiprintf+0x20>)
 80091d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d6:	6800      	ldr	r0, [r0, #0]
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	f000 f9fd 	bl	80095d8 <_vfiprintf_r>
 80091de:	b002      	add	sp, #8
 80091e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e4:	b003      	add	sp, #12
 80091e6:	4770      	bx	lr
 80091e8:	20000060 	.word	0x20000060

080091ec <_fwalk_reent>:
 80091ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f0:	4606      	mov	r6, r0
 80091f2:	4688      	mov	r8, r1
 80091f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091f8:	2700      	movs	r7, #0
 80091fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091fe:	f1b9 0901 	subs.w	r9, r9, #1
 8009202:	d505      	bpl.n	8009210 <_fwalk_reent+0x24>
 8009204:	6824      	ldr	r4, [r4, #0]
 8009206:	2c00      	cmp	r4, #0
 8009208:	d1f7      	bne.n	80091fa <_fwalk_reent+0xe>
 800920a:	4638      	mov	r0, r7
 800920c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009210:	89ab      	ldrh	r3, [r5, #12]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d907      	bls.n	8009226 <_fwalk_reent+0x3a>
 8009216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800921a:	3301      	adds	r3, #1
 800921c:	d003      	beq.n	8009226 <_fwalk_reent+0x3a>
 800921e:	4629      	mov	r1, r5
 8009220:	4630      	mov	r0, r6
 8009222:	47c0      	blx	r8
 8009224:	4307      	orrs	r7, r0
 8009226:	3568      	adds	r5, #104	; 0x68
 8009228:	e7e9      	b.n	80091fe <_fwalk_reent+0x12>
	...

0800922c <__libc_init_array>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	4d0d      	ldr	r5, [pc, #52]	; (8009264 <__libc_init_array+0x38>)
 8009230:	4c0d      	ldr	r4, [pc, #52]	; (8009268 <__libc_init_array+0x3c>)
 8009232:	1b64      	subs	r4, r4, r5
 8009234:	10a4      	asrs	r4, r4, #2
 8009236:	2600      	movs	r6, #0
 8009238:	42a6      	cmp	r6, r4
 800923a:	d109      	bne.n	8009250 <__libc_init_array+0x24>
 800923c:	4d0b      	ldr	r5, [pc, #44]	; (800926c <__libc_init_array+0x40>)
 800923e:	4c0c      	ldr	r4, [pc, #48]	; (8009270 <__libc_init_array+0x44>)
 8009240:	f001 f834 	bl	800a2ac <_init>
 8009244:	1b64      	subs	r4, r4, r5
 8009246:	10a4      	asrs	r4, r4, #2
 8009248:	2600      	movs	r6, #0
 800924a:	42a6      	cmp	r6, r4
 800924c:	d105      	bne.n	800925a <__libc_init_array+0x2e>
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	f855 3b04 	ldr.w	r3, [r5], #4
 8009254:	4798      	blx	r3
 8009256:	3601      	adds	r6, #1
 8009258:	e7ee      	b.n	8009238 <__libc_init_array+0xc>
 800925a:	f855 3b04 	ldr.w	r3, [r5], #4
 800925e:	4798      	blx	r3
 8009260:	3601      	adds	r6, #1
 8009262:	e7f2      	b.n	800924a <__libc_init_array+0x1e>
 8009264:	0800df94 	.word	0x0800df94
 8009268:	0800df94 	.word	0x0800df94
 800926c:	0800df94 	.word	0x0800df94
 8009270:	0800df98 	.word	0x0800df98

08009274 <__retarget_lock_init_recursive>:
 8009274:	4770      	bx	lr

08009276 <__retarget_lock_acquire_recursive>:
 8009276:	4770      	bx	lr

08009278 <__retarget_lock_release_recursive>:
 8009278:	4770      	bx	lr

0800927a <__swhatbuf_r>:
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	460e      	mov	r6, r1
 800927e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009282:	2900      	cmp	r1, #0
 8009284:	b096      	sub	sp, #88	; 0x58
 8009286:	4614      	mov	r4, r2
 8009288:	461d      	mov	r5, r3
 800928a:	da08      	bge.n	800929e <__swhatbuf_r+0x24>
 800928c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	602a      	str	r2, [r5, #0]
 8009294:	061a      	lsls	r2, r3, #24
 8009296:	d410      	bmi.n	80092ba <__swhatbuf_r+0x40>
 8009298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929c:	e00e      	b.n	80092bc <__swhatbuf_r+0x42>
 800929e:	466a      	mov	r2, sp
 80092a0:	f000 fddc 	bl	8009e5c <_fstat_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	dbf1      	blt.n	800928c <__swhatbuf_r+0x12>
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b2:	425a      	negs	r2, r3
 80092b4:	415a      	adcs	r2, r3
 80092b6:	602a      	str	r2, [r5, #0]
 80092b8:	e7ee      	b.n	8009298 <__swhatbuf_r+0x1e>
 80092ba:	2340      	movs	r3, #64	; 0x40
 80092bc:	2000      	movs	r0, #0
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	b016      	add	sp, #88	; 0x58
 80092c2:	bd70      	pop	{r4, r5, r6, pc}

080092c4 <__smakebuf_r>:
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c8:	079d      	lsls	r5, r3, #30
 80092ca:	4606      	mov	r6, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d507      	bpl.n	80092e0 <__smakebuf_r+0x1c>
 80092d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	2301      	movs	r3, #1
 80092da:	6163      	str	r3, [r4, #20]
 80092dc:	b002      	add	sp, #8
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	ab01      	add	r3, sp, #4
 80092e2:	466a      	mov	r2, sp
 80092e4:	f7ff ffc9 	bl	800927a <__swhatbuf_r>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	4605      	mov	r5, r0
 80092ec:	4630      	mov	r0, r6
 80092ee:	f000 f8d5 	bl	800949c <_malloc_r>
 80092f2:	b948      	cbnz	r0, 8009308 <__smakebuf_r+0x44>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d4ef      	bmi.n	80092dc <__smakebuf_r+0x18>
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7e3      	b.n	80092d0 <__smakebuf_r+0xc>
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <__smakebuf_r+0x7c>)
 800930a:	62b3      	str	r3, [r6, #40]	; 0x28
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	6163      	str	r3, [r4, #20]
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	6120      	str	r0, [r4, #16]
 800931e:	b15b      	cbz	r3, 8009338 <__smakebuf_r+0x74>
 8009320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009324:	4630      	mov	r0, r6
 8009326:	f000 fdab 	bl	8009e80 <_isatty_r>
 800932a:	b128      	cbz	r0, 8009338 <__smakebuf_r+0x74>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	89a0      	ldrh	r0, [r4, #12]
 800933a:	4305      	orrs	r5, r0
 800933c:	81a5      	strh	r5, [r4, #12]
 800933e:	e7cd      	b.n	80092dc <__smakebuf_r+0x18>
 8009340:	08009065 	.word	0x08009065

08009344 <malloc>:
 8009344:	4b02      	ldr	r3, [pc, #8]	; (8009350 <malloc+0xc>)
 8009346:	4601      	mov	r1, r0
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	f000 b8a7 	b.w	800949c <_malloc_r>
 800934e:	bf00      	nop
 8009350:	20000060 	.word	0x20000060

08009354 <free>:
 8009354:	4b02      	ldr	r3, [pc, #8]	; (8009360 <free+0xc>)
 8009356:	4601      	mov	r1, r0
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	f000 b833 	b.w	80093c4 <_free_r>
 800935e:	bf00      	nop
 8009360:	20000060 	.word	0x20000060

08009364 <memcpy>:
 8009364:	440a      	add	r2, r1
 8009366:	4291      	cmp	r1, r2
 8009368:	f100 33ff 	add.w	r3, r0, #4294967295
 800936c:	d100      	bne.n	8009370 <memcpy+0xc>
 800936e:	4770      	bx	lr
 8009370:	b510      	push	{r4, lr}
 8009372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800937a:	4291      	cmp	r1, r2
 800937c:	d1f9      	bne.n	8009372 <memcpy+0xe>
 800937e:	bd10      	pop	{r4, pc}

08009380 <memmove>:
 8009380:	4288      	cmp	r0, r1
 8009382:	b510      	push	{r4, lr}
 8009384:	eb01 0402 	add.w	r4, r1, r2
 8009388:	d902      	bls.n	8009390 <memmove+0x10>
 800938a:	4284      	cmp	r4, r0
 800938c:	4623      	mov	r3, r4
 800938e:	d807      	bhi.n	80093a0 <memmove+0x20>
 8009390:	1e43      	subs	r3, r0, #1
 8009392:	42a1      	cmp	r1, r4
 8009394:	d008      	beq.n	80093a8 <memmove+0x28>
 8009396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800939a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800939e:	e7f8      	b.n	8009392 <memmove+0x12>
 80093a0:	4402      	add	r2, r0
 80093a2:	4601      	mov	r1, r0
 80093a4:	428a      	cmp	r2, r1
 80093a6:	d100      	bne.n	80093aa <memmove+0x2a>
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093b2:	e7f7      	b.n	80093a4 <memmove+0x24>

080093b4 <memset>:
 80093b4:	4402      	add	r2, r0
 80093b6:	4603      	mov	r3, r0
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d100      	bne.n	80093be <memset+0xa>
 80093bc:	4770      	bx	lr
 80093be:	f803 1b01 	strb.w	r1, [r3], #1
 80093c2:	e7f9      	b.n	80093b8 <memset+0x4>

080093c4 <_free_r>:
 80093c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093c6:	2900      	cmp	r1, #0
 80093c8:	d044      	beq.n	8009454 <_free_r+0x90>
 80093ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ce:	9001      	str	r0, [sp, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f1a1 0404 	sub.w	r4, r1, #4
 80093d6:	bfb8      	it	lt
 80093d8:	18e4      	addlt	r4, r4, r3
 80093da:	f000 fd73 	bl	8009ec4 <__malloc_lock>
 80093de:	4a1e      	ldr	r2, [pc, #120]	; (8009458 <_free_r+0x94>)
 80093e0:	9801      	ldr	r0, [sp, #4]
 80093e2:	6813      	ldr	r3, [r2, #0]
 80093e4:	b933      	cbnz	r3, 80093f4 <_free_r+0x30>
 80093e6:	6063      	str	r3, [r4, #4]
 80093e8:	6014      	str	r4, [r2, #0]
 80093ea:	b003      	add	sp, #12
 80093ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093f0:	f000 bd6e 	b.w	8009ed0 <__malloc_unlock>
 80093f4:	42a3      	cmp	r3, r4
 80093f6:	d908      	bls.n	800940a <_free_r+0x46>
 80093f8:	6825      	ldr	r5, [r4, #0]
 80093fa:	1961      	adds	r1, r4, r5
 80093fc:	428b      	cmp	r3, r1
 80093fe:	bf01      	itttt	eq
 8009400:	6819      	ldreq	r1, [r3, #0]
 8009402:	685b      	ldreq	r3, [r3, #4]
 8009404:	1949      	addeq	r1, r1, r5
 8009406:	6021      	streq	r1, [r4, #0]
 8009408:	e7ed      	b.n	80093e6 <_free_r+0x22>
 800940a:	461a      	mov	r2, r3
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	b10b      	cbz	r3, 8009414 <_free_r+0x50>
 8009410:	42a3      	cmp	r3, r4
 8009412:	d9fa      	bls.n	800940a <_free_r+0x46>
 8009414:	6811      	ldr	r1, [r2, #0]
 8009416:	1855      	adds	r5, r2, r1
 8009418:	42a5      	cmp	r5, r4
 800941a:	d10b      	bne.n	8009434 <_free_r+0x70>
 800941c:	6824      	ldr	r4, [r4, #0]
 800941e:	4421      	add	r1, r4
 8009420:	1854      	adds	r4, r2, r1
 8009422:	42a3      	cmp	r3, r4
 8009424:	6011      	str	r1, [r2, #0]
 8009426:	d1e0      	bne.n	80093ea <_free_r+0x26>
 8009428:	681c      	ldr	r4, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	6053      	str	r3, [r2, #4]
 800942e:	4421      	add	r1, r4
 8009430:	6011      	str	r1, [r2, #0]
 8009432:	e7da      	b.n	80093ea <_free_r+0x26>
 8009434:	d902      	bls.n	800943c <_free_r+0x78>
 8009436:	230c      	movs	r3, #12
 8009438:	6003      	str	r3, [r0, #0]
 800943a:	e7d6      	b.n	80093ea <_free_r+0x26>
 800943c:	6825      	ldr	r5, [r4, #0]
 800943e:	1961      	adds	r1, r4, r5
 8009440:	428b      	cmp	r3, r1
 8009442:	bf04      	itt	eq
 8009444:	6819      	ldreq	r1, [r3, #0]
 8009446:	685b      	ldreq	r3, [r3, #4]
 8009448:	6063      	str	r3, [r4, #4]
 800944a:	bf04      	itt	eq
 800944c:	1949      	addeq	r1, r1, r5
 800944e:	6021      	streq	r1, [r4, #0]
 8009450:	6054      	str	r4, [r2, #4]
 8009452:	e7ca      	b.n	80093ea <_free_r+0x26>
 8009454:	b003      	add	sp, #12
 8009456:	bd30      	pop	{r4, r5, pc}
 8009458:	200001f8 	.word	0x200001f8

0800945c <sbrk_aligned>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4e0e      	ldr	r6, [pc, #56]	; (8009498 <sbrk_aligned+0x3c>)
 8009460:	460c      	mov	r4, r1
 8009462:	6831      	ldr	r1, [r6, #0]
 8009464:	4605      	mov	r5, r0
 8009466:	b911      	cbnz	r1, 800946e <sbrk_aligned+0x12>
 8009468:	f000 fb7a 	bl	8009b60 <_sbrk_r>
 800946c:	6030      	str	r0, [r6, #0]
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f000 fb75 	bl	8009b60 <_sbrk_r>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d00a      	beq.n	8009490 <sbrk_aligned+0x34>
 800947a:	1cc4      	adds	r4, r0, #3
 800947c:	f024 0403 	bic.w	r4, r4, #3
 8009480:	42a0      	cmp	r0, r4
 8009482:	d007      	beq.n	8009494 <sbrk_aligned+0x38>
 8009484:	1a21      	subs	r1, r4, r0
 8009486:	4628      	mov	r0, r5
 8009488:	f000 fb6a 	bl	8009b60 <_sbrk_r>
 800948c:	3001      	adds	r0, #1
 800948e:	d101      	bne.n	8009494 <sbrk_aligned+0x38>
 8009490:	f04f 34ff 	mov.w	r4, #4294967295
 8009494:	4620      	mov	r0, r4
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	200001fc 	.word	0x200001fc

0800949c <_malloc_r>:
 800949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a0:	1ccd      	adds	r5, r1, #3
 80094a2:	f025 0503 	bic.w	r5, r5, #3
 80094a6:	3508      	adds	r5, #8
 80094a8:	2d0c      	cmp	r5, #12
 80094aa:	bf38      	it	cc
 80094ac:	250c      	movcc	r5, #12
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	4607      	mov	r7, r0
 80094b2:	db01      	blt.n	80094b8 <_malloc_r+0x1c>
 80094b4:	42a9      	cmp	r1, r5
 80094b6:	d905      	bls.n	80094c4 <_malloc_r+0x28>
 80094b8:	230c      	movs	r3, #12
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	2600      	movs	r6, #0
 80094be:	4630      	mov	r0, r6
 80094c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c4:	4e2e      	ldr	r6, [pc, #184]	; (8009580 <_malloc_r+0xe4>)
 80094c6:	f000 fcfd 	bl	8009ec4 <__malloc_lock>
 80094ca:	6833      	ldr	r3, [r6, #0]
 80094cc:	461c      	mov	r4, r3
 80094ce:	bb34      	cbnz	r4, 800951e <_malloc_r+0x82>
 80094d0:	4629      	mov	r1, r5
 80094d2:	4638      	mov	r0, r7
 80094d4:	f7ff ffc2 	bl	800945c <sbrk_aligned>
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	4604      	mov	r4, r0
 80094dc:	d14d      	bne.n	800957a <_malloc_r+0xde>
 80094de:	6834      	ldr	r4, [r6, #0]
 80094e0:	4626      	mov	r6, r4
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	d140      	bne.n	8009568 <_malloc_r+0xcc>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	4631      	mov	r1, r6
 80094ea:	4638      	mov	r0, r7
 80094ec:	eb04 0803 	add.w	r8, r4, r3
 80094f0:	f000 fb36 	bl	8009b60 <_sbrk_r>
 80094f4:	4580      	cmp	r8, r0
 80094f6:	d13a      	bne.n	800956e <_malloc_r+0xd2>
 80094f8:	6821      	ldr	r1, [r4, #0]
 80094fa:	3503      	adds	r5, #3
 80094fc:	1a6d      	subs	r5, r5, r1
 80094fe:	f025 0503 	bic.w	r5, r5, #3
 8009502:	3508      	adds	r5, #8
 8009504:	2d0c      	cmp	r5, #12
 8009506:	bf38      	it	cc
 8009508:	250c      	movcc	r5, #12
 800950a:	4629      	mov	r1, r5
 800950c:	4638      	mov	r0, r7
 800950e:	f7ff ffa5 	bl	800945c <sbrk_aligned>
 8009512:	3001      	adds	r0, #1
 8009514:	d02b      	beq.n	800956e <_malloc_r+0xd2>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	442b      	add	r3, r5
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	e00e      	b.n	800953c <_malloc_r+0xa0>
 800951e:	6822      	ldr	r2, [r4, #0]
 8009520:	1b52      	subs	r2, r2, r5
 8009522:	d41e      	bmi.n	8009562 <_malloc_r+0xc6>
 8009524:	2a0b      	cmp	r2, #11
 8009526:	d916      	bls.n	8009556 <_malloc_r+0xba>
 8009528:	1961      	adds	r1, r4, r5
 800952a:	42a3      	cmp	r3, r4
 800952c:	6025      	str	r5, [r4, #0]
 800952e:	bf18      	it	ne
 8009530:	6059      	strne	r1, [r3, #4]
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	bf08      	it	eq
 8009536:	6031      	streq	r1, [r6, #0]
 8009538:	5162      	str	r2, [r4, r5]
 800953a:	604b      	str	r3, [r1, #4]
 800953c:	4638      	mov	r0, r7
 800953e:	f104 060b 	add.w	r6, r4, #11
 8009542:	f000 fcc5 	bl	8009ed0 <__malloc_unlock>
 8009546:	f026 0607 	bic.w	r6, r6, #7
 800954a:	1d23      	adds	r3, r4, #4
 800954c:	1af2      	subs	r2, r6, r3
 800954e:	d0b6      	beq.n	80094be <_malloc_r+0x22>
 8009550:	1b9b      	subs	r3, r3, r6
 8009552:	50a3      	str	r3, [r4, r2]
 8009554:	e7b3      	b.n	80094be <_malloc_r+0x22>
 8009556:	6862      	ldr	r2, [r4, #4]
 8009558:	42a3      	cmp	r3, r4
 800955a:	bf0c      	ite	eq
 800955c:	6032      	streq	r2, [r6, #0]
 800955e:	605a      	strne	r2, [r3, #4]
 8009560:	e7ec      	b.n	800953c <_malloc_r+0xa0>
 8009562:	4623      	mov	r3, r4
 8009564:	6864      	ldr	r4, [r4, #4]
 8009566:	e7b2      	b.n	80094ce <_malloc_r+0x32>
 8009568:	4634      	mov	r4, r6
 800956a:	6876      	ldr	r6, [r6, #4]
 800956c:	e7b9      	b.n	80094e2 <_malloc_r+0x46>
 800956e:	230c      	movs	r3, #12
 8009570:	603b      	str	r3, [r7, #0]
 8009572:	4638      	mov	r0, r7
 8009574:	f000 fcac 	bl	8009ed0 <__malloc_unlock>
 8009578:	e7a1      	b.n	80094be <_malloc_r+0x22>
 800957a:	6025      	str	r5, [r4, #0]
 800957c:	e7de      	b.n	800953c <_malloc_r+0xa0>
 800957e:	bf00      	nop
 8009580:	200001f8 	.word	0x200001f8

08009584 <__sfputc_r>:
 8009584:	6893      	ldr	r3, [r2, #8]
 8009586:	3b01      	subs	r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	b410      	push	{r4}
 800958c:	6093      	str	r3, [r2, #8]
 800958e:	da08      	bge.n	80095a2 <__sfputc_r+0x1e>
 8009590:	6994      	ldr	r4, [r2, #24]
 8009592:	42a3      	cmp	r3, r4
 8009594:	db01      	blt.n	800959a <__sfputc_r+0x16>
 8009596:	290a      	cmp	r1, #10
 8009598:	d103      	bne.n	80095a2 <__sfputc_r+0x1e>
 800959a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800959e:	f000 bb73 	b.w	8009c88 <__swbuf_r>
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	1c58      	adds	r0, r3, #1
 80095a6:	6010      	str	r0, [r2, #0]
 80095a8:	7019      	strb	r1, [r3, #0]
 80095aa:	4608      	mov	r0, r1
 80095ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <__sfputs_r>:
 80095b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b4:	4606      	mov	r6, r0
 80095b6:	460f      	mov	r7, r1
 80095b8:	4614      	mov	r4, r2
 80095ba:	18d5      	adds	r5, r2, r3
 80095bc:	42ac      	cmp	r4, r5
 80095be:	d101      	bne.n	80095c4 <__sfputs_r+0x12>
 80095c0:	2000      	movs	r0, #0
 80095c2:	e007      	b.n	80095d4 <__sfputs_r+0x22>
 80095c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c8:	463a      	mov	r2, r7
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff ffda 	bl	8009584 <__sfputc_r>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d1f3      	bne.n	80095bc <__sfputs_r+0xa>
 80095d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095d8 <_vfiprintf_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	460d      	mov	r5, r1
 80095de:	b09d      	sub	sp, #116	; 0x74
 80095e0:	4614      	mov	r4, r2
 80095e2:	4698      	mov	r8, r3
 80095e4:	4606      	mov	r6, r0
 80095e6:	b118      	cbz	r0, 80095f0 <_vfiprintf_r+0x18>
 80095e8:	6983      	ldr	r3, [r0, #24]
 80095ea:	b90b      	cbnz	r3, 80095f0 <_vfiprintf_r+0x18>
 80095ec:	f7ff fd6e 	bl	80090cc <__sinit>
 80095f0:	4b89      	ldr	r3, [pc, #548]	; (8009818 <_vfiprintf_r+0x240>)
 80095f2:	429d      	cmp	r5, r3
 80095f4:	d11b      	bne.n	800962e <_vfiprintf_r+0x56>
 80095f6:	6875      	ldr	r5, [r6, #4]
 80095f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095fa:	07d9      	lsls	r1, r3, #31
 80095fc:	d405      	bmi.n	800960a <_vfiprintf_r+0x32>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	059a      	lsls	r2, r3, #22
 8009602:	d402      	bmi.n	800960a <_vfiprintf_r+0x32>
 8009604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009606:	f7ff fe36 	bl	8009276 <__retarget_lock_acquire_recursive>
 800960a:	89ab      	ldrh	r3, [r5, #12]
 800960c:	071b      	lsls	r3, r3, #28
 800960e:	d501      	bpl.n	8009614 <_vfiprintf_r+0x3c>
 8009610:	692b      	ldr	r3, [r5, #16]
 8009612:	b9eb      	cbnz	r3, 8009650 <_vfiprintf_r+0x78>
 8009614:	4629      	mov	r1, r5
 8009616:	4630      	mov	r0, r6
 8009618:	f000 fb9a 	bl	8009d50 <__swsetup_r>
 800961c:	b1c0      	cbz	r0, 8009650 <_vfiprintf_r+0x78>
 800961e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009620:	07dc      	lsls	r4, r3, #31
 8009622:	d50e      	bpl.n	8009642 <_vfiprintf_r+0x6a>
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	b01d      	add	sp, #116	; 0x74
 800962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962e:	4b7b      	ldr	r3, [pc, #492]	; (800981c <_vfiprintf_r+0x244>)
 8009630:	429d      	cmp	r5, r3
 8009632:	d101      	bne.n	8009638 <_vfiprintf_r+0x60>
 8009634:	68b5      	ldr	r5, [r6, #8]
 8009636:	e7df      	b.n	80095f8 <_vfiprintf_r+0x20>
 8009638:	4b79      	ldr	r3, [pc, #484]	; (8009820 <_vfiprintf_r+0x248>)
 800963a:	429d      	cmp	r5, r3
 800963c:	bf08      	it	eq
 800963e:	68f5      	ldreq	r5, [r6, #12]
 8009640:	e7da      	b.n	80095f8 <_vfiprintf_r+0x20>
 8009642:	89ab      	ldrh	r3, [r5, #12]
 8009644:	0598      	lsls	r0, r3, #22
 8009646:	d4ed      	bmi.n	8009624 <_vfiprintf_r+0x4c>
 8009648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800964a:	f7ff fe15 	bl	8009278 <__retarget_lock_release_recursive>
 800964e:	e7e9      	b.n	8009624 <_vfiprintf_r+0x4c>
 8009650:	2300      	movs	r3, #0
 8009652:	9309      	str	r3, [sp, #36]	; 0x24
 8009654:	2320      	movs	r3, #32
 8009656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800965a:	f8cd 800c 	str.w	r8, [sp, #12]
 800965e:	2330      	movs	r3, #48	; 0x30
 8009660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009824 <_vfiprintf_r+0x24c>
 8009664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009668:	f04f 0901 	mov.w	r9, #1
 800966c:	4623      	mov	r3, r4
 800966e:	469a      	mov	sl, r3
 8009670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009674:	b10a      	cbz	r2, 800967a <_vfiprintf_r+0xa2>
 8009676:	2a25      	cmp	r2, #37	; 0x25
 8009678:	d1f9      	bne.n	800966e <_vfiprintf_r+0x96>
 800967a:	ebba 0b04 	subs.w	fp, sl, r4
 800967e:	d00b      	beq.n	8009698 <_vfiprintf_r+0xc0>
 8009680:	465b      	mov	r3, fp
 8009682:	4622      	mov	r2, r4
 8009684:	4629      	mov	r1, r5
 8009686:	4630      	mov	r0, r6
 8009688:	f7ff ff93 	bl	80095b2 <__sfputs_r>
 800968c:	3001      	adds	r0, #1
 800968e:	f000 80aa 	beq.w	80097e6 <_vfiprintf_r+0x20e>
 8009692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009694:	445a      	add	r2, fp
 8009696:	9209      	str	r2, [sp, #36]	; 0x24
 8009698:	f89a 3000 	ldrb.w	r3, [sl]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 80a2 	beq.w	80097e6 <_vfiprintf_r+0x20e>
 80096a2:	2300      	movs	r3, #0
 80096a4:	f04f 32ff 	mov.w	r2, #4294967295
 80096a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ac:	f10a 0a01 	add.w	sl, sl, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	9307      	str	r3, [sp, #28]
 80096b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096b8:	931a      	str	r3, [sp, #104]	; 0x68
 80096ba:	4654      	mov	r4, sl
 80096bc:	2205      	movs	r2, #5
 80096be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c2:	4858      	ldr	r0, [pc, #352]	; (8009824 <_vfiprintf_r+0x24c>)
 80096c4:	f7f6 fd8c 	bl	80001e0 <memchr>
 80096c8:	9a04      	ldr	r2, [sp, #16]
 80096ca:	b9d8      	cbnz	r0, 8009704 <_vfiprintf_r+0x12c>
 80096cc:	06d1      	lsls	r1, r2, #27
 80096ce:	bf44      	itt	mi
 80096d0:	2320      	movmi	r3, #32
 80096d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d6:	0713      	lsls	r3, r2, #28
 80096d8:	bf44      	itt	mi
 80096da:	232b      	movmi	r3, #43	; 0x2b
 80096dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e0:	f89a 3000 	ldrb.w	r3, [sl]
 80096e4:	2b2a      	cmp	r3, #42	; 0x2a
 80096e6:	d015      	beq.n	8009714 <_vfiprintf_r+0x13c>
 80096e8:	9a07      	ldr	r2, [sp, #28]
 80096ea:	4654      	mov	r4, sl
 80096ec:	2000      	movs	r0, #0
 80096ee:	f04f 0c0a 	mov.w	ip, #10
 80096f2:	4621      	mov	r1, r4
 80096f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096f8:	3b30      	subs	r3, #48	; 0x30
 80096fa:	2b09      	cmp	r3, #9
 80096fc:	d94e      	bls.n	800979c <_vfiprintf_r+0x1c4>
 80096fe:	b1b0      	cbz	r0, 800972e <_vfiprintf_r+0x156>
 8009700:	9207      	str	r2, [sp, #28]
 8009702:	e014      	b.n	800972e <_vfiprintf_r+0x156>
 8009704:	eba0 0308 	sub.w	r3, r0, r8
 8009708:	fa09 f303 	lsl.w	r3, r9, r3
 800970c:	4313      	orrs	r3, r2
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	46a2      	mov	sl, r4
 8009712:	e7d2      	b.n	80096ba <_vfiprintf_r+0xe2>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	1d19      	adds	r1, r3, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	9103      	str	r1, [sp, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	bfbb      	ittet	lt
 8009720:	425b      	neglt	r3, r3
 8009722:	f042 0202 	orrlt.w	r2, r2, #2
 8009726:	9307      	strge	r3, [sp, #28]
 8009728:	9307      	strlt	r3, [sp, #28]
 800972a:	bfb8      	it	lt
 800972c:	9204      	strlt	r2, [sp, #16]
 800972e:	7823      	ldrb	r3, [r4, #0]
 8009730:	2b2e      	cmp	r3, #46	; 0x2e
 8009732:	d10c      	bne.n	800974e <_vfiprintf_r+0x176>
 8009734:	7863      	ldrb	r3, [r4, #1]
 8009736:	2b2a      	cmp	r3, #42	; 0x2a
 8009738:	d135      	bne.n	80097a6 <_vfiprintf_r+0x1ce>
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	1d1a      	adds	r2, r3, #4
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	9203      	str	r2, [sp, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	bfb8      	it	lt
 8009746:	f04f 33ff 	movlt.w	r3, #4294967295
 800974a:	3402      	adds	r4, #2
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009834 <_vfiprintf_r+0x25c>
 8009752:	7821      	ldrb	r1, [r4, #0]
 8009754:	2203      	movs	r2, #3
 8009756:	4650      	mov	r0, sl
 8009758:	f7f6 fd42 	bl	80001e0 <memchr>
 800975c:	b140      	cbz	r0, 8009770 <_vfiprintf_r+0x198>
 800975e:	2340      	movs	r3, #64	; 0x40
 8009760:	eba0 000a 	sub.w	r0, r0, sl
 8009764:	fa03 f000 	lsl.w	r0, r3, r0
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	4303      	orrs	r3, r0
 800976c:	3401      	adds	r4, #1
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009774:	482c      	ldr	r0, [pc, #176]	; (8009828 <_vfiprintf_r+0x250>)
 8009776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800977a:	2206      	movs	r2, #6
 800977c:	f7f6 fd30 	bl	80001e0 <memchr>
 8009780:	2800      	cmp	r0, #0
 8009782:	d03f      	beq.n	8009804 <_vfiprintf_r+0x22c>
 8009784:	4b29      	ldr	r3, [pc, #164]	; (800982c <_vfiprintf_r+0x254>)
 8009786:	bb1b      	cbnz	r3, 80097d0 <_vfiprintf_r+0x1f8>
 8009788:	9b03      	ldr	r3, [sp, #12]
 800978a:	3307      	adds	r3, #7
 800978c:	f023 0307 	bic.w	r3, r3, #7
 8009790:	3308      	adds	r3, #8
 8009792:	9303      	str	r3, [sp, #12]
 8009794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009796:	443b      	add	r3, r7
 8009798:	9309      	str	r3, [sp, #36]	; 0x24
 800979a:	e767      	b.n	800966c <_vfiprintf_r+0x94>
 800979c:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a0:	460c      	mov	r4, r1
 80097a2:	2001      	movs	r0, #1
 80097a4:	e7a5      	b.n	80096f2 <_vfiprintf_r+0x11a>
 80097a6:	2300      	movs	r3, #0
 80097a8:	3401      	adds	r4, #1
 80097aa:	9305      	str	r3, [sp, #20]
 80097ac:	4619      	mov	r1, r3
 80097ae:	f04f 0c0a 	mov.w	ip, #10
 80097b2:	4620      	mov	r0, r4
 80097b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b8:	3a30      	subs	r2, #48	; 0x30
 80097ba:	2a09      	cmp	r2, #9
 80097bc:	d903      	bls.n	80097c6 <_vfiprintf_r+0x1ee>
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d0c5      	beq.n	800974e <_vfiprintf_r+0x176>
 80097c2:	9105      	str	r1, [sp, #20]
 80097c4:	e7c3      	b.n	800974e <_vfiprintf_r+0x176>
 80097c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ca:	4604      	mov	r4, r0
 80097cc:	2301      	movs	r3, #1
 80097ce:	e7f0      	b.n	80097b2 <_vfiprintf_r+0x1da>
 80097d0:	ab03      	add	r3, sp, #12
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	462a      	mov	r2, r5
 80097d6:	4b16      	ldr	r3, [pc, #88]	; (8009830 <_vfiprintf_r+0x258>)
 80097d8:	a904      	add	r1, sp, #16
 80097da:	4630      	mov	r0, r6
 80097dc:	f3af 8000 	nop.w
 80097e0:	4607      	mov	r7, r0
 80097e2:	1c78      	adds	r0, r7, #1
 80097e4:	d1d6      	bne.n	8009794 <_vfiprintf_r+0x1bc>
 80097e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097e8:	07d9      	lsls	r1, r3, #31
 80097ea:	d405      	bmi.n	80097f8 <_vfiprintf_r+0x220>
 80097ec:	89ab      	ldrh	r3, [r5, #12]
 80097ee:	059a      	lsls	r2, r3, #22
 80097f0:	d402      	bmi.n	80097f8 <_vfiprintf_r+0x220>
 80097f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097f4:	f7ff fd40 	bl	8009278 <__retarget_lock_release_recursive>
 80097f8:	89ab      	ldrh	r3, [r5, #12]
 80097fa:	065b      	lsls	r3, r3, #25
 80097fc:	f53f af12 	bmi.w	8009624 <_vfiprintf_r+0x4c>
 8009800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009802:	e711      	b.n	8009628 <_vfiprintf_r+0x50>
 8009804:	ab03      	add	r3, sp, #12
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	462a      	mov	r2, r5
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <_vfiprintf_r+0x258>)
 800980c:	a904      	add	r1, sp, #16
 800980e:	4630      	mov	r0, r6
 8009810:	f000 f880 	bl	8009914 <_printf_i>
 8009814:	e7e4      	b.n	80097e0 <_vfiprintf_r+0x208>
 8009816:	bf00      	nop
 8009818:	0800df1c 	.word	0x0800df1c
 800981c:	0800df3c 	.word	0x0800df3c
 8009820:	0800defc 	.word	0x0800defc
 8009824:	0800df60 	.word	0x0800df60
 8009828:	0800df6a 	.word	0x0800df6a
 800982c:	00000000 	.word	0x00000000
 8009830:	080095b3 	.word	0x080095b3
 8009834:	0800df66 	.word	0x0800df66

08009838 <_printf_common>:
 8009838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	4616      	mov	r6, r2
 800983e:	4699      	mov	r9, r3
 8009840:	688a      	ldr	r2, [r1, #8]
 8009842:	690b      	ldr	r3, [r1, #16]
 8009844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009848:	4293      	cmp	r3, r2
 800984a:	bfb8      	it	lt
 800984c:	4613      	movlt	r3, r2
 800984e:	6033      	str	r3, [r6, #0]
 8009850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009854:	4607      	mov	r7, r0
 8009856:	460c      	mov	r4, r1
 8009858:	b10a      	cbz	r2, 800985e <_printf_common+0x26>
 800985a:	3301      	adds	r3, #1
 800985c:	6033      	str	r3, [r6, #0]
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	0699      	lsls	r1, r3, #26
 8009862:	bf42      	ittt	mi
 8009864:	6833      	ldrmi	r3, [r6, #0]
 8009866:	3302      	addmi	r3, #2
 8009868:	6033      	strmi	r3, [r6, #0]
 800986a:	6825      	ldr	r5, [r4, #0]
 800986c:	f015 0506 	ands.w	r5, r5, #6
 8009870:	d106      	bne.n	8009880 <_printf_common+0x48>
 8009872:	f104 0a19 	add.w	sl, r4, #25
 8009876:	68e3      	ldr	r3, [r4, #12]
 8009878:	6832      	ldr	r2, [r6, #0]
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	42ab      	cmp	r3, r5
 800987e:	dc26      	bgt.n	80098ce <_printf_common+0x96>
 8009880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009884:	1e13      	subs	r3, r2, #0
 8009886:	6822      	ldr	r2, [r4, #0]
 8009888:	bf18      	it	ne
 800988a:	2301      	movne	r3, #1
 800988c:	0692      	lsls	r2, r2, #26
 800988e:	d42b      	bmi.n	80098e8 <_printf_common+0xb0>
 8009890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009894:	4649      	mov	r1, r9
 8009896:	4638      	mov	r0, r7
 8009898:	47c0      	blx	r8
 800989a:	3001      	adds	r0, #1
 800989c:	d01e      	beq.n	80098dc <_printf_common+0xa4>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	68e5      	ldr	r5, [r4, #12]
 80098a2:	6832      	ldr	r2, [r6, #0]
 80098a4:	f003 0306 	and.w	r3, r3, #6
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	bf08      	it	eq
 80098ac:	1aad      	subeq	r5, r5, r2
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	6922      	ldr	r2, [r4, #16]
 80098b2:	bf0c      	ite	eq
 80098b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098b8:	2500      	movne	r5, #0
 80098ba:	4293      	cmp	r3, r2
 80098bc:	bfc4      	itt	gt
 80098be:	1a9b      	subgt	r3, r3, r2
 80098c0:	18ed      	addgt	r5, r5, r3
 80098c2:	2600      	movs	r6, #0
 80098c4:	341a      	adds	r4, #26
 80098c6:	42b5      	cmp	r5, r6
 80098c8:	d11a      	bne.n	8009900 <_printf_common+0xc8>
 80098ca:	2000      	movs	r0, #0
 80098cc:	e008      	b.n	80098e0 <_printf_common+0xa8>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4652      	mov	r2, sl
 80098d2:	4649      	mov	r1, r9
 80098d4:	4638      	mov	r0, r7
 80098d6:	47c0      	blx	r8
 80098d8:	3001      	adds	r0, #1
 80098da:	d103      	bne.n	80098e4 <_printf_common+0xac>
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295
 80098e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e4:	3501      	adds	r5, #1
 80098e6:	e7c6      	b.n	8009876 <_printf_common+0x3e>
 80098e8:	18e1      	adds	r1, r4, r3
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	2030      	movs	r0, #48	; 0x30
 80098ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098f2:	4422      	add	r2, r4
 80098f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098fc:	3302      	adds	r3, #2
 80098fe:	e7c7      	b.n	8009890 <_printf_common+0x58>
 8009900:	2301      	movs	r3, #1
 8009902:	4622      	mov	r2, r4
 8009904:	4649      	mov	r1, r9
 8009906:	4638      	mov	r0, r7
 8009908:	47c0      	blx	r8
 800990a:	3001      	adds	r0, #1
 800990c:	d0e6      	beq.n	80098dc <_printf_common+0xa4>
 800990e:	3601      	adds	r6, #1
 8009910:	e7d9      	b.n	80098c6 <_printf_common+0x8e>
	...

08009914 <_printf_i>:
 8009914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	7e0f      	ldrb	r7, [r1, #24]
 800991a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800991c:	2f78      	cmp	r7, #120	; 0x78
 800991e:	4691      	mov	r9, r2
 8009920:	4680      	mov	r8, r0
 8009922:	460c      	mov	r4, r1
 8009924:	469a      	mov	sl, r3
 8009926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800992a:	d807      	bhi.n	800993c <_printf_i+0x28>
 800992c:	2f62      	cmp	r7, #98	; 0x62
 800992e:	d80a      	bhi.n	8009946 <_printf_i+0x32>
 8009930:	2f00      	cmp	r7, #0
 8009932:	f000 80d8 	beq.w	8009ae6 <_printf_i+0x1d2>
 8009936:	2f58      	cmp	r7, #88	; 0x58
 8009938:	f000 80a3 	beq.w	8009a82 <_printf_i+0x16e>
 800993c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009944:	e03a      	b.n	80099bc <_printf_i+0xa8>
 8009946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800994a:	2b15      	cmp	r3, #21
 800994c:	d8f6      	bhi.n	800993c <_printf_i+0x28>
 800994e:	a101      	add	r1, pc, #4	; (adr r1, 8009954 <_printf_i+0x40>)
 8009950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009954:	080099ad 	.word	0x080099ad
 8009958:	080099c1 	.word	0x080099c1
 800995c:	0800993d 	.word	0x0800993d
 8009960:	0800993d 	.word	0x0800993d
 8009964:	0800993d 	.word	0x0800993d
 8009968:	0800993d 	.word	0x0800993d
 800996c:	080099c1 	.word	0x080099c1
 8009970:	0800993d 	.word	0x0800993d
 8009974:	0800993d 	.word	0x0800993d
 8009978:	0800993d 	.word	0x0800993d
 800997c:	0800993d 	.word	0x0800993d
 8009980:	08009acd 	.word	0x08009acd
 8009984:	080099f1 	.word	0x080099f1
 8009988:	08009aaf 	.word	0x08009aaf
 800998c:	0800993d 	.word	0x0800993d
 8009990:	0800993d 	.word	0x0800993d
 8009994:	08009aef 	.word	0x08009aef
 8009998:	0800993d 	.word	0x0800993d
 800999c:	080099f1 	.word	0x080099f1
 80099a0:	0800993d 	.word	0x0800993d
 80099a4:	0800993d 	.word	0x0800993d
 80099a8:	08009ab7 	.word	0x08009ab7
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	1d1a      	adds	r2, r3, #4
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	602a      	str	r2, [r5, #0]
 80099b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099bc:	2301      	movs	r3, #1
 80099be:	e0a3      	b.n	8009b08 <_printf_i+0x1f4>
 80099c0:	6820      	ldr	r0, [r4, #0]
 80099c2:	6829      	ldr	r1, [r5, #0]
 80099c4:	0606      	lsls	r6, r0, #24
 80099c6:	f101 0304 	add.w	r3, r1, #4
 80099ca:	d50a      	bpl.n	80099e2 <_printf_i+0xce>
 80099cc:	680e      	ldr	r6, [r1, #0]
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	2e00      	cmp	r6, #0
 80099d2:	da03      	bge.n	80099dc <_printf_i+0xc8>
 80099d4:	232d      	movs	r3, #45	; 0x2d
 80099d6:	4276      	negs	r6, r6
 80099d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099dc:	485e      	ldr	r0, [pc, #376]	; (8009b58 <_printf_i+0x244>)
 80099de:	230a      	movs	r3, #10
 80099e0:	e019      	b.n	8009a16 <_printf_i+0x102>
 80099e2:	680e      	ldr	r6, [r1, #0]
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099ea:	bf18      	it	ne
 80099ec:	b236      	sxthne	r6, r6
 80099ee:	e7ef      	b.n	80099d0 <_printf_i+0xbc>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	6820      	ldr	r0, [r4, #0]
 80099f4:	1d19      	adds	r1, r3, #4
 80099f6:	6029      	str	r1, [r5, #0]
 80099f8:	0601      	lsls	r1, r0, #24
 80099fa:	d501      	bpl.n	8009a00 <_printf_i+0xec>
 80099fc:	681e      	ldr	r6, [r3, #0]
 80099fe:	e002      	b.n	8009a06 <_printf_i+0xf2>
 8009a00:	0646      	lsls	r6, r0, #25
 8009a02:	d5fb      	bpl.n	80099fc <_printf_i+0xe8>
 8009a04:	881e      	ldrh	r6, [r3, #0]
 8009a06:	4854      	ldr	r0, [pc, #336]	; (8009b58 <_printf_i+0x244>)
 8009a08:	2f6f      	cmp	r7, #111	; 0x6f
 8009a0a:	bf0c      	ite	eq
 8009a0c:	2308      	moveq	r3, #8
 8009a0e:	230a      	movne	r3, #10
 8009a10:	2100      	movs	r1, #0
 8009a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a16:	6865      	ldr	r5, [r4, #4]
 8009a18:	60a5      	str	r5, [r4, #8]
 8009a1a:	2d00      	cmp	r5, #0
 8009a1c:	bfa2      	ittt	ge
 8009a1e:	6821      	ldrge	r1, [r4, #0]
 8009a20:	f021 0104 	bicge.w	r1, r1, #4
 8009a24:	6021      	strge	r1, [r4, #0]
 8009a26:	b90e      	cbnz	r6, 8009a2c <_printf_i+0x118>
 8009a28:	2d00      	cmp	r5, #0
 8009a2a:	d04d      	beq.n	8009ac8 <_printf_i+0x1b4>
 8009a2c:	4615      	mov	r5, r2
 8009a2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a32:	fb03 6711 	mls	r7, r3, r1, r6
 8009a36:	5dc7      	ldrb	r7, [r0, r7]
 8009a38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a3c:	4637      	mov	r7, r6
 8009a3e:	42bb      	cmp	r3, r7
 8009a40:	460e      	mov	r6, r1
 8009a42:	d9f4      	bls.n	8009a2e <_printf_i+0x11a>
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d10b      	bne.n	8009a60 <_printf_i+0x14c>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	07de      	lsls	r6, r3, #31
 8009a4c:	d508      	bpl.n	8009a60 <_printf_i+0x14c>
 8009a4e:	6923      	ldr	r3, [r4, #16]
 8009a50:	6861      	ldr	r1, [r4, #4]
 8009a52:	4299      	cmp	r1, r3
 8009a54:	bfde      	ittt	le
 8009a56:	2330      	movle	r3, #48	; 0x30
 8009a58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a60:	1b52      	subs	r2, r2, r5
 8009a62:	6122      	str	r2, [r4, #16]
 8009a64:	f8cd a000 	str.w	sl, [sp]
 8009a68:	464b      	mov	r3, r9
 8009a6a:	aa03      	add	r2, sp, #12
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	4640      	mov	r0, r8
 8009a70:	f7ff fee2 	bl	8009838 <_printf_common>
 8009a74:	3001      	adds	r0, #1
 8009a76:	d14c      	bne.n	8009b12 <_printf_i+0x1fe>
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	b004      	add	sp, #16
 8009a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a82:	4835      	ldr	r0, [pc, #212]	; (8009b58 <_printf_i+0x244>)
 8009a84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a88:	6829      	ldr	r1, [r5, #0]
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a90:	6029      	str	r1, [r5, #0]
 8009a92:	061d      	lsls	r5, r3, #24
 8009a94:	d514      	bpl.n	8009ac0 <_printf_i+0x1ac>
 8009a96:	07df      	lsls	r7, r3, #31
 8009a98:	bf44      	itt	mi
 8009a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a9e:	6023      	strmi	r3, [r4, #0]
 8009aa0:	b91e      	cbnz	r6, 8009aaa <_printf_i+0x196>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	f023 0320 	bic.w	r3, r3, #32
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	2310      	movs	r3, #16
 8009aac:	e7b0      	b.n	8009a10 <_printf_i+0xfc>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	f043 0320 	orr.w	r3, r3, #32
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	2378      	movs	r3, #120	; 0x78
 8009ab8:	4828      	ldr	r0, [pc, #160]	; (8009b5c <_printf_i+0x248>)
 8009aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009abe:	e7e3      	b.n	8009a88 <_printf_i+0x174>
 8009ac0:	0659      	lsls	r1, r3, #25
 8009ac2:	bf48      	it	mi
 8009ac4:	b2b6      	uxthmi	r6, r6
 8009ac6:	e7e6      	b.n	8009a96 <_printf_i+0x182>
 8009ac8:	4615      	mov	r5, r2
 8009aca:	e7bb      	b.n	8009a44 <_printf_i+0x130>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	6826      	ldr	r6, [r4, #0]
 8009ad0:	6961      	ldr	r1, [r4, #20]
 8009ad2:	1d18      	adds	r0, r3, #4
 8009ad4:	6028      	str	r0, [r5, #0]
 8009ad6:	0635      	lsls	r5, r6, #24
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	d501      	bpl.n	8009ae0 <_printf_i+0x1cc>
 8009adc:	6019      	str	r1, [r3, #0]
 8009ade:	e002      	b.n	8009ae6 <_printf_i+0x1d2>
 8009ae0:	0670      	lsls	r0, r6, #25
 8009ae2:	d5fb      	bpl.n	8009adc <_printf_i+0x1c8>
 8009ae4:	8019      	strh	r1, [r3, #0]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	4615      	mov	r5, r2
 8009aec:	e7ba      	b.n	8009a64 <_printf_i+0x150>
 8009aee:	682b      	ldr	r3, [r5, #0]
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	602a      	str	r2, [r5, #0]
 8009af4:	681d      	ldr	r5, [r3, #0]
 8009af6:	6862      	ldr	r2, [r4, #4]
 8009af8:	2100      	movs	r1, #0
 8009afa:	4628      	mov	r0, r5
 8009afc:	f7f6 fb70 	bl	80001e0 <memchr>
 8009b00:	b108      	cbz	r0, 8009b06 <_printf_i+0x1f2>
 8009b02:	1b40      	subs	r0, r0, r5
 8009b04:	6060      	str	r0, [r4, #4]
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b10:	e7a8      	b.n	8009a64 <_printf_i+0x150>
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	462a      	mov	r2, r5
 8009b16:	4649      	mov	r1, r9
 8009b18:	4640      	mov	r0, r8
 8009b1a:	47d0      	blx	sl
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d0ab      	beq.n	8009a78 <_printf_i+0x164>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	079b      	lsls	r3, r3, #30
 8009b24:	d413      	bmi.n	8009b4e <_printf_i+0x23a>
 8009b26:	68e0      	ldr	r0, [r4, #12]
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	4298      	cmp	r0, r3
 8009b2c:	bfb8      	it	lt
 8009b2e:	4618      	movlt	r0, r3
 8009b30:	e7a4      	b.n	8009a7c <_printf_i+0x168>
 8009b32:	2301      	movs	r3, #1
 8009b34:	4632      	mov	r2, r6
 8009b36:	4649      	mov	r1, r9
 8009b38:	4640      	mov	r0, r8
 8009b3a:	47d0      	blx	sl
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d09b      	beq.n	8009a78 <_printf_i+0x164>
 8009b40:	3501      	adds	r5, #1
 8009b42:	68e3      	ldr	r3, [r4, #12]
 8009b44:	9903      	ldr	r1, [sp, #12]
 8009b46:	1a5b      	subs	r3, r3, r1
 8009b48:	42ab      	cmp	r3, r5
 8009b4a:	dcf2      	bgt.n	8009b32 <_printf_i+0x21e>
 8009b4c:	e7eb      	b.n	8009b26 <_printf_i+0x212>
 8009b4e:	2500      	movs	r5, #0
 8009b50:	f104 0619 	add.w	r6, r4, #25
 8009b54:	e7f5      	b.n	8009b42 <_printf_i+0x22e>
 8009b56:	bf00      	nop
 8009b58:	0800df71 	.word	0x0800df71
 8009b5c:	0800df82 	.word	0x0800df82

08009b60 <_sbrk_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d06      	ldr	r5, [pc, #24]	; (8009b7c <_sbrk_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	f7f6 fedc 	bl	8000928 <_sbrk>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_sbrk_r+0x1a>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_sbrk_r+0x1a>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	20000200 	.word	0x20000200

08009b80 <__sread>:
 8009b80:	b510      	push	{r4, lr}
 8009b82:	460c      	mov	r4, r1
 8009b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b88:	f000 fb32 	bl	800a1f0 <_read_r>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	bfab      	itete	ge
 8009b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b92:	89a3      	ldrhlt	r3, [r4, #12]
 8009b94:	181b      	addge	r3, r3, r0
 8009b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b9a:	bfac      	ite	ge
 8009b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b9e:	81a3      	strhlt	r3, [r4, #12]
 8009ba0:	bd10      	pop	{r4, pc}

08009ba2 <__swrite>:
 8009ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	05db      	lsls	r3, r3, #23
 8009bac:	4605      	mov	r5, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	d505      	bpl.n	8009bc0 <__swrite+0x1e>
 8009bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb8:	2302      	movs	r3, #2
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f000 f970 	bl	8009ea0 <_lseek_r>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	4632      	mov	r2, r6
 8009bce:	463b      	mov	r3, r7
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd6:	f000 b8a9 	b.w	8009d2c <_write_r>

08009bda <__sseek>:
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	460c      	mov	r4, r1
 8009bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be2:	f000 f95d 	bl	8009ea0 <_lseek_r>
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	bf15      	itete	ne
 8009bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bf6:	81a3      	strheq	r3, [r4, #12]
 8009bf8:	bf18      	it	ne
 8009bfa:	81a3      	strhne	r3, [r4, #12]
 8009bfc:	bd10      	pop	{r4, pc}

08009bfe <__sclose>:
 8009bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c02:	f000 b91b 	b.w	8009e3c <_close_r>

08009c06 <strcpy>:
 8009c06:	4603      	mov	r3, r0
 8009c08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c0c:	f803 2b01 	strb.w	r2, [r3], #1
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	d1f9      	bne.n	8009c08 <strcpy+0x2>
 8009c14:	4770      	bx	lr

08009c16 <_vsniprintf_r>:
 8009c16:	b530      	push	{r4, r5, lr}
 8009c18:	4614      	mov	r4, r2
 8009c1a:	2c00      	cmp	r4, #0
 8009c1c:	b09b      	sub	sp, #108	; 0x6c
 8009c1e:	4605      	mov	r5, r0
 8009c20:	461a      	mov	r2, r3
 8009c22:	da05      	bge.n	8009c30 <_vsniprintf_r+0x1a>
 8009c24:	238b      	movs	r3, #139	; 0x8b
 8009c26:	6003      	str	r3, [r0, #0]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	b01b      	add	sp, #108	; 0x6c
 8009c2e:	bd30      	pop	{r4, r5, pc}
 8009c30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c34:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009c38:	bf14      	ite	ne
 8009c3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c3e:	4623      	moveq	r3, r4
 8009c40:	9302      	str	r3, [sp, #8]
 8009c42:	9305      	str	r3, [sp, #20]
 8009c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c48:	9100      	str	r1, [sp, #0]
 8009c4a:	9104      	str	r1, [sp, #16]
 8009c4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009c50:	4669      	mov	r1, sp
 8009c52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c54:	f000 f9cc 	bl	8009ff0 <_svfiprintf_r>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	bfbc      	itt	lt
 8009c5c:	238b      	movlt	r3, #139	; 0x8b
 8009c5e:	602b      	strlt	r3, [r5, #0]
 8009c60:	2c00      	cmp	r4, #0
 8009c62:	d0e3      	beq.n	8009c2c <_vsniprintf_r+0x16>
 8009c64:	9b00      	ldr	r3, [sp, #0]
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	e7df      	b.n	8009c2c <_vsniprintf_r+0x16>

08009c6c <vsniprintf>:
 8009c6c:	b507      	push	{r0, r1, r2, lr}
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	4613      	mov	r3, r2
 8009c72:	460a      	mov	r2, r1
 8009c74:	4601      	mov	r1, r0
 8009c76:	4803      	ldr	r0, [pc, #12]	; (8009c84 <vsniprintf+0x18>)
 8009c78:	6800      	ldr	r0, [r0, #0]
 8009c7a:	f7ff ffcc 	bl	8009c16 <_vsniprintf_r>
 8009c7e:	b003      	add	sp, #12
 8009c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c84:	20000060 	.word	0x20000060

08009c88 <__swbuf_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	460e      	mov	r6, r1
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	4605      	mov	r5, r0
 8009c90:	b118      	cbz	r0, 8009c9a <__swbuf_r+0x12>
 8009c92:	6983      	ldr	r3, [r0, #24]
 8009c94:	b90b      	cbnz	r3, 8009c9a <__swbuf_r+0x12>
 8009c96:	f7ff fa19 	bl	80090cc <__sinit>
 8009c9a:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <__swbuf_r+0x98>)
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	d12b      	bne.n	8009cf8 <__swbuf_r+0x70>
 8009ca0:	686c      	ldr	r4, [r5, #4]
 8009ca2:	69a3      	ldr	r3, [r4, #24]
 8009ca4:	60a3      	str	r3, [r4, #8]
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	071a      	lsls	r2, r3, #28
 8009caa:	d52f      	bpl.n	8009d0c <__swbuf_r+0x84>
 8009cac:	6923      	ldr	r3, [r4, #16]
 8009cae:	b36b      	cbz	r3, 8009d0c <__swbuf_r+0x84>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	1ac0      	subs	r0, r0, r3
 8009cb6:	6963      	ldr	r3, [r4, #20]
 8009cb8:	b2f6      	uxtb	r6, r6
 8009cba:	4283      	cmp	r3, r0
 8009cbc:	4637      	mov	r7, r6
 8009cbe:	dc04      	bgt.n	8009cca <__swbuf_r+0x42>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f7ff f96e 	bl	8008fa4 <_fflush_r>
 8009cc8:	bb30      	cbnz	r0, 8009d18 <__swbuf_r+0x90>
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	60a3      	str	r3, [r4, #8]
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	701e      	strb	r6, [r3, #0]
 8009cd8:	6963      	ldr	r3, [r4, #20]
 8009cda:	3001      	adds	r0, #1
 8009cdc:	4283      	cmp	r3, r0
 8009cde:	d004      	beq.n	8009cea <__swbuf_r+0x62>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	07db      	lsls	r3, r3, #31
 8009ce4:	d506      	bpl.n	8009cf4 <__swbuf_r+0x6c>
 8009ce6:	2e0a      	cmp	r6, #10
 8009ce8:	d104      	bne.n	8009cf4 <__swbuf_r+0x6c>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f7ff f959 	bl	8008fa4 <_fflush_r>
 8009cf2:	b988      	cbnz	r0, 8009d18 <__swbuf_r+0x90>
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <__swbuf_r+0x9c>)
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d101      	bne.n	8009d02 <__swbuf_r+0x7a>
 8009cfe:	68ac      	ldr	r4, [r5, #8]
 8009d00:	e7cf      	b.n	8009ca2 <__swbuf_r+0x1a>
 8009d02:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <__swbuf_r+0xa0>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	bf08      	it	eq
 8009d08:	68ec      	ldreq	r4, [r5, #12]
 8009d0a:	e7ca      	b.n	8009ca2 <__swbuf_r+0x1a>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 f81e 	bl	8009d50 <__swsetup_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d0cb      	beq.n	8009cb0 <__swbuf_r+0x28>
 8009d18:	f04f 37ff 	mov.w	r7, #4294967295
 8009d1c:	e7ea      	b.n	8009cf4 <__swbuf_r+0x6c>
 8009d1e:	bf00      	nop
 8009d20:	0800df1c 	.word	0x0800df1c
 8009d24:	0800df3c 	.word	0x0800df3c
 8009d28:	0800defc 	.word	0x0800defc

08009d2c <_write_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	; (8009d4c <_write_r+0x20>)
 8009d30:	4604      	mov	r4, r0
 8009d32:	4608      	mov	r0, r1
 8009d34:	4611      	mov	r1, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f6 fda3 	bl	8000886 <_write>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_write_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_write_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20000200 	.word	0x20000200

08009d50 <__swsetup_r>:
 8009d50:	4b32      	ldr	r3, [pc, #200]	; (8009e1c <__swsetup_r+0xcc>)
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	681d      	ldr	r5, [r3, #0]
 8009d56:	4606      	mov	r6, r0
 8009d58:	460c      	mov	r4, r1
 8009d5a:	b125      	cbz	r5, 8009d66 <__swsetup_r+0x16>
 8009d5c:	69ab      	ldr	r3, [r5, #24]
 8009d5e:	b913      	cbnz	r3, 8009d66 <__swsetup_r+0x16>
 8009d60:	4628      	mov	r0, r5
 8009d62:	f7ff f9b3 	bl	80090cc <__sinit>
 8009d66:	4b2e      	ldr	r3, [pc, #184]	; (8009e20 <__swsetup_r+0xd0>)
 8009d68:	429c      	cmp	r4, r3
 8009d6a:	d10f      	bne.n	8009d8c <__swsetup_r+0x3c>
 8009d6c:	686c      	ldr	r4, [r5, #4]
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d74:	0719      	lsls	r1, r3, #28
 8009d76:	d42c      	bmi.n	8009dd2 <__swsetup_r+0x82>
 8009d78:	06dd      	lsls	r5, r3, #27
 8009d7a:	d411      	bmi.n	8009da0 <__swsetup_r+0x50>
 8009d7c:	2309      	movs	r3, #9
 8009d7e:	6033      	str	r3, [r6, #0]
 8009d80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8a:	e03e      	b.n	8009e0a <__swsetup_r+0xba>
 8009d8c:	4b25      	ldr	r3, [pc, #148]	; (8009e24 <__swsetup_r+0xd4>)
 8009d8e:	429c      	cmp	r4, r3
 8009d90:	d101      	bne.n	8009d96 <__swsetup_r+0x46>
 8009d92:	68ac      	ldr	r4, [r5, #8]
 8009d94:	e7eb      	b.n	8009d6e <__swsetup_r+0x1e>
 8009d96:	4b24      	ldr	r3, [pc, #144]	; (8009e28 <__swsetup_r+0xd8>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	bf08      	it	eq
 8009d9c:	68ec      	ldreq	r4, [r5, #12]
 8009d9e:	e7e6      	b.n	8009d6e <__swsetup_r+0x1e>
 8009da0:	0758      	lsls	r0, r3, #29
 8009da2:	d512      	bpl.n	8009dca <__swsetup_r+0x7a>
 8009da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da6:	b141      	cbz	r1, 8009dba <__swsetup_r+0x6a>
 8009da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <__swsetup_r+0x66>
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff fb07 	bl	80093c4 <_free_r>
 8009db6:	2300      	movs	r3, #0
 8009db8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f043 0308 	orr.w	r3, r3, #8
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	b94b      	cbnz	r3, 8009dea <__swsetup_r+0x9a>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de0:	d003      	beq.n	8009dea <__swsetup_r+0x9a>
 8009de2:	4621      	mov	r1, r4
 8009de4:	4630      	mov	r0, r6
 8009de6:	f7ff fa6d 	bl	80092c4 <__smakebuf_r>
 8009dea:	89a0      	ldrh	r0, [r4, #12]
 8009dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df0:	f010 0301 	ands.w	r3, r0, #1
 8009df4:	d00a      	beq.n	8009e0c <__swsetup_r+0xbc>
 8009df6:	2300      	movs	r3, #0
 8009df8:	60a3      	str	r3, [r4, #8]
 8009dfa:	6963      	ldr	r3, [r4, #20]
 8009dfc:	425b      	negs	r3, r3
 8009dfe:	61a3      	str	r3, [r4, #24]
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	b943      	cbnz	r3, 8009e16 <__swsetup_r+0xc6>
 8009e04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e08:	d1ba      	bne.n	8009d80 <__swsetup_r+0x30>
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	0781      	lsls	r1, r0, #30
 8009e0e:	bf58      	it	pl
 8009e10:	6963      	ldrpl	r3, [r4, #20]
 8009e12:	60a3      	str	r3, [r4, #8]
 8009e14:	e7f4      	b.n	8009e00 <__swsetup_r+0xb0>
 8009e16:	2000      	movs	r0, #0
 8009e18:	e7f7      	b.n	8009e0a <__swsetup_r+0xba>
 8009e1a:	bf00      	nop
 8009e1c:	20000060 	.word	0x20000060
 8009e20:	0800df1c 	.word	0x0800df1c
 8009e24:	0800df3c 	.word	0x0800df3c
 8009e28:	0800defc 	.word	0x0800defc

08009e2c <abort>:
 8009e2c:	b508      	push	{r3, lr}
 8009e2e:	2006      	movs	r0, #6
 8009e30:	f000 fa18 	bl	800a264 <raise>
 8009e34:	2001      	movs	r0, #1
 8009e36:	f7f6 fcff 	bl	8000838 <_exit>
	...

08009e3c <_close_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d06      	ldr	r5, [pc, #24]	; (8009e58 <_close_r+0x1c>)
 8009e40:	2300      	movs	r3, #0
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	f7f6 fd39 	bl	80008be <_close>
 8009e4c:	1c43      	adds	r3, r0, #1
 8009e4e:	d102      	bne.n	8009e56 <_close_r+0x1a>
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	b103      	cbz	r3, 8009e56 <_close_r+0x1a>
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	bd38      	pop	{r3, r4, r5, pc}
 8009e58:	20000200 	.word	0x20000200

08009e5c <_fstat_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4d07      	ldr	r5, [pc, #28]	; (8009e7c <_fstat_r+0x20>)
 8009e60:	2300      	movs	r3, #0
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	4611      	mov	r1, r2
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	f7f6 fd34 	bl	80008d6 <_fstat>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d102      	bne.n	8009e78 <_fstat_r+0x1c>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	b103      	cbz	r3, 8009e78 <_fstat_r+0x1c>
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	bd38      	pop	{r3, r4, r5, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000200 	.word	0x20000200

08009e80 <_isatty_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_isatty_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f6 fd33 	bl	80008f6 <_isatty>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_isatty_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_isatty_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	20000200 	.word	0x20000200

08009ea0 <_lseek_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d07      	ldr	r5, [pc, #28]	; (8009ec0 <_lseek_r+0x20>)
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	602a      	str	r2, [r5, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f7f6 fd2c 	bl	800090c <_lseek>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_lseek_r+0x1e>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_lseek_r+0x1e>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	20000200 	.word	0x20000200

08009ec4 <__malloc_lock>:
 8009ec4:	4801      	ldr	r0, [pc, #4]	; (8009ecc <__malloc_lock+0x8>)
 8009ec6:	f7ff b9d6 	b.w	8009276 <__retarget_lock_acquire_recursive>
 8009eca:	bf00      	nop
 8009ecc:	200001f4 	.word	0x200001f4

08009ed0 <__malloc_unlock>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	; (8009ed8 <__malloc_unlock+0x8>)
 8009ed2:	f7ff b9d1 	b.w	8009278 <__retarget_lock_release_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	200001f4 	.word	0x200001f4

08009edc <_realloc_r>:
 8009edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4614      	mov	r4, r2
 8009ee4:	460e      	mov	r6, r1
 8009ee6:	b921      	cbnz	r1, 8009ef2 <_realloc_r+0x16>
 8009ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eec:	4611      	mov	r1, r2
 8009eee:	f7ff bad5 	b.w	800949c <_malloc_r>
 8009ef2:	b92a      	cbnz	r2, 8009f00 <_realloc_r+0x24>
 8009ef4:	f7ff fa66 	bl	80093c4 <_free_r>
 8009ef8:	4625      	mov	r5, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	f000 f9cc 	bl	800a29c <_malloc_usable_size_r>
 8009f04:	4284      	cmp	r4, r0
 8009f06:	4607      	mov	r7, r0
 8009f08:	d802      	bhi.n	8009f10 <_realloc_r+0x34>
 8009f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f0e:	d812      	bhi.n	8009f36 <_realloc_r+0x5a>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4640      	mov	r0, r8
 8009f14:	f7ff fac2 	bl	800949c <_malloc_r>
 8009f18:	4605      	mov	r5, r0
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0ed      	beq.n	8009efa <_realloc_r+0x1e>
 8009f1e:	42bc      	cmp	r4, r7
 8009f20:	4622      	mov	r2, r4
 8009f22:	4631      	mov	r1, r6
 8009f24:	bf28      	it	cs
 8009f26:	463a      	movcs	r2, r7
 8009f28:	f7ff fa1c 	bl	8009364 <memcpy>
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4640      	mov	r0, r8
 8009f30:	f7ff fa48 	bl	80093c4 <_free_r>
 8009f34:	e7e1      	b.n	8009efa <_realloc_r+0x1e>
 8009f36:	4635      	mov	r5, r6
 8009f38:	e7df      	b.n	8009efa <_realloc_r+0x1e>

08009f3a <__ssputs_r>:
 8009f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3e:	688e      	ldr	r6, [r1, #8]
 8009f40:	429e      	cmp	r6, r3
 8009f42:	4682      	mov	sl, r0
 8009f44:	460c      	mov	r4, r1
 8009f46:	4690      	mov	r8, r2
 8009f48:	461f      	mov	r7, r3
 8009f4a:	d838      	bhi.n	8009fbe <__ssputs_r+0x84>
 8009f4c:	898a      	ldrh	r2, [r1, #12]
 8009f4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f52:	d032      	beq.n	8009fba <__ssputs_r+0x80>
 8009f54:	6825      	ldr	r5, [r4, #0]
 8009f56:	6909      	ldr	r1, [r1, #16]
 8009f58:	eba5 0901 	sub.w	r9, r5, r1
 8009f5c:	6965      	ldr	r5, [r4, #20]
 8009f5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f66:	3301      	adds	r3, #1
 8009f68:	444b      	add	r3, r9
 8009f6a:	106d      	asrs	r5, r5, #1
 8009f6c:	429d      	cmp	r5, r3
 8009f6e:	bf38      	it	cc
 8009f70:	461d      	movcc	r5, r3
 8009f72:	0553      	lsls	r3, r2, #21
 8009f74:	d531      	bpl.n	8009fda <__ssputs_r+0xa0>
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7ff fa90 	bl	800949c <_malloc_r>
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	b950      	cbnz	r0, 8009f96 <__ssputs_r+0x5c>
 8009f80:	230c      	movs	r3, #12
 8009f82:	f8ca 3000 	str.w	r3, [sl]
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f96:	6921      	ldr	r1, [r4, #16]
 8009f98:	464a      	mov	r2, r9
 8009f9a:	f7ff f9e3 	bl	8009364 <memcpy>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa8:	81a3      	strh	r3, [r4, #12]
 8009faa:	6126      	str	r6, [r4, #16]
 8009fac:	6165      	str	r5, [r4, #20]
 8009fae:	444e      	add	r6, r9
 8009fb0:	eba5 0509 	sub.w	r5, r5, r9
 8009fb4:	6026      	str	r6, [r4, #0]
 8009fb6:	60a5      	str	r5, [r4, #8]
 8009fb8:	463e      	mov	r6, r7
 8009fba:	42be      	cmp	r6, r7
 8009fbc:	d900      	bls.n	8009fc0 <__ssputs_r+0x86>
 8009fbe:	463e      	mov	r6, r7
 8009fc0:	6820      	ldr	r0, [r4, #0]
 8009fc2:	4632      	mov	r2, r6
 8009fc4:	4641      	mov	r1, r8
 8009fc6:	f7ff f9db 	bl	8009380 <memmove>
 8009fca:	68a3      	ldr	r3, [r4, #8]
 8009fcc:	1b9b      	subs	r3, r3, r6
 8009fce:	60a3      	str	r3, [r4, #8]
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	4433      	add	r3, r6
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e7db      	b.n	8009f92 <__ssputs_r+0x58>
 8009fda:	462a      	mov	r2, r5
 8009fdc:	f7ff ff7e 	bl	8009edc <_realloc_r>
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d1e1      	bne.n	8009faa <__ssputs_r+0x70>
 8009fe6:	6921      	ldr	r1, [r4, #16]
 8009fe8:	4650      	mov	r0, sl
 8009fea:	f7ff f9eb 	bl	80093c4 <_free_r>
 8009fee:	e7c7      	b.n	8009f80 <__ssputs_r+0x46>

08009ff0 <_svfiprintf_r>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	4698      	mov	r8, r3
 8009ff6:	898b      	ldrh	r3, [r1, #12]
 8009ff8:	061b      	lsls	r3, r3, #24
 8009ffa:	b09d      	sub	sp, #116	; 0x74
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	4614      	mov	r4, r2
 800a002:	d50e      	bpl.n	800a022 <_svfiprintf_r+0x32>
 800a004:	690b      	ldr	r3, [r1, #16]
 800a006:	b963      	cbnz	r3, 800a022 <_svfiprintf_r+0x32>
 800a008:	2140      	movs	r1, #64	; 0x40
 800a00a:	f7ff fa47 	bl	800949c <_malloc_r>
 800a00e:	6028      	str	r0, [r5, #0]
 800a010:	6128      	str	r0, [r5, #16]
 800a012:	b920      	cbnz	r0, 800a01e <_svfiprintf_r+0x2e>
 800a014:	230c      	movs	r3, #12
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	e0d1      	b.n	800a1c2 <_svfiprintf_r+0x1d2>
 800a01e:	2340      	movs	r3, #64	; 0x40
 800a020:	616b      	str	r3, [r5, #20]
 800a022:	2300      	movs	r3, #0
 800a024:	9309      	str	r3, [sp, #36]	; 0x24
 800a026:	2320      	movs	r3, #32
 800a028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a030:	2330      	movs	r3, #48	; 0x30
 800a032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1dc <_svfiprintf_r+0x1ec>
 800a036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a03a:	f04f 0901 	mov.w	r9, #1
 800a03e:	4623      	mov	r3, r4
 800a040:	469a      	mov	sl, r3
 800a042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a046:	b10a      	cbz	r2, 800a04c <_svfiprintf_r+0x5c>
 800a048:	2a25      	cmp	r2, #37	; 0x25
 800a04a:	d1f9      	bne.n	800a040 <_svfiprintf_r+0x50>
 800a04c:	ebba 0b04 	subs.w	fp, sl, r4
 800a050:	d00b      	beq.n	800a06a <_svfiprintf_r+0x7a>
 800a052:	465b      	mov	r3, fp
 800a054:	4622      	mov	r2, r4
 800a056:	4629      	mov	r1, r5
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ff6e 	bl	8009f3a <__ssputs_r>
 800a05e:	3001      	adds	r0, #1
 800a060:	f000 80aa 	beq.w	800a1b8 <_svfiprintf_r+0x1c8>
 800a064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a066:	445a      	add	r2, fp
 800a068:	9209      	str	r2, [sp, #36]	; 0x24
 800a06a:	f89a 3000 	ldrb.w	r3, [sl]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80a2 	beq.w	800a1b8 <_svfiprintf_r+0x1c8>
 800a074:	2300      	movs	r3, #0
 800a076:	f04f 32ff 	mov.w	r2, #4294967295
 800a07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a07e:	f10a 0a01 	add.w	sl, sl, #1
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	9307      	str	r3, [sp, #28]
 800a086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a08a:	931a      	str	r3, [sp, #104]	; 0x68
 800a08c:	4654      	mov	r4, sl
 800a08e:	2205      	movs	r2, #5
 800a090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a094:	4851      	ldr	r0, [pc, #324]	; (800a1dc <_svfiprintf_r+0x1ec>)
 800a096:	f7f6 f8a3 	bl	80001e0 <memchr>
 800a09a:	9a04      	ldr	r2, [sp, #16]
 800a09c:	b9d8      	cbnz	r0, 800a0d6 <_svfiprintf_r+0xe6>
 800a09e:	06d0      	lsls	r0, r2, #27
 800a0a0:	bf44      	itt	mi
 800a0a2:	2320      	movmi	r3, #32
 800a0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a8:	0711      	lsls	r1, r2, #28
 800a0aa:	bf44      	itt	mi
 800a0ac:	232b      	movmi	r3, #43	; 0x2b
 800a0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b8:	d015      	beq.n	800a0e6 <_svfiprintf_r+0xf6>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2000      	movs	r0, #0
 800a0c0:	f04f 0c0a 	mov.w	ip, #10
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ca:	3b30      	subs	r3, #48	; 0x30
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	d94e      	bls.n	800a16e <_svfiprintf_r+0x17e>
 800a0d0:	b1b0      	cbz	r0, 800a100 <_svfiprintf_r+0x110>
 800a0d2:	9207      	str	r2, [sp, #28]
 800a0d4:	e014      	b.n	800a100 <_svfiprintf_r+0x110>
 800a0d6:	eba0 0308 	sub.w	r3, r0, r8
 800a0da:	fa09 f303 	lsl.w	r3, r9, r3
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	46a2      	mov	sl, r4
 800a0e4:	e7d2      	b.n	800a08c <_svfiprintf_r+0x9c>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	1d19      	adds	r1, r3, #4
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	9103      	str	r1, [sp, #12]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bfbb      	ittet	lt
 800a0f2:	425b      	neglt	r3, r3
 800a0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f8:	9307      	strge	r3, [sp, #28]
 800a0fa:	9307      	strlt	r3, [sp, #28]
 800a0fc:	bfb8      	it	lt
 800a0fe:	9204      	strlt	r2, [sp, #16]
 800a100:	7823      	ldrb	r3, [r4, #0]
 800a102:	2b2e      	cmp	r3, #46	; 0x2e
 800a104:	d10c      	bne.n	800a120 <_svfiprintf_r+0x130>
 800a106:	7863      	ldrb	r3, [r4, #1]
 800a108:	2b2a      	cmp	r3, #42	; 0x2a
 800a10a:	d135      	bne.n	800a178 <_svfiprintf_r+0x188>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	9203      	str	r2, [sp, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	bfb8      	it	lt
 800a118:	f04f 33ff 	movlt.w	r3, #4294967295
 800a11c:	3402      	adds	r4, #2
 800a11e:	9305      	str	r3, [sp, #20]
 800a120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1ec <_svfiprintf_r+0x1fc>
 800a124:	7821      	ldrb	r1, [r4, #0]
 800a126:	2203      	movs	r2, #3
 800a128:	4650      	mov	r0, sl
 800a12a:	f7f6 f859 	bl	80001e0 <memchr>
 800a12e:	b140      	cbz	r0, 800a142 <_svfiprintf_r+0x152>
 800a130:	2340      	movs	r3, #64	; 0x40
 800a132:	eba0 000a 	sub.w	r0, r0, sl
 800a136:	fa03 f000 	lsl.w	r0, r3, r0
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	4303      	orrs	r3, r0
 800a13e:	3401      	adds	r4, #1
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4826      	ldr	r0, [pc, #152]	; (800a1e0 <_svfiprintf_r+0x1f0>)
 800a148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a14c:	2206      	movs	r2, #6
 800a14e:	f7f6 f847 	bl	80001e0 <memchr>
 800a152:	2800      	cmp	r0, #0
 800a154:	d038      	beq.n	800a1c8 <_svfiprintf_r+0x1d8>
 800a156:	4b23      	ldr	r3, [pc, #140]	; (800a1e4 <_svfiprintf_r+0x1f4>)
 800a158:	bb1b      	cbnz	r3, 800a1a2 <_svfiprintf_r+0x1b2>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	3307      	adds	r3, #7
 800a15e:	f023 0307 	bic.w	r3, r3, #7
 800a162:	3308      	adds	r3, #8
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a168:	4433      	add	r3, r6
 800a16a:	9309      	str	r3, [sp, #36]	; 0x24
 800a16c:	e767      	b.n	800a03e <_svfiprintf_r+0x4e>
 800a16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a172:	460c      	mov	r4, r1
 800a174:	2001      	movs	r0, #1
 800a176:	e7a5      	b.n	800a0c4 <_svfiprintf_r+0xd4>
 800a178:	2300      	movs	r3, #0
 800a17a:	3401      	adds	r4, #1
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	4619      	mov	r1, r3
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	4620      	mov	r0, r4
 800a186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a18a:	3a30      	subs	r2, #48	; 0x30
 800a18c:	2a09      	cmp	r2, #9
 800a18e:	d903      	bls.n	800a198 <_svfiprintf_r+0x1a8>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0c5      	beq.n	800a120 <_svfiprintf_r+0x130>
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	e7c3      	b.n	800a120 <_svfiprintf_r+0x130>
 800a198:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19c:	4604      	mov	r4, r0
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7f0      	b.n	800a184 <_svfiprintf_r+0x194>
 800a1a2:	ab03      	add	r3, sp, #12
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <_svfiprintf_r+0x1f8>)
 800a1aa:	a904      	add	r1, sp, #16
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f3af 8000 	nop.w
 800a1b2:	1c42      	adds	r2, r0, #1
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	d1d6      	bne.n	800a166 <_svfiprintf_r+0x176>
 800a1b8:	89ab      	ldrh	r3, [r5, #12]
 800a1ba:	065b      	lsls	r3, r3, #25
 800a1bc:	f53f af2c 	bmi.w	800a018 <_svfiprintf_r+0x28>
 800a1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c2:	b01d      	add	sp, #116	; 0x74
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	ab03      	add	r3, sp, #12
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <_svfiprintf_r+0x1f8>)
 800a1d0:	a904      	add	r1, sp, #16
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	f7ff fb9e 	bl	8009914 <_printf_i>
 800a1d8:	e7eb      	b.n	800a1b2 <_svfiprintf_r+0x1c2>
 800a1da:	bf00      	nop
 800a1dc:	0800df60 	.word	0x0800df60
 800a1e0:	0800df6a 	.word	0x0800df6a
 800a1e4:	00000000 	.word	0x00000000
 800a1e8:	08009f3b 	.word	0x08009f3b
 800a1ec:	0800df66 	.word	0x0800df66

0800a1f0 <_read_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d07      	ldr	r5, [pc, #28]	; (800a210 <_read_r+0x20>)
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f7f6 fb24 	bl	800084c <_read>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_read_r+0x1e>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_read_r+0x1e>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	20000200 	.word	0x20000200

0800a214 <_raise_r>:
 800a214:	291f      	cmp	r1, #31
 800a216:	b538      	push	{r3, r4, r5, lr}
 800a218:	4604      	mov	r4, r0
 800a21a:	460d      	mov	r5, r1
 800a21c:	d904      	bls.n	800a228 <_raise_r+0x14>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	f04f 30ff 	mov.w	r0, #4294967295
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a22a:	b112      	cbz	r2, 800a232 <_raise_r+0x1e>
 800a22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a230:	b94b      	cbnz	r3, 800a246 <_raise_r+0x32>
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f830 	bl	800a298 <_getpid_r>
 800a238:	462a      	mov	r2, r5
 800a23a:	4601      	mov	r1, r0
 800a23c:	4620      	mov	r0, r4
 800a23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a242:	f000 b817 	b.w	800a274 <_kill_r>
 800a246:	2b01      	cmp	r3, #1
 800a248:	d00a      	beq.n	800a260 <_raise_r+0x4c>
 800a24a:	1c59      	adds	r1, r3, #1
 800a24c:	d103      	bne.n	800a256 <_raise_r+0x42>
 800a24e:	2316      	movs	r3, #22
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	e7e7      	b.n	800a226 <_raise_r+0x12>
 800a256:	2400      	movs	r4, #0
 800a258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a25c:	4628      	mov	r0, r5
 800a25e:	4798      	blx	r3
 800a260:	2000      	movs	r0, #0
 800a262:	e7e0      	b.n	800a226 <_raise_r+0x12>

0800a264 <raise>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <raise+0xc>)
 800a266:	4601      	mov	r1, r0
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	f7ff bfd3 	b.w	800a214 <_raise_r>
 800a26e:	bf00      	nop
 800a270:	20000060 	.word	0x20000060

0800a274 <_kill_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	; (800a294 <_kill_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	f7f6 fac9 	bl	8000818 <_kill>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_kill_r+0x1c>
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_kill_r+0x1c>
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	20000200 	.word	0x20000200

0800a298 <_getpid_r>:
 800a298:	f7f6 bab6 	b.w	8000808 <_getpid>

0800a29c <_malloc_usable_size_r>:
 800a29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a0:	1f18      	subs	r0, r3, #4
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	bfbc      	itt	lt
 800a2a6:	580b      	ldrlt	r3, [r1, r0]
 800a2a8:	18c0      	addlt	r0, r0, r3
 800a2aa:	4770      	bx	lr

0800a2ac <_init>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	bf00      	nop
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr

0800a2b8 <_fini>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr
